{"name":"Hydrogen","main":"./lib/main","version":"0.10.0","description":"Run code and get results inline using Jupyter kernels like IPython, IJulia, and iTorch","author":{"name":"Will Whitney","email":"me@willwhitney.com"},"keywords":["execute","run","jupyter","ipython","julia","python","torch","ijulia","itorch","plot","image"],"activationCommands":{"atom-text-editor":["hydrogen:run","hydrogen:run-and-move-down","hydrogen:run-all","hydrogen:run-all-above"]},"scripts":{},"repository":{"type":"git","url":"git+https://github.com/nteract/hydrogen.git"},"license":"MIT","engines":{"atom":">=1.6.0 <2.0.0"},"dependencies":{"atom-message-panel":"^1.2.4","atom-space-pen-views":"^2.0.5","jmp":"0.4.x","lodash":"^4.12.0","transformime":"^3.0.0","transformime-marked":"0.0.1","uuid":"^2.0.1"},"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}}},"providedServices":{"autocomplete.provider":{"versions":{"2.0.0":"provide"}}},"readme":"# Hydrogen\n\n[![slack in](http://slack.nteract.in/badge.svg)](http://slack.nteract.in)\n[![Build Status](https://travis-ci.org/nteract/hydrogen.svg?branch=master)](https://travis-ci.org/nteract/hydrogen)\n\nThis package lets you run your code directly in Atom using any [Jupyter](https://jupyter.org/) kernels you have installed.\n\nHydrogen was inspired by Bret Victor's ideas about the power of instantaneous feedback and the design of [Light Table](http://lighttable.com/). Running code inline and in real time is a more natural way to develop. By bringing the interactive style of Light Table to the rock-solid usability of Atom, Hydrogen makes it easy to write code the way you want to.\n\n<img src=\"https://cloud.githubusercontent.com/assets/13285808/14598778/1cff1b32-0554-11e6-8181-504307ca6b56.gif\" width=600>\n\n\n## Features\n\n- execute a line, selection, or block at a time\n- rich media support for plots, images, and video\n- watch expressions let you keep track of variables and re-run snippets after every change\n- completions from the running kernel, just like autocomplete in the Chrome dev tools\n- code can be inspected to show useful information provided by the running kernel\n- one kernel per language (so you can run snippets from several files, all in the same namespace)\n- interrupt or restart the kernel if anything goes wrong\n- use a custom kernel connection (for example to run code inside Docker), read more in the \"Custom kernel connection (inside Docker)\" section\n\n<!-- <img src=\"http://i.imgur.com/KiHQFO4.png?1\" width=300> -->\n\n## Dependencies\n\nFor all systems, you'll need\n\n- [Atom](https://atom.io/) `1.6.0+`\n- [ZeroMQ](http://zeromq.org/intro:get-the-software)\n- IPython notebook `pip install ipython[notebook]`\n- Python 2 (for builds - you can still run Python 3 code)\n\nEach operating system has their own instruction set. Please read on down to save yourself time.\n\n#### OS X\n\n##### homebrew on OS X\n\n- [`pkg-config`](https://www.freedesktop.org/wiki/Software/pkg-config/): `brew install pkg-config`\n- [ZeroMQ](http://zeromq.org/intro:get-the-software): `brew install zeromq`\n- [IPython (Jupyter)](http://ipython.org/install.html): needs to be installed and on your `$PATH`. `pip install \"ipython[notebook]\"`\n\n#### Windows\n\n- You'll need a compiler! [Visual Studio 2013 Community Edition](https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx) is required to build zmq.node.\n- Python (tread on your own or install [Anaconda](https://www.continuum.io/downloads))\n- [IPython notebook](http://ipython.org/install.html) - If you installed Anaconda, you're already done\n\nAfter these are installed, you'll likely need to restart your machine (especially after Visual Studio).\n\n#### Linux\n\nFor Debian/Ubuntu based variants, you'll need `libzmq3-dev` (preferred) or alternatively `libzmq-dev`.   \nFor RedHat/CentOS/Fedora based variants, you'll need `zeromq` and `zeromq-devel`.\n\nIf you have Python and pip setup, install the notebook directly:\n\n```\npip install ipython[notebook]\n```\n\n## Installation\n\nAssuming you followed the dependencies steps above, you can now `apm install hydrogen` (recommended) or search for \"hydrogen\" in the Install pane of the Atom settings. Note that installing from within Atom will only work if you start Atom from the command line! See [Jank](#Jank).\n\nIf your default `python` is 3.x, you need to instead run `PYTHON=python2.7 apm install hydrogen`. You can still use 3.x versions of Python in Hydrogen, but it will only build with 2.x due to a [longstanding issue with `gyp`](https://bugs.chromium.org/p/gyp/issues/detail?id=36)\n\n\n### Troubleshooting\n\nWe have a [troubleshooting guide](https://github.com/nteract/hydrogen/wiki/Troubleshooting) in the wiki! It's pretty sparse at the moment, so please share how the resolution to any rough spots that you find.\n\n### Kernels\n\nTested and works with:\n\n- [IPython](http://ipython.org/)\n- [IJulia](https://github.com/JuliaLang/IJulia.jl)\n- [iTorch](https://github.com/facebook/iTorch)\n- [IJavascript](https://github.com/n-riesco/ijavascript)\n- [jupyter-nodejs](https://github.com/notablemind/jupyter-nodejs)\n- [IRkernel](https://github.com/IRkernel/IRkernel) (install the \"Development\" version from `master` — necessary changes haven't gotten released as binaries yet)\n\nBut it _should_ work with any [kernel](https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages) — [post an issue](https://github.com/nteract/hydrogen/issues) if anything is broken!\n\n<img src=\"http://i.imgur.com/1cGSHzo.png\" width=350>\n<img src=\"http://i.imgur.com/I5kO69B.png\" width=350>\n\nNote that if you install a new kernel, you'll need to reload Atom (search in the Command Palette for \"reload\") for Hydrogen to find it. For performance reasons, Hydrogen only looks for available kernels when it first starts.\n\n## Usage\n\nMake sure to start Atom from the command line (with `atom <directory or file>`) for this package to work! See [Jank](#Jank).\n\n### Running code\n\nHydrogen adds a command \"Hydrogen: Run\" to the command palette when you're in any text editor. Press ⌘-⇧-P to open the command palette and type \"hydrogen\" — it'll come up.\n\nThe \"Hydrogen: Run\" command is bound to the keyboard shortcut ⌘-⌥-↩ by default.\n\nThere are two ways to tell Hydrogen which code in your file to run.\n\n1. **Selected code:** If you have code selected when you hit Run, Hydrogen will run exactly that code.\n2. **Current block:** With no code selected, Hydrogen will try to find the complete block that's on or before the current line.\n\n    - If the line you're on is already a complete expression (like `s = \"abracadabra\"`), Hydrogen will run just that line.\n\n    - If the line you're on is the start of a block like a `for` loop, Hydrogen will run the whole block.\n\n    - If the line you're on is blank, Hydrogen will run the first block above that line.\n\nIt's easiest to see these interactions visually:\n\n<img src=\"http://g.recordit.co/4ViVmKtKAr.gif\">\n\nIf your code starts getting cluttered up with results, run \"Hydrogen: Clear Results\" to remove them all at once. You can also run this command with ⌘-⌥-⌫.\n\n\n### Watch Expressions\n\nAfter you've run some code with Hydrogen, you can use the \"Hydrogen: Toggle Watches\" command from the Command Palette to open the watch expression sidebar. Whatever code you write in watch expressions will be re-run after each time you send that kernel any other code.\n\n<img width=770 src=\"https://cloud.githubusercontent.com/assets/13285808/14125700/e5cb587a-f60c-11e5-9c28-5aef83088da2.gif\">\n\n**IMPORTANT:** Be careful what you put in your watch expressions. If you write code that mutates state in a watch expression, that code will get run after every execute command and likely result in some _extremely confusing_ bugs.\n\n\nYou can re-run the watch expressions by using the normal run shortcut (⌘-⌥-↩ by default) inside a watch expression's edit field.\n\nIf you have multiple kernels running, you can switch between their watch expressions with the \"Hydrogen: Select Watch Kernel\" command (or just click on the \"Kernel: <language>\" text).\n\n### Completion\n\nReceive completions from the running kernel.\n\n<img width=\"416\" src=\"https://cloud.githubusercontent.com/assets/13285808/14108987/35d17fae-f5c0-11e5-9c0b-ee899387f4d9.png\">\n\n### Code Introspection\n\nYou can use the \"Hydrogen: Inspect\" command from the Command Palette to get metadata from the kernel about the object under the cursor.\n\n<img width=\"770\" src=\"https://cloud.githubusercontent.com/assets/13285808/14108719/d72762bc-f5be-11e5-8188-32725e3d2726.png\">\n\n### Managing kernels\n\nSometimes things go wrong. Maybe you've written an infinite loop, maybe the kernel has crashed, or maybe you just want to clear the kernel's namespace. Use the command palette to open \"Hydrogen: Show Kernel Commands\" and select \"Interrupt\" to interrupt (think `Ctrl-C` in a REPL) the kernel or \"Restart\" to kill the kernel and start a new one, clearing the namespace.\n\nYou can also access these commands by clicking on the kernel status in the status bar. It looks like this:\n\n<img src=\"http://i.imgur.com/oQB5mpB.png\" width=300>\n\nAdditionally, if you have two or more kernels for a particular language (grammar), you can select which kernel to use with the \"Switch to <kernel>\" option in the Kernel Commands menu. This change is automatically saved into the Hydrogen configuration's ```grammarToKernel``` map. For example, if Hydrogen is using the kernel for Python 2 by default, you could switch to Python 3. Then next time you open a `.py` file, Hydrogen will remember your selection and use Python 3.\n\n## How it works\n\nHydrogen implements the [messaging protocol](http://ipython.org/ipython-doc/stable/development/messaging.html) for [Jupyter](https://jupyter.org/). Jupyter (formerly IPython) uses ZeroMQ to connect a client (like Hydrogen) to a running kernel (like IJulia or iTorch). The client sends code to be executed to the kernel, which runs it and sends back results.\n\n\n## Jank\n\n- In order to have access to your `$PATH` to find where IPython and other binaries are, Atom has to be launched from the command line with `atom <location>`. If you launch Atom as an app, this package won't work.\n\n\n## Custom kernel connection (inside Docker)\n\nYou can use a custom kernel connection file to connect to a previously created kernel.\n\nFor example, you can run a kernel inside a Docker container and make Hydrogen connect to it automatically. If you are using Docker this would allow you to develop from Atom but with all the dependencies, autocompletion, environment, etc of a Docker container.\n\nHydrogen will look for a kernel JSON connection file under `./hydrogen/connection.json` inside your project. If that file exists, Hydrogen will try to connect to the kernel specified by that connection file.\n\nHere's a simple recipe for doing and testing that with Python:\n\n* In your project directory, create a `Dockerfile` with:\n\n```\nFROM python:2.7\n\nRUN pip install markdown\n\nRUN pip install ipykernel\nRUN echo \"alias hydrokernel='python -m ipykernel \"'--ip=$(hostname -I)'\" -f /tmp/hydrogen/connection.json'\" >> /etc/bash.bashrc\n```\n\nYou will test using the Python package `markdown` from inside the Docker container in your local Atom editor, with autocompletion, etc.\n\nThe last two lines are the only (temporal) addition to your `Dockerfile` that will allow you to develop locally using the remote Python kernel. If you already have a Python project with a `Dockerfile` you only need to copy those 2 lines and add them to it:\n\n```\nRUN pip install ipykernel\nRUN echo \"alias hydrokernel='python -m ipykernel \"'--ip=$(hostname -I)'\" -f /tmp/hydrogen/connection.json'\" >> /etc/bash.bashrc\n```\n\nThe first of those two lines will install the Python package `ipykernel`, which is the only requisite to run the remote Python kernel.\n\nThe second line creates a handy shortcut named `hydrokernel` to run a Python kernel that listens on the container's IP address and writes the connection file to `/tmp/hydrogen/connection.json`.\n\n* Build your container with:\n\n```\ndocker build -t python-docker .\n```\n\n* Run your container mounting a volume that maps `./hydrogen/` in your local project directory to `/tmp/hydrogen/` in your container. That's the trick that will allow Hydrogen to connect to the kernel running inside your container automatically. It's probably better to run it with the command `bash` and start the kernel manually, so that you can restart it if you need to (or if it dies).\n\n```\ndocker run -it --name python-docker -v $(pwd)/hydrogen:/tmp/hydrogen python-docker bash\n```\n\n* Next, you just have to call the alias command we created in the `Dockerfile`, that will start the kernel with all the parameters needed:\n\n```\nhydrokernel\n```\n\n* You will see an output similar to:\n\n```\nroot@24ae5d04ef3c:/# hydrokernel\nNOTE: When using the `ipython kernel` entry point, Ctrl-C will not work.\n\nTo exit, you will have to explicitly quit this process, by either sending\n\"quit\" from a client, or using Ctrl-\\ in UNIX-like environments.\n\nTo read more about this, see https://github.com/ipython/ipython/issues/2049\n\n\nTo connect another client to this kernel, use:\n    --existing /tmp/hydrogen/connection.json\n```\n\n* And you will see that a file was created in `./hydrogen/connection.json` inside your project directory.\n\n* Now you can create a file `test.py` with:\n\n```\nimport markdown\nmarkdown.version\n```\n\n* Select the contents and run them with Hydrogen (\"`cmd-shift-P`\" and \"`Hydrogen: run`\").\n\n* You will see the inline execution and output that just ran from your kernel, even if you don't have the Python package `mardown` installed locally, because it's running inside your container.\n\n```\nimport markdown [✓]\nmarkdown.version ['2.6.6']\n```\n\n\n\n## Why \"Hydrogen\"?\n\nHydrogen atoms make up 90% of Jupiter by volume.\n\nPlus, it was easy to make a logo.\n\n![hydrogen logo](https://cdn.rawgit.com/nteract/hydrogen/master/static/logo.svg)\n\n## Development\n#### Quick and dirty setup\n\n`apm develop hydrogen`\n\nThis will clone the `hydrogen` repository to `~/github` unless you set the\n`ATOM_REPOS_HOME` environment variable.\n\n#### I already cloned it!\n\nIf you cloned it somewhere else, you'll want to use `apm link --dev` within the\npackage directory, followed by `apm install` to get dependencies.\n\n### Workflow\n\nAfter pulling upstream changes, make sure to run `apm update`.\n\nTo start hacking, make sure to run `atom --dev` from the package directory.\nCut a branch while you're working then either submit a Pull Request when done\nor when you want some feedback!\n\n#### Running specs\n\nYou can run specs by triggering the `window:run-package-specs` command in Atom. To run tests on the command line use `apm test` within the package directory.\n\nYou can learn more about how to write specs [here](http://flight-manual.atom.io/hacking-atom/sections/writing-specs/).\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/nteract/hydrogen/issues"},"homepage":"https://github.com/nteract/hydrogen#readme","_id":"Hydrogen@0.10.0","_shasum":"e13c9deb757aa5b52727be37046ccba3808391ee","_resolved":"file:../d-116516-97492-mqa0w6/package.tgz","_from":"../d-116516-97492-mqa0w6/package.tgz"}