{"version":1,"windowDimensions":{"x":1280,"y":303,"width":1280,"height":737,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/Rad/Documents/Dev/bamviz"],"buffers":[{"id":"6f3e76c6d971ff0ed7802809f44cdec8","text":"","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"7":{"id":"7","maintainHistory":false,"markersById":{},"version":2},"8":{"id":"8","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":9,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","preferredLineEnding":"\n","nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"6ace5054873069a51a3d7021b8ce9657","text":"from __future__ import division\nimport argparse\nimport os\nimport sys\nimport pybedtools\nimport time\nimport pandas as pd\nimport subprocess as sp\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\nfrom matplotlib import rcParams\nfrom mpltools import style\nimport pysam\n\nstyle.use('ggplot')\n\n\nrcParams['axes.labelsize'] = 9\nrcParams['xtick.labelsize'] = 9\nrcParams['ytick.labelsize'] = 9\nrcParams['legend.fontsize'] = 7\n#rcParams['font.family'] = 'serif'\nrcParams['font.serif'] = ['Computer Modern Roman']\nrcParams['text.usetex'] = False\nrcParams['figure.figsize'] = 20, 10\n\n\nparser = argparse.ArgumentParser(\n    description='Run Bowtie2 paired mode in bulk and generates a lot of stats and plots')\n\nparser.add_argument('--fastq_path', required=True)\nparser.add_argument('--ref_genome_path', required=True)\nparser.add_argument('--outdir', required=True)\nparser.add_argument('--extension', default=\"\")\n\nargs = parser.parse_args()\n\n# binsize 10Mb resolution\n\nbin_size = 10000000\n\n# Defining a global version of the genome, binned\n\ntemp = pybedtools.BedTool()\nbinned_genome = temp.window_maker(genome=\"hg19\", w=bin_size)\n\nchrom_sizes = {\n    '1': 249250621,\n    '2': 243199373,\n    '3': 198022430,\n    '4': 191154276,\n    '5': 180915260,\n    '6': 171115067,\n    '7': 159138663,\n    '8': 146364022,\n    '9': 141213431,\n    '10': 135534747,\n    '11': 135006516,\n    '12': 133851895,\n    '13': 115169878,\n    '14': 107349540,\n    '15': 102531392,\n    '16': 90354753,\n    '17': 81195210,\n    '18': 78077248,\n    '19': 59128983,\n    '20': 63025520,\n    '21': 48129895,\n    '22': 51304566,\n    'X': 155270560,\n    'Y': 59373566\n}\n\ntoto, tata = [12, 12]\n# utils\n\n\ndef create_samples_lists_from_location(path_to_fastq):\n    \"\"\"\n    Parse Fastq files directory and get the samples names, push them to list\n    \"\"\"\n    samples = []\n    R1_list = []\n    R2_list = []\n    for root, dirs, files in os.walk(path_to_fastq):\n        for file in files:\n            if file.endswith(\"_L001_R1_001.fastq\" + args.extension):\n                sample_id = file.split(\"_L001_R1\")[0]\n                samples.append(sample_id)\n                R1_list.append(\n                    os.path.join(path_to_fastq, sample_id) + \"_L001_R1_001.fastq\" + args.extension)\n                R2_list.append(\n                    os.path.join(path_to_fastq, sample_id) + \"_L001_R2_001.fastq\" + args.extension)\n    return R1_list, R2_list, samples\n\n\ndef run_bowtie2(path_to_fastq, results_path, debug=True):\n    '''\n    Do a paired end alignment using bowtie2\n    '''\n\n    R1_list, R2_list, samples = create_samples_lists_from_location(\n        path_to_fastq)\n    for sample, r1_sample, r2_sample in zip(samples, R1_list, R2_list):\n        bowtie2_cmd = \"bowtie2 -I %d -X %d -p %d -x %s -S --fr -1 %s -2 %s -S %s.sam \" % (\n            0, 500, 8, args.ref_genome_path, r1_sample, r2_sample, os.path.join(args.outdir, sample))\n\n        if debug:\n            print bowtie2_cmd\n        else:\n            print bowtie2_cmd\n            os.system(bowtie2_cmd)\n\n        samtools_cmd = \"samtools view -bS %s -o %s\" % (os.path.join(\n            args.outdir, sample + '.sam'), os.path.join(args.outdir, sample + '.bam'))\n\n        if debug:\n            print samtools_cmd\n        else:\n            print samtools_cmd\n            os.system(samtools_cmd)\n\n        samtools_sort = \"samtools sort %s %s.sorted\" % (\n            os.path.join(args.outdir, sample + '.bam'), os.path.join(args.outdir, sample))\n\n        if debug:\n            print samtools_sort\n        else:\n            print samtools_sort\n            os.system(samtools_sort)\n\n        samtools_index = \"samtools index %s \" % (\n            os.path.join(args.outdir, sample + '.sorted.bam'))\n\n        if debug:\n            print samtools_index\n        else:\n            print samtools_index\n            os.system(samtools_index)\n\n\n# utils\ndef to_ucsc_chrom(x):\n    \"\"\"\n    If we create binned genome from hg19 we need to remove these 'chr' from chromosome labels\n    \"\"\"\n    if isinstance(x, basestring):\n        fn = x\n    else:\n        fn = x.fn\n\n    f = open(fn)\n\n    def gen():\n        \"\"\"\n        Generator that yields only valid BED lines and then stops.\n\n        The first \"all\" line is appended to hist_lines.\n        \"\"\"\n        while True:\n            line = f.next()\n            toks = line.strip().split('\\t')\n            toks[0] = toks[0].replace(\"chr\", \"\")\n            yield pybedtools.create_interval_from_list(toks)\n    b = pybedtools.BedTool(gen()).saveas()\n    return b\n\n\nucsc_genome = to_ucsc_chrom(binned_genome)\n\n\n# utils\ndef split_coverage(x, columns):\n    \"\"\"\n    Split a coverage file created using bedtools coverage -hist -- which will\n    have trailing \"all\" hist lines -- into 1) a BedTool object with valid BED\n    lines and 2) a pandas DataFrame of all coverage, parsed from the trailing\n    \"all\" lines.\n    `x` can be a filename or a BedTool instance.\n    \"\"\"\n    if isinstance(x, basestring):\n        fn = x\n    else:\n        fn = x.fn\n    f = open(fn)\n    hist_lines = []\n    details_lines = []\n\n    def gen():\n        \"\"\"\n        Generator that yields only valid BED lines and then stops.\n        The first \"all\" line is appended to hist_lines.\n        \"\"\"\n        while True:\n            line = f.next()\n            toks = line.strip().split('\\t')\n            if toks[0] == 'genome' or toks[0] == 'all':\n                # Don't need to include the \"all\" text in the first field.\n                hist_lines.append(toks[1:])\n                break\n            else:\n                details_lines.append(toks)\n            # yield pybedtools.create_interval_from_list(toks)\n    #b = pybedtools.BedTool(gen()).saveas()\n    gen()\n    while True:\n        try:\n            line = f.next()\n        except StopIteration:\n            break\n        hist_lines.append(line.strip().split('\\t')[1:])\n    b = pd.DataFrame(details_lines, columns=columns)\n    df = pd.DataFrame(\n        hist_lines,\n        columns=['depth', 'count', 'size', 'percent'])\n    return b, df\n\n\n# utils\ndef ListFiles(sPath, extension):\n    # returns a list of names (with extension, with full path) of all files\n    # in folder sPath\n    lsFiles = []\n    lsLabels = []\n    for sName in os.listdir(sPath):\n        if os.path.isfile(os.path.join(sPath, sName)) and sName.endswith(extension):\n            lsFiles.append(os.path.join(sPath, sName))\n            fileName, fileExtension = os.path.splitext(sName)\n            sName = os.path.basename(fileName).split('.')[0]\n            lsLabels.append(sName)\n    return lsFiles, lsLabels\n\n\ndef plot_coverage_histogram(path_to_bam_files):\n    '''\n    Get coverage from a BAM file,  this is a genome coverage measure\n    '''\n    bam_files, labels = ListFiles(path_to_bam_files, \".sorted.bam\")\n    for bam_file, sample in zip(bam_files, labels):\n        alignment = pybedtools.BedTool(bam_file)\n        print \"Calculating coverage for \" + bam_file + \" ...\"\n        sys.stdout.flush()\n        t0 = time.time()\n        coverage_result = alignment.genome_coverage(\n            genome='hg19', output=os.path.join(args.outdir, sample + \".coverage.hist.txt\"))\n        t1 = time.time()\n        print 'completed in %.2fs' % (t1 - t0)\n        sys.stdout.flush()\n        # return coverage_result\n        bb, df = split_coverage(\n            coverage_result, ['chrom', 'depth', 'count', 'size', 'percent'])\n        # Genome coverage\n        df = df[df.depth.astype(int) != 0]\n        depth = df['depth'].astype(int).values\n        breadth = df['percent'].astype(float).values\n        fig = plt.figure()\n        plt.bar(depth.tolist(), breadth.tolist())\n        plt.title('Genome Coverage for ' + sample)\n        plt.xlabel('Genome Wide Coverage Depth (X)')\n        plt.xlim(0, 20)\n        plt.ylabel('Breadth of Coverage')\n        fig.savefig(os.path.join(args.outdir, sample + \".histogram.png\"))\n        plt.close(fig)\n        # Cumulative distribution\n        fraction = 1 - \\\n            np.cumsum(df['percent'].astype(float).values, dtype=float)\n        fig2 = plt.figure()\n        plt.title('Cumulative coverage for ' + sample)\n        plt.xlim(0, 20)\n        plt.ylabel('Genomic fraction > depth')\n        plt.xlabel('Depth (X)')\n        plt.plot(depth, fraction)\n        fig2.savefig(os.path.join(args.outdir, sample + \".cdf.png\"))\n        plt.close(fig2)\n\n\ndef bam_mapped_fractions(bamfile):\n    \"\"\" Return a tuple of the number of mapped and unmapped reads in a bam file \"\"\"\n    p = sp.Popen(['samtools', 'idxstats', bamfile], stdout=sp.PIPE)\n    mapped_f = 0\n    unmapped_f = 0\n    total = 0\n    nm_chrom = 0\n    nu_chrom = 0\n    for line in p.stdout:\n        rname, rlen, nm, nu = line.rstrip().split()\n        total += int(nm) + int(nu)\n        nm_chrom += int(nm)\n        nu_chrom += int(nu)\n    if total > 0:\n        mapped_f = int(nm_chrom) / total\n        unmapped_f = int(nu_chrom) / total\n        #mapped += (nm_f)\n        #unmapped += (nu_f)\n    return mapped_f, unmapped_f\n\n\ndef plot_mapped_unmapped_fractions(path_to_bam_files):\n    '''\n    Generates a bar plot with samples on X axis and fractions\n    of mapped and unmapped reads on Y axis\n    Plots are [0,1] normalized\n    '''\n    bam_files, labels = ListFiles(path_to_bam_files, \".sorted.bam\")\n    counts_in = []\n    counts_out = []\n    for bam_file, sample in zip(bam_files, labels):\n        mapped, unmapped = bam_mapped_fractions(bam_file)\n        counts_in.append(float(mapped))\n        counts_out.append(float(unmapped))\n    # We create 3 vectors, total reads and fractions in and out\n    #total_reads = [a + b for a, b in zip(counts_in, counts_out)]\n    fraction_mapped = counts_in\n    fraction_unmapped = counts_out\n    # begin plots cosmetics\n    ind = np.arange(len(bam_files))\n    width = 0.5\n    N = len(bam_files)\n    sample_colors = cm.get_cmap('RdBu', N + 8)\n    palette = sample_colors(np.arange(N + 8))\n    # end plot cosmetics\n    fig = plt.figure()\n    plt.bar(ind, fraction_mapped, width, color=palette[0])\n    plt.bar(ind, fraction_unmapped, width,\n            color=palette[7], bottom=fraction_mapped)\n    plt.title('Fraction of reads mapped/unmapped per sample')\n    plt.ylabel('Mapped and Unmapped fractions')\n    plt.xticks(ind + width / 2, labels, rotation=90)\n    # plt.yticks(np.arange(0,0.5,1,1.5))\n    plt.legend(('Mapped reads', 'Unmapped reads'), loc='best')\n    fig.savefig(os.path.join(args.outdir, 'mapped_unmapped_fractions.png'))\n    plt.close(fig)\n    \n\n\ndef plot_per_base_chromosome_coverage(path_to_bam_files):\n    '''\n    Calculates coverage perbase and split the plot into all chromosomes separately\n    steps :\n    1 - generate the genome coverage using the d option (per base)\n    2 - convert the result into DataFrame\n    3 - loop over the chromsize dictionary, each time create a subset of the df\n        with criteria chrom_sizes keys\n    4 - plot positions,coverage and set x axis limit each time to the value of the key\n    '''\n    bam_files, labels = ListFiles(path_to_bam_files, \".sorted.bam\")\n    for bam_file, sample in zip(bam_files, labels):\n        #coverage_result = bam_file.genome_coverage(d=True)\n        alignment = pybedtools.BedTool(bam_file)\n        print \"Calculating coverage for \" + bam_file + \" ...\"\n        coverage_result = alignment.coverage(ucsc_genome, hist=True)\n        # we initialize the dataframe that will contain the coverage result\n        # This will be easier to use pd df for plotting and subsets selections\n        #df = pd.DataFrame(columns=['chrom', 'position', 'coverage'])\n        #row_id = 0\n        # for pos_cov in coverage_result:\n        #  chrom, position, coverage = pos_cov.split('\\t')\n        #  df.loc[row_id] = [chrom, position, coverage]\n        #  row_id = row_id + 1\n        details_chrom, gen_coverage = split_coverage(\n            coverage_result, ['chrom', 'start_bin', 'end_bin', 'depth', 'count', 'size', 'percent'])\n        df = details_chrom\n        df = df.sort(\n            ['chrom', 'start_bin', 'end_bin', 'depth'], ascending=True)\n        # We need to drop out coverage depth of 0\n        df = df[df.depth != 0]\n        # Ok now we have our df\n        # Our chrom plot will be a combo of 8 lines 3 columns\n        # Now we have to dynamically create our layout\n        chrom_plot = plt.figure(figsize=(20, 40))\n        current_chromosome = 1\n        print \"Rendering coverage per chromosme for \" + bam_file + \" ...\"\n        #plt.subplots(nrows=8,  ncols=3)\n        for i in range(1, 25):\n            # for j in range(1, 4):\n            # create the subplot space where the data will be plotted\n            # plt.subplot(8,i,j)\n            chr_label = str(current_chromosome)\n            if current_chromosome == 23:\n                chr_label = 'X'\n            if current_chromosome == 24:\n                chr_label = 'Y'\n            # Create a subset of the original dataframe\n            sub_df = df[df.chrom.astype(str) == chr_label]\n            # Now group by bin and average the depth\n            sub_df.is_copy = False\n            sub_df['percent'] = sub_df['percent'].astype(float).tolist()\n            average_depth = pd.DataFrame(\n                sub_df.groupby(['end_bin'])['percent'].mean())\n            # change the index into a column\n            average_depth.reset_index(level=0, inplace=True)\n            # aaaand sort the df again\n            average_depth['end_bin'] = average_depth[\n                'end_bin'].astype(int).tolist()\n            average_depth = average_depth.sort(['end_bin'], ascending=True)\n            N = average_depth.shape[0]\n            ind = range(N)\n            normalized_bin = average_depth.end_bin / 10000000\n            average_depth['normalized_bin'] = normalized_bin\n            # set the plot spec\n            plt.subplot(12, 2, i)\n            plt.title('Chromosome ' + chr_label)\n            # set the xlim according to chrom_sizes\n            #plt.xlim(0, int(chrom_sizes[chr_label]))\n            # Ok now we plot\n            plt.bar(\n                ind, average_depth.percent.tolist(), width=0.7, align='center')\n            plt.xticks(ind, average_depth.normalized_bin.astype(str).tolist())\n            plt.xlabel('positions (bins of 10Mb)')\n            plt.ylabel('Average breadth of coverage')\n            # print str(8)+str(i)+str(j)+\"--chr:\"+str(current_chromosome)\n            current_chromosome = current_chromosome + 1\n            plt.tight_layout()\n            chrom_plot.savefig(\n                os.path.join(args.outdir, sample + '.coverage_per_chromosome.png'))\n        plt.close(chrom_plot)\n\n\ndef create_tracks_for_igv(path_to_bam_files):\n    '''\n    This is a function that creates tdf files in order to vizualise in IGV\n    2 bedgraph files will be generated, one for highly covered regions and one for low coverage regions\n    '''\n    bam_files, labels = ListFiles(path_to_bam_files, \".sorted.bam\")\n    for bam_file, sample in zip(bam_files, labels):\n        alignment = pybedtools.BedTool(bam_file)\n        print \"Creating bedgraph for \" + sample\n        bedgr_filename = os.path.join(args.outdir, sample + \".bg\")\n        bedgr = alignment.genome_coverage(bga=True, output=bedgr_filename)\n        details = pd.read_table(bedgr.fn, names=['c1', 'c2', 'c3', 'c4'])\n        # Now we split the df into high coverage and low coverage\n        # we assume high coverage are counts > 25, low coverage < 5\n        high_coverage = details[details.c4 > 0]\n        N_high = high_coverage.shape[0]\n        high_coverage.insert(3, 'c-ins', ['genomecov'] * N_high)\n\n        no_coverage = details[details.c4 == 0]\n        N_nocov = no_coverage.shape[0]\n        no_coverage['c4'] = [1] * N_nocov\n        no_coverage.insert(3, 'c-ins', ['no-coverage'] * N_nocov)\n\n        # Now let's write and convert to TDF for IGV\n        high_coverage.to_csv(os.path.join(\n            args.outdir, sample + \"-highcov.igv\"), index=False, header=False, sep='\\t')\n        no_coverage.to_csv(os.path.join(\n            args.outdir, sample + \"-nocov.igv\"), index=False, header=False, sep='\\t')\n\n        # now we convert to TDF, igvtools must be configured in path\n        convert_coverage_cmd = \"igvtools toTDF -z 4 -f min,max,mean %s %s hg19\" % (os.path.join(\n            args.outdir, sample + \"-highcov.igv\"), os.path.join(args.outdir, sample + \"-highcov.tdf\"))\n        os.system(convert_coverage_cmd)\n        convert_no_coverage_cmd = \"igvtools toTDF -z 4 -f min,max,mean %s %s hg19\" % (os.path.join(\n            args.outdir, sample + \"-nocov.igv\"), os.path.join(args.outdir, sample + \"-nocov.tdf\"))\n        os.system(convert_no_coverage_cmd)\n\n\n# Borrowed from https://github.com/CGATOxford/cgat/blob/e0e83fc42b83489f9cd936836220bb32c98ed259/CGAT/BamTools.py\n# utils\ndef isPaired(bamfile, alignments=100000000):\n    '''check if a *bamfile* contains paired end data\n\n    The method reads at most the first *alignments* and returns\n    True if any of the alignments are paired.\n    '''\n    samfile = pysam.Samfile(bamfile)\n    n = 0\n    for read in samfile:\n        if read.is_paired:\n            break\n        n += 1\n        if n == alignments:\n            break\n    samfile.close()\n    return n != alignments\n\n\n# utils\ndef estimateInsertSizeDistribution(bamfile, alignments=100000000):\n    '''\n    estimate insert size from first alignments in bam file.\n    returns mean and stddev of insert sizes.\n    '''\n    assert isPaired(bamfile), \\\n        'can only estimate insert size from' \\\n        'paired bam files'\n    samfile = pysam.Samfile(bamfile)\n    # only get positive to avoid double counting\n    inserts = np.array(\n        [read.tlen for read in samfile.head(alignments)\n         if read.is_proper_pair and read.tlen > 0])\n    return inserts\n\n\ndef plot_insert_distribution(path_to_bam_files):\n    '''\n    Function to plot insert size distribution. Recquires pysam\n    '''\n    #means_len = []\n    #std_len = []\n    bam_files, labels = ListFiles(path_to_bam_files, \".sorted.bam\")\n    for bam_file, sample in zip(bam_files, labels):\n        m = estimateInsertSizeDistribution(bam_file)\n        # means_len.append(m)\n        # std_len.append(s)\n        # Now let's plot distribution of average insert size\n        fig = plt.figure()\n        plt.xlabel('Insert Size in bp')\n        plt.ylabel('Number of reads')\n        plt.title('Insert Size distribution')\n        plt.hist(m)\n        fig.savefig(\n            os.path.join(args.outdir, sample + '.insert_size_distribution.png'))\n        plt.close(fig)\n\n\ndef main():\n    run_bowtie2(args.fastq_path, args.outdir)\n    plot_coverage_histogram(args.outdir)\n    plot_mapped_unmapped_fractions(args.outdir)\n    plot_per_base_chromosome_coverage(args.outdir)\n    create_tracks_for_igv(args.outdir)\n    plot_insert_distribution(args.outdir)\n    pybedtools.cleanup()\n\n\nif __name__ == '__main__':\n    main()\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"70":{"range":{"start":{"row":22,"column":0},"end":{"row":22,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"71":{"range":{"start":{"row":29,"column":79},"end":{"row":29,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"72":{"range":{"start":{"row":91,"column":79},"end":{"row":91,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"73":{"range":{"start":{"row":93,"column":79},"end":{"row":93,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"74":{"range":{"start":{"row":105,"column":79},"end":{"row":105,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"75":{"range":{"start":{"row":106,"column":79},"end":{"row":106,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"76":{"range":{"start":{"row":115,"column":79},"end":{"row":115,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"77":{"range":{"start":{"row":124,"column":79},"end":{"row":124,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"78":{"range":{"start":{"row":145,"column":79},"end":{"row":145,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"79":{"range":{"start":{"row":204,"column":4},"end":{"row":204,"column":5}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"80":{"range":{"start":{"row":226,"column":79},"end":{"row":226,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"81":{"range":{"start":{"row":245,"column":79},"end":{"row":245,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"82":{"range":{"start":{"row":278,"column":79},"end":{"row":278,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"83":{"range":{"start":{"row":293,"column":8},"end":{"row":293,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"84":{"range":{"start":{"row":294,"column":8},"end":{"row":294,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"85":{"range":{"start":{"row":312,"column":4},"end":{"row":312,"column":5}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"90":{"range":{"start":{"row":355,"column":8},"end":{"row":355,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"104":{"range":{"start":{"row":499,"column":4},"end":{"row":499,"column":5}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"106":{"range":{"start":{"row":22,"column":0},"end":{"row":22,"column":2}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"107":{"range":{"start":{"row":29,"column":79},"end":{"row":29,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"108":{"range":{"start":{"row":91,"column":79},"end":{"row":91,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"109":{"range":{"start":{"row":93,"column":79},"end":{"row":93,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"110":{"range":{"start":{"row":105,"column":79},"end":{"row":105,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"111":{"range":{"start":{"row":106,"column":79},"end":{"row":106,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"112":{"range":{"start":{"row":115,"column":79},"end":{"row":115,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"113":{"range":{"start":{"row":124,"column":79},"end":{"row":124,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"114":{"range":{"start":{"row":145,"column":79},"end":{"row":145,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"115":{"range":{"start":{"row":204,"column":4},"end":{"row":204,"column":6}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"116":{"range":{"start":{"row":226,"column":79},"end":{"row":226,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"117":{"range":{"start":{"row":245,"column":79},"end":{"row":245,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"118":{"range":{"start":{"row":278,"column":79},"end":{"row":278,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"119":{"range":{"start":{"row":293,"column":8},"end":{"row":293,"column":10}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"120":{"range":{"start":{"row":294,"column":8},"end":{"row":294,"column":10}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"121":{"range":{"start":{"row":312,"column":4},"end":{"row":312,"column":6}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"126":{"range":{"start":{"row":355,"column":8},"end":{"row":355,"column":10}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"140":{"range":{"start":{"row":499,"column":4},"end":{"row":499,"column":6}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"182":{"range":{"start":{"row":338,"column":79},"end":{"row":338,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"183":{"range":{"start":{"row":344,"column":79},"end":{"row":344,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"184":{"range":{"start":{"row":348,"column":8},"end":{"row":348,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"185":{"range":{"start":{"row":355,"column":8},"end":{"row":355,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"186":{"range":{"start":{"row":361,"column":79},"end":{"row":361,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"187":{"range":{"start":{"row":373,"column":8},"end":{"row":373,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"188":{"range":{"start":{"row":404,"column":12},"end":{"row":404,"column":13}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"189":{"range":{"start":{"row":415,"column":79},"end":{"row":415,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"190":{"range":{"start":{"row":422,"column":79},"end":{"row":422,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"191":{"range":{"start":{"row":444,"column":79},"end":{"row":444,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"192":{"range":{"start":{"row":446,"column":79},"end":{"row":446,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"193":{"range":{"start":{"row":449,"column":79},"end":{"row":449,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"194":{"range":{"start":{"row":450,"column":79},"end":{"row":450,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"195":{"range":{"start":{"row":452,"column":79},"end":{"row":452,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"196":{"range":{"start":{"row":453,"column":79},"end":{"row":453,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"197":{"range":{"start":{"row":457,"column":79},"end":{"row":457,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"198":{"range":{"start":{"row":499,"column":4},"end":{"row":499,"column":5}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"199":{"range":{"start":{"row":512,"column":79},"end":{"row":512,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"202":{"range":{"start":{"row":338,"column":79},"end":{"row":338,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"203":{"range":{"start":{"row":344,"column":79},"end":{"row":344,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"204":{"range":{"start":{"row":348,"column":8},"end":{"row":348,"column":10}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"205":{"range":{"start":{"row":355,"column":8},"end":{"row":355,"column":10}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"206":{"range":{"start":{"row":361,"column":79},"end":{"row":361,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"207":{"range":{"start":{"row":373,"column":8},"end":{"row":373,"column":10}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"208":{"range":{"start":{"row":404,"column":12},"end":{"row":404,"column":14}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"209":{"range":{"start":{"row":415,"column":79},"end":{"row":415,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"210":{"range":{"start":{"row":422,"column":79},"end":{"row":422,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"211":{"range":{"start":{"row":444,"column":79},"end":{"row":444,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"212":{"range":{"start":{"row":446,"column":79},"end":{"row":446,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"213":{"range":{"start":{"row":449,"column":79},"end":{"row":449,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"214":{"range":{"start":{"row":450,"column":79},"end":{"row":450,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"215":{"range":{"start":{"row":452,"column":79},"end":{"row":452,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"216":{"range":{"start":{"row":453,"column":79},"end":{"row":453,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"217":{"range":{"start":{"row":457,"column":79},"end":{"row":457,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"218":{"range":{"start":{"row":499,"column":4},"end":{"row":499,"column":6}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"219":{"range":{"start":{"row":512,"column":79},"end":{"row":512,"column":80}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"439":{"range":{"start":{"row":28,"column":0},"end":{"row":30,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"440":{"range":{"start":{"row":38,"column":0},"end":{"row":39,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"441":{"range":{"start":{"row":74,"column":0},"end":{"row":77,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"442":{"range":{"start":{"row":77,"column":0},"end":{"row":77,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"443":{"range":{"start":{"row":79,"column":0},"end":{"row":95,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"444":{"range":{"start":{"row":98,"column":0},"end":{"row":101,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"445":{"range":{"start":{"row":102,"column":0},"end":{"row":107,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"446":{"range":{"start":{"row":108,"column":0},"end":{"row":113,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"447":{"range":{"start":{"row":114,"column":0},"end":{"row":116,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"448":{"range":{"start":{"row":117,"column":0},"end":{"row":122,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"449":{"range":{"start":{"row":123,"column":0},"end":{"row":134,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"450":{"range":{"start":{"row":135,"column":0},"end":{"row":140,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"451":{"range":{"start":{"row":141,"column":0},"end":{"row":143,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"452":{"range":{"start":{"row":151,"column":0},"end":{"row":152,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"453":{"range":{"start":{"row":157,"column":0},"end":{"row":158,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"454":{"range":{"start":{"row":172,"column":0},"end":{"row":173,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"455":{"range":{"start":{"row":188,"column":0},"end":{"row":189,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"456":{"range":{"start":{"row":203,"column":0},"end":{"row":204,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"457":{"range":{"start":{"row":219,"column":0},"end":{"row":220,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"458":{"range":{"start":{"row":240,"column":0},"end":{"row":275,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"459":{"range":{"start":{"row":291,"column":0},"end":{"row":295,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"460":{"range":{"start":{"row":315,"column":0},"end":{"row":316,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"461":{"range":{"start":{"row":321,"column":0},"end":{"row":322,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"462":{"range":{"start":{"row":324,"column":0},"end":{"row":326,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"463":{"range":{"start":{"row":329,"column":0},"end":{"row":330,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"464":{"range":{"start":{"row":333,"column":0},"end":{"row":334,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"465":{"range":{"start":{"row":348,"column":0},"end":{"row":417,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"466":{"range":{"start":{"row":420,"column":0},"end":{"row":426,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"467":{"range":{"start":{"row":443,"column":0},"end":{"row":448,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"468":{"range":{"start":{"row":449,"column":0},"end":{"row":451,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"469":{"range":{"start":{"row":452,"column":0},"end":{"row":454,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"470":{"range":{"start":{"row":458,"column":0},"end":{"row":459,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"471":{"range":{"start":{"row":477,"column":0},"end":{"row":478,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"472":{"range":{"start":{"row":502,"column":0},"end":{"row":514,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"473":{"range":{"start":{"row":517,"column":0},"end":{"row":524,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"474":{"range":{"start":{"row":527,"column":0},"end":{"row":527,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"475":{"range":{"start":{"row":333,"column":0},"end":{"row":333,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"476":{"range":{"start":{"row":336,"column":0},"end":{"row":336,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"477":{"range":{"start":{"row":333,"column":0},"end":{"row":333,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"},"478":{"range":{"start":{"row":336,"column":0},"end":{"row":336,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":333,"column":4},"end":{"row":333,"column":4}},"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":40,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[332,18],[332,18]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[332,18],[332,18]],"newRange":[[332,18],[333,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[333,0],[333,0]],"newRange":[[333,0],[333,4]],"oldText":"","newText":"    "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,4],[333,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,4],[333,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,0],[333,4]],"newRange":[[333,0],[333,4]],"oldText":"    ","newText":"    "}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,4],[333,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,4],[333,4]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,4],[333,4]],"newRange":[[333,4],[333,5]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[333,5],[333,5]],"newRange":[[333,5],[333,6]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[333,6],[333,6]],"newRange":[[333,6],[333,7]],"oldText":"","newText":"o"}},{"type":"change","content":{"oldRange":[[333,7],[333,7]],"newRange":[[333,7],[333,8]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[333,8],[333,8]],"newRange":[[333,8],[333,9]],"oldText":"","newText":"."}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,9],[333,9]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,9],[333,9]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,8],[333,9]],"newRange":[[333,8],[333,9]],"oldText":".","newText":"."}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,9],[333,9]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,9],[333,9]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,8],[333,9]],"newRange":[[333,8],[333,13]],"oldText":".","newText":"self."}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,13],[333,13]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,13],[333,13]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,12],[333,13]],"newRange":[[333,12],[333,12]],"oldText":".","newText":""}},{"type":"change","content":{"oldRange":[[333,11],[333,12]],"newRange":[[333,11],[333,11]],"oldText":"f","newText":""}},{"type":"change","content":{"oldRange":[[333,10],[333,11]],"newRange":[[333,10],[333,10]],"oldText":"l","newText":""}},{"type":"change","content":{"oldRange":[[333,9],[333,10]],"newRange":[[333,9],[333,9]],"oldText":"e","newText":""}},{"type":"change","content":{"oldRange":[[333,8],[333,9]],"newRange":[[333,8],[333,8]],"oldText":"s","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,8],[333,8]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,8],[333,8]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,8],[333,8]],"newRange":[[333,8],[333,9]],"oldText":"","newText":"."}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,9],[333,9]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,9],[333,9]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,8],[333,9]],"newRange":[[333,8],[333,8]],"oldText":".","newText":""}},{"type":"change","content":{"oldRange":[[333,7],[333,8]],"newRange":[[333,7],[333,7]],"oldText":"t","newText":""}},{"type":"change","content":{"oldRange":[[333,6],[333,7]],"newRange":[[333,6],[333,6]],"oldText":"o","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,6],[333,6]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,6],[333,6]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,6],[333,6]],"newRange":[[333,6],[333,7]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[333,7],[333,7]],"newRange":[[333,7],[333,8]],"oldText":"","newText":"."}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,8],[333,8]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[333,8],[333,8]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[333,7],[333,8]],"newRange":[[333,7],[333,7]],"oldText":".","newText":""}},{"type":"change","content":{"oldRange":[[333,6],[333,7]],"newRange":[[333,6],[333,6]],"oldText":"t","newText":""}},{"type":"change","content":{"oldRange":[[333,5],[333,6]],"newRange":[[333,5],[333,5]],"oldText":"l","newText":""}},{"type":"change","content":{"oldRange":[[333,4],[333,5]],"newRange":[[333,4],[333,4]],"oldText":"p","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[333,4],[333,4]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/Rad/Documents/Dev/bamviz/bamviz.py","digestWhenLastPersisted":"baf5b8728fee25905e719c0f0f2e8eeede7b40d0","preferredLineEnding":null,"nextMarkerId":479,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferId":"6f3e76c6d971ff0ed7802809f44cdec8","tabLength":null,"largeFileMode":false,"grammarScopeName":"text.plain.null-grammar"},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":32,"softTabs":true,"firstVisibleScreenRow":86,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":33,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/Rad/Documents/Dev/bamviz/bamviz.py","bufferId":"6ace5054873069a51a3d7021b8ce9657","tabLength":4,"largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/Rad/Documents/Dev/bamviz/bamviz.py","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["django-atom","language-python","language-hyperlink","language-todo"],"destroyedItemURIs":["atom://config/updates","/Users/Rad/Documents/Dev/bamviz/test.md","/Users/Rad/Documents/Dev/bamviz/README.md"]},"packageStates":{"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2016-05-31T05:42:53.296Z","version":"1.0.1","markersVersion":"1.0.6","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"4":{"id":4,"colorMarkers":[]},"32":{"id":32,"path":"/Users/Rad/Documents/Dev/bamviz/bamviz.py","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"linter":{"scope":"File"},"fuzzy-finder":{"/Users/Rad/Documents/Dev/bamviz/bamviz.py":1464492504107},"metrics":{"sessionLength":193414102},"tree-view":{"directoryExpansionStates":{"/Users/Rad/Documents/Dev/bamviz":{"isExpanded":true,"entries":{}}},"selectedPath":"/Users/Rad/Documents/Dev/bamviz/bamviz.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}