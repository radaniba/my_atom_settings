{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":732},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/Rad/Documents/Scripts/test_python","buffers":[{"text":"#from pipelines.io import make_directory, make_parent_directory\nfrom ruffus import *\nfrom ruffus.ruffus_utility import CHECKSUM_FILE_TIMESTAMPS\n\nimport argparse\nimport os,sys\nimport yaml\n\n#=======================================================================================================================\n# Read Command Line Input\n#=======================================================================================================================\n\n#parser = argparse.ArgumentParser()\n\n#parser.add_argument('config_file',\n                    #help='''Path to yaml config file.''')\n\n#parser.add_argument('--num_cpus', type=int, default=1,\n                    #help='''Number of cpus to use for the analysis. If set to -1 then as many cpus as samples will\n                    #be used. Default is 1.''')\n\n#parser.add_argument('--mode', choices=['local', 'cluster', 'printout'], default='printout',\n                    #help='''Mode to run the pipeline in. local will run the pipeline on the compute it was launched\n                    #from. cluster will submit the jobs to a cluster using SGE. printout shows which tasks will be\n                    #run. default is printout.''')\n\n#parser.add_argument('--install_dir', default=None,\n                    #help='''Path to local installation files to override system defaults.''')\n\n#args = parser.parse_args()\n\nfh = open(\"patient_10.config.yaml\")\n\nconfig = yaml.load(fh)\n\nfh.close()\n\n#=======================================================================================================================\n# Scripts\n#=======================================================================================================================\ncwd = os.path.dirname(os.path.realpath(__file__))\n\nbin_dir = os.path.join(cwd, 'bin')\n\nbuild_amplicon_positions_file_script = os.path.join(bin_dir, 'build_amplicon_positions_file.py')\n\ndo_binomial_exact_test_script = os.path.join(bin_dir, 'do_binomial_exact_test.py')\n\nbuild_results_file_script = os.path.join(bin_dir, 'build_results_file.py')\n\nbam_to_counts_script = os.path.join(bin_dir, 'bam_to_counts.py')\n\nrun_bwa_script = os.path.join(bin_dir, 'run_bwa_backtrack.sh')\n#run_bwa_script = os.path.join(bin_dir, 'run_bwa_mem_paired_end.sh')\n#run_bowtie2_script = os.path.join(bin_dir,'run_bowtie2.sh')\n\nmutation_seq_paired_samples_script = os.path.join(bin_dir, 'script')\n\nmutation_seq_single_sample_script  = os.path.join(bin_dir, 'script')\n\nconvert_vcf_to_tsv_script  = os.path.join(bin_dir, 'script')\n\nfilter_candidates_per_target_region_script =  os.path.join(bin_dir, 'script')\n\n#=======================================================================================================================\n# Set System Paths\n#=======================================================================================================================\n\n#=======================================================================================================================\n# Pipeline\n#=======================================================================================================================\ndef load_fastq_files():\n    for sample_id in config['samples']:\n        fastq_file_1 = config['samples'][sample_id]['fastq_file_1']\n\n        fastq_file_2 = config['samples'][sample_id]['fastq_file_2']\n\n        out_file = os.path.join(config['out_dir'], 'tmp', 'bam', '{0}.bam'.format(sample_id))\n\n        yield [[fastq_file_1, fastq_file_2], out_file, run_bwa_script]\n\n@files(load_fastq_files)\ndef align_fastq_files(in_files, out_file, script):\n    make_parent_directory(out_file)\n\n    cmd = 'sh'\n\n    cmd_args = [\n                script,\n                config['ref_genome'],\n                in_files[0],\n                in_files[1],\n                out_file\n                ]\n\n    run_cmd(cmd, cmd_args, mem=10, max_mem=20)\n\n# Injection of Discovery mode\n\n\nif 'normal_sample' in config:\n  discovery_mode = True\n  normal_sample = True\nelse:\n  discovery_mode = False\n  normal_sample = False\n\n\n@transform(align_fastq_files, suffix('.bam'), '.dedup.bam')\ndef deduplicate(in_file, out_file):\n    \"\"\"\n    Remove apparent duplicates from merged bams using Picard MarkDuplicates.\n    \"\"\"\n\n\n@active_if(discovery_mode)\n@transform(deduplicate, suffix('.dedup.bam'), '.intervals')\ndef create_targets(in_file,out_files):\n\n  cmd = 'java'\n  cmd_args = [\"-Xmx2g -jar GenomeAnalysisTK.jar\",\n             \"-T\",\"RealignerTargetCreator\",\n             \"-R\",config['reference'],\n             \"-I\",in_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd[cmd,cmd_args]\n\n\n@transform(create_targets,suffix('.intervals'), add_inputs(r\"\\1.dedup.bam\"), '.realigned.bam')\ndef gatk_realignment(in_file,bam_file,out_file):\n\n  #bam_file = in_file.replace(\".intervals\",\".bam\")\n  cmd = 'java'\n\n  cmd_args = [\"-Xmx2g -jar GenomeAnalysisTK.jar\",\n             \"-T\",\"IndelRealigner\",\n             \"-R\",config['reference'],\n             \"-targetIntervals\",in_file,\n             \"-I\",bam_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd[cmd,cmd_args]\n\n@transform(gatk_realignment, suffix('.realigned.bam'),'.realigned_recalibrated.bam')\ndef base_quality_recalibration(inputs, outputs):\n    \"\"\"\n    GATK CountCovariates, first step of base quality score recalibration.\n    \"\"\"\n\n@transform(base_quality_recalibration, suffix('.realigned_recalibrated.bam'), '.sorted.bam')\ndef sort_bam_file(bam_file, sorted_bam_file):\n    out_prefix = sorted_bam_file.replace(\".bam\", \"\")\n\n    cmd = 'samtools'\n\n    cmd_args = ['sort', bam_file, out_prefix]\n\n    run_cmd(cmd, cmd_args)\n\n@transform(sort_bam_file, suffix('.sorted.bam'), '.sorted.bam.bai')\ndef index_bam_file(bam_file, bai_file):\n    cmd = 'samtools'\n\n    cmd_args = ['index', bam_file]\n\n    run_cmd(cmd, cmd_args)\n\n\n# Variant Calling : paired samples\n\n@active_if(discovery_mode)\n@active_if(normal_sample)\n@follows(index_bam_file)\n@transform(sort_bam_file, regex(r'(.*)/bam/(.*)\\.sorted\\.bam'), r\"\\1/calls/\\2.vcf\" ,mutation_seq_paired_samples_script)\ndef call_variant_paired_samples(in_file,out_file,script):\n  '''\n  Runs mutation seq in paired samples mode\n  '''\n\n  make_parent_directory(out_file)\n  cmd = 'python'\n  cmd_args = [ script,\n               'normal:', config['normal_sample'],\n               'tumour:', in_file,\n               'reference:', config['reference'],\n               'model:', config['mutationseq_model'],\n               '--out', out_file,\n               '--config', config['mutation_seq_config']\n               ]\n  run_cmd[cmd,cmd_args]\n\n# Alternative : Variant Calling : single sample\n\n@active_if(discovery_mode)\n@active_if(normal_sample == False )\n@transform(sort_bam_file, regex(r'(.*)/bam/(.*)\\.sorted\\.bam'), r\"\\1/calls/\\2.vcf\" ,mutation_seq_single_sample_script)\ndef call_variant_single_sample(in_file,out_file,script):\n  '''\n  Runs mutation seq in single sample mode\n  (make sure about the exact command line to avoid typo)\n  '''\n\n\n  make_parent_directory(out_file)\n  cmd = 'python'\n  cmd_args = [ script,\n               'tumour:', in_file,\n               'reference:', config['reference'],\n               'model:', config['mutationseq_model'],\n               '--out', out_file,\n               '--config', config['mutation_seq_config']\n               ]\n  run_cmd[cmd,cmd_args]\n\n\n# Convert the VCF output into tsv files\n\n@transform([call_variant_single_sample,call_variant_paired_samples], regex(r'(.*)/calls/(.*)\\.vcf'), r\"\\1/candidates/\\2.candidates.tsv\",convert_vcf_to_tsv_script)\ndef create_target_candidates(in_file,out_file,script):\n  '''\n  This function is a converter (VCF to TAB) : watch this for the new pipeline factory\n  '''\n  make_parent_directory(out_file)\n  cmd = 'sh'\n  cmd_args = [script,in_file,out_file]\n  run_cmd[cmd,cmd_args]\n\n\n\n# Zoom into get the targets within the regions of interest\n# This is calling a new library to the pipeline\n# Quick fix : shell script to run bedtools, next version : python code using the python client for bedtools\n\n@transform(create_target_candidates, suffix(\".candidates.tsv\"), r\"\\1.filtered.candidates.tsv\", filter_candidates_per_target_region_script)\ndef filter_target_candidates(in_file,out_file,script):\n  '''\n  We now look into our regions of interest, take all calls, extract informations we need and create a position file\n  '''\n  make_parent_directory(out_file)\n  cmd = 'sh'\n  cmd_args = [script,in_file,out_file]\n  run_cmd[cmd,cmd_args]\n\n@merge(filter_target_candidates,config['positions_file'])\ndef merge_positions(in_file, out_file, script):\n  pass\n\n\n\n#@files(config['positions_file'],\n@files(merge_positions,\n       os.path.join(config['out_dir'], 'tmp', 'amplicon_positions', '{0}.tsv'.format(config['analysis_id'])))\ndef build_amplicon_positions_file(in_file, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [build_amplicon_positions_file_script, in_file, out_file]\n\n    run_cmd(cmd, cmd_args)\n\n@follows(index_bam_file, build_amplicon_positions_file)\n@transform(sort_bam_file,\n           regex(r'(.*)/bam/(.*)\\.sorted\\.bam'),\n           add_inputs(build_amplicon_positions_file),\n           r'\\1/counts/\\2.tsv',\n           bam_to_counts_script)\ndef build_counts_file(in_files, counts_file, script):\n    make_parent_directory(counts_file)\n\n    cmd = 'python'\n\n    bam_file = in_files[0]\n\n    positions_file = in_files[1]\n\n    cmd_args = [\n                script,\n                bam_file,\n                counts_file,\n                '--positions_file', positions_file,\n                '--count_duplicates',\n                '--min_bqual', config['min_bqual'],\n                '--min_mqual', config['min_mqual'],\n                '--ref_genome', config['ref_genome'],\n                '--ref_base',\n                '--var_base'\n                ]\n\n    run_cmd(cmd, cmd_args)\n\n@transform(build_counts_file, regex('(.*)/counts/(.*)\\.tsv'), r'\\1/variant_status/\\2.tsv')\ndef do_binomial_exact_test(in_file, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [\n                do_binomial_exact_test_script,\n                in_file,\n                config['positions_file'],\n                out_file,\n                '--family_wise_error_rate', config['family_wise_error_rate'],\n                '--low_coverage_threshold', config['low_coverage_threshold']\n                ]\n\n    run_cmd(cmd, cmd_args)\n\n@merge(do_binomial_exact_test, r'{0}/results/{1}.xls'.format(config['out_dir'], config['analysis_id']))\ndef build_summary_file(in_files, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [\n                build_results_file_script,\n                out_file\n                ]\n\n    sample_ids = [os.path.splitext(os.path.basename(file_name))[0] for file_name in in_files]\n\n    cmd_args.append('--sample_ids')\n    cmd_args.extend(sample_ids)\n\n    cmd_args.append('--variant_call_files')\n    cmd_args.extend(in_files)\n\n    if 'normal_sample' in config:\n        cmd_args.extend(['--normal_sample', config['normal_sample']])\n\n    run_cmd(cmd, cmd_args)\n\n@follows(build_summary_file)\ndef end():\n    pass\n\n#=======================================================================================================================\n# Run pipeline\n#=======================================================================================================================\ndef main():\n  #CHECKSUM_REGENERATE = 2\n  #pipeline_run(end, verbose = 5)\n  pipeline_printout(sys.stdout, end, verbose=4, wrap_width=200)\n  #pipeline_cleanup(cleanup_log = \"cleanup.log\")\n  pipeline_printout_graph (\"pipeline.png\", \"png\", end,test_all_task_for_update = True, user_colour_scheme = {\"colour_scheme_index\" :6})\n\nif __name__ == '__main__':\n    main()\n","markers":{"markers":{"1":{"id":1,"range":[[166,5],[166,5]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":21,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/test_python/pipeline.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2b04ea6bfac819915854c5ff7b7684dd19345632","deserializer":"TextBuffer"},{"text":"'''\n\n\nUtils should contain all the commands to all third party tools\nCommands to be included here are :\n\n  align_with_bwamem\n  align_with_bwa\n  sort_bam_file\n  index_bam_file\n  create_target\n  gatk_realign\n  base_quality_recalibrate\n  parse_vcf\n  filter_vcf\n\n\nCheck these libraries to use\n    pybedtools\n    pysam\n    vcftools\n    picard\n    gatk\n    samtools\n    bamtools\n    bedtools\n\n'''\n\n\ndef create_targets(in_file,out_files):\n\n  cmd = 'java'\n  cmd_args = [\"-Xmx2g -jar GenomeAnalysisTK.jar\",\n             \"-T\",\"RealignerTargetCreator\",\n             \"-R\",config['reference'],\n             \"-I\",in_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd[cmd,cmd_args]\n\n\n\n\n@transform(create_targets,suffix('.intervals'), add_inputs(r\"\\1.dedup.bam\"), '.realigned.bam')\ndef gatk_realignment(in_file,bam_file,out_file):\n\n  #bam_file = in_file.replace(\".intervals\",\".bam\")\n  cmd = 'java'\n\n  cmd_args = [\"-Xmx2g -jar GenomeAnalysisTK.jar\",\n             \"-T\",\"IndelRealigner\",\n             \"-R\",config['reference'],\n             \"-targetIntervals\",in_file,\n             \"-I\",bam_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd[cmd,cmd_args]\n\n\ndef base_quality_recalibration(in_file, out_file):\n\n    '''\n    test function changed with last version\n    '''\n\n    cmd = 'java'\n\n    cmd_args = [\"-Xmx2g -jar GenomeAnalysisTK.jar\",\n               \"-T\",\"BaseRecalibrator\",\n               \"-R\",config['reference'],\n               \"-targetIntervals\",in_file,\n               \"-knownSites\", config['dbsnp'],\n               \"-knownSites\", config['indels'],\n               \"-I\",bam_file,\n               \"-o\",out_file,\n               \"-plots\",\"recal.grp.pdf\"\n               ]\n\n    run_cmd[cmd,cmd_args]\n\ndef base_quality_recalibration(in_file, out_file):\n\n    '''\n    java\t–jar\tGenomeAnalysisTK.jar\n      –T\tBaseRecalibrator\t\\\n      –R\thuman.fasta\t\\\n      –I\trealigned.bam\t\\\n      –BQSR\trecal.grp\t\\\n      –o\tpost_recal.grp\t\\\n      –plots\tpost_recal.grp.pdf\n\n    '''\n\n    cmd = 'java'\n\n    cmd_args = [\"-Xmx2g -jar GenomeAnalysisTK.jar\",\n               \"-T\",\"BaseRecalibrator\",\n               \"-R\",config['reference'],\n               \"-targetIntervals\",in_file,\n               \"-BQSR\", ,\n               \"-knownSites\", config['indels'],\n               \"-I\",bam_file,\n               \"-o\",out_file,\n               \"-plots\",\"pos_recal.grp.pdf\"\n               ]\n\n    run_cmd[cmd,cmd_args]\n","markers":{"markers":{"1":{"id":1,"range":[[3,0],[3,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":69,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"},"3":{"id":3,"range":[[74,15],[74,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[74,30],[75,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[74,36],[74,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[74,37],[74,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[75,15],[75,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[75,36],[75,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[75,37],[75,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[78,15],[78,22]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[78,24],[78,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/test_python/utils.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"99efb077b82f64763ed02e39a5fe826657e4e9a9","deserializer":"TextBuffer"},{"text":"import os,sys\nimport subprocess\nfrom subprocess import check_output\nfrom subprocess import Popen, PIPE\n\n\ndef run_cmd(cmd, out_file):\n    p = subprocess.Popen(cmd, shell=False, universal_newlines=True, stdout=PIPE, stderr=PIPE)\n    out = open(out_file,'w')\n    for line in p.stdout:\n      sys.stdout.write(line)\n      out.write(line)\n    out.close()\n    ret_code = p.wait()\n    output = p.communicate()[0]\n    return output\n\n\n'''\ndef run_cmd(cmd, output):\n    p = subprocess.Popen(cmd, shell=True, universal_newlines=True, stdout=output)\n    ret_code = p.wait()\n    #output = p.communicate()[0]\n    output.flush()\n    return p\n'''\n\ndef test():\n  cmd = ['cat','sample1.bam']\n  clean_vcf = run_cmd(cmd, \"sample1.vcf\")\n  #os.unlink('sample1.vcf')\n  #print clean_vcf\n\n#test()\n\n\nout_file =\"/home/to/the/best/path/ever/tmp/bam/ghg\".replace(\"/tmp/bam\",\"/tmp/calls\",1)\n#out_file = out_file\n\nprint out_file\n","markers":{"markers":{"1":{"id":1,"range":[[6,0],[15,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":95,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/test_python/routines_test.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"dea15c4b11a2003920737189270a05c3b16f8043","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":21,"softTabs":true,"displayBuffer":{"id":22,"softWrap":false,"editorWidthInChars":152,"scrollTop":1290,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/test_python/pipeline.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":95,"softTabs":true,"displayBuffer":{"id":96,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/test_python/routines_test.py","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":69,"softTabs":true,"displayBuffer":{"id":70,"softWrap":false,"editorWidthInChars":146,"scrollTop":387,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/test_python/utils.py","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/Rad/Documents/Scripts/test_python/routines_test.py","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"fuzzy-finder":{"/Users/Rad/Documents/Scripts/test_python/pipeline.py":1401853386505,"/Users/Rad/Documents/Scripts/test_python/routines_test.py":1401853397831,"/Users/Rad/Documents/Scripts/test_python/utils.py":1401853376405},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":68118},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/Rad/Documents/Scripts/test_python/routines_test.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}