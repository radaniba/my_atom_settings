{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":734},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/Rad/Documents/Scripts/plumber_components","buffers":[{"text":"1- In the documentation, is it possible to have the examples only for one application : example mutationseq, in other words when you describe the component_reg, component_ui etc you sometimes put an example for mutationseq and sometimes snpeff, it would be good to have only one so that it is clear to people reading this for the first time (and also they can reproduce the example)\n\n2- The documentation comes such : explanation + example code, it would be good to sepearate the two, I would put the description in the first part (explanation of all the modules etc ) and then create another section called 'dive into a component' where it is only a code section structured in steps : step 1 : create directory, step 2 : create main code, step 3 : create requirement, step4 ...\n\n3 - I was wondering how granular a component should/could be, which means is it articulated like 1 component = 1 and only task ? or could a component be a subpipeline\n\n4 - Used to ruffus-like way of doing things, and knowing that plumber is based on ruffus, am a bit confused on how the whole beast is managing tasks flow, how/where/when will we replace classic things like decorators, something like @transform(create_positions, regex(r'(.*)/positions/(.*)\\.tsv'), add_inputs(args.targets), r'\\1/positions/\\2_filtered.tsv' )\n\n\n5 - there is a confusion between the documentation on the wiki and what we see on stash, it seems like there is no strict recommendation for the uniformity of files naming : componentui / component_ui ; component_requirements/ components_reqs ?\n\n6 - there is an initial couple of component that were developed, mutationseq and snpeff, they are all different across the branches :) may be we have to create a single branch to clone containing the backbone of a component\n\n7 - Before creating a pipeline, we need to push people to test their components locally before their push their work to stash, only working code should be pushed to stash, how to validate a developed component locally ? Now I finished my first component but it is not clear how I can test it (not documented ?)\n\n8 - We should add two other files to the component directory,\n\n    - A README.md explaining how the component was developed and what's the purpose of it ( I know writing documentation could be a pain but we need to adopt this as a best practice habit because one day we will be managing thousands of components so we need to establish this habit of documenting the work very early, think about non permanent people who probably will leave the lab sooner or later, we need to keep track of their documentation in order to maintain components)\n\n    - A known bugs document : bugs reported by users to the developer should be reported in that file with a specification of the version of the component containing the bug example =\n\n    Bug : Blablabla is causing blablabla\n    version : snpeff v 4.0\n    reporter : John Doe\n\n\n    Bug : Not working with version 1.2.3 of another_library\n    version : snpeff v 4.1\n    reporter : John Doe\n\n9 - when we run the pipeline generated by plumber we can add as much 'fake' argument as we want and the pipeline doesnt complain about it, this should be fixed\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"905e4c86b9719673f9bdbdf894dcbd851e46f787","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"fuzzy-finder":{"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar":1403578112138},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":653868388},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}