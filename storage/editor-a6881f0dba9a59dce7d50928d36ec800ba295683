{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":732},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/Rad/.atom/packages/script","buffers":[{"text":"{\n  \"name\": \"script\",\n  \"main\": \"./lib/script\",\n  \"version\": \"2.7.0\",\n  \"private\": false,\n  \"description\": \"Run code in Atom!\",\n  \"author\": {\n    \"name\": \"Kyle Kelley\",\n    \"email\": \"rgbkrk@gmail.com\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Kyle Kelley\",\n      \"email\": \"rgbkrk@gmail.com\"\n    },\n    {\n      \"name\": \"Erran Carey\",\n      \"email\": \"me@errancarey.com\"\n    },\n    {\n      \"name\": \"Lance Batson\",\n      \"email\": \"lancebatsondev@gmail.com\"\n    },\n    {\n      \"name\": \"Pedro Rodriguez\",\n      \"email\": \"ski.rodriguez@gmail.com\"\n    },\n    {\n      \"name\": \"Ash Wilson\",\n      \"email\": \"smashwilson@gmail.com\"\n    },\n    {\n      \"name\": \"Hans Rødtang\",\n      \"email\": \"hansrodtang@gmail.com\"\n    },\n    {\n      \"name\": \"Ciaran Downey\",\n      \"email\": \"me@ciarand.me\"\n    },\n    {\n      \"name\": \"Hikaru Ojima\",\n      \"email\": \"hikaru.ojima@mixi.co.jp\"\n    },\n    {\n      \"name\": \"Rafael Belvederese\",\n      \"email\": \"rafael@blvz.im\"\n    },\n    {\n      \"name\": \"Ivan Storck\",\n      \"email\": \"ivanoats@gmail.com\"\n    },\n    {\n      \"name\": \"Alexey Slaykovsky\",\n      \"email\": \"alexey@macbook.dlink\"\n    },\n    {\n      \"name\": \"Christian Kjaer Laustsen\",\n      \"email\": \"christianlaustsen@gmail.com\"\n    },\n    {\n      \"name\": \"Otto Robba\",\n      \"email\": \"OttoRobba@users.noreply.github.com\"\n    },\n    {\n      \"name\": \"Will Sahatdjian\",\n      \"email\": \"ws@kindwave.com\"\n    },\n    {\n      \"name\": \"Rnhmjoj\",\n      \"email\": \"micheleguerinirocco@me.com\"\n    },\n    {\n      \"name\": \"Yeonghoon Park\",\n      \"email\": \"sola92@gmail.com\"\n    },\n    {\n      \"name\": \"cormullion\",\n      \"email\": \"cormullion@mac.com\"\n    },\n    {\n      \"name\": \"Andy Hayden\",\n      \"email\": \"andyhayden1@gmail.com\"\n    },\n    {\n      \"name\": \"jbtule\",\n      \"email\": \"jay+code@tuley.name\"\n    },\n    {\n      \"name\": \"bryanweatherly\",\n      \"email\": \"bryanweatherly@gmail.com\"\n    },\n    {\n      \"name\": \"Johan Bruning\",\n      \"email\": \"johan@taquito.nl\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/rgbkrk/atom-script\"\n  },\n  \"keywords\": [\n    \"script\",\n    \"runner\",\n    \"Bash\",\n    \"Behat Feature\",\n    \"Coffeescript\",\n    \"CoffeeScript (Literate)\",\n    \"Cucumber (Gherkin)\",\n    \"Elixir\",\n    \"Erlang\",\n    \"F#\",\n    \"Go\",\n    \"Groovy\",\n    \"Haskell\",\n    \"Javascript\",\n    \"Julia\",\n    \"Lua\",\n    \"newLISP\",\n    \"Perl\",\n    \"PHP\",\n    \"Python\",\n    \"RSpec\",\n    \"Ruby\",\n    \"Scala\",\n    \"run\",\n    \"Applescript\",\n    \"code\"\n  ],\n  \"license\": \"Apache 2\",\n  \"engines\": {\n    \"atom\": \">0.50.0\"\n  },\n  \"dependencies\": {\n    \"ansi-to-html\": \">0.1.0\",\n    \"underscore\": \"~1.5.2\"\n  },\n  \"readme\": \"# Run code in Atom!\\n\\n![](https://cloud.githubusercontent.com/assets/1694055/3226201/c458acbc-f067-11e3-84a0-da27fe334f5e.gif)\\n\\nRun selections of code, code based on line number, or the whole file!\\n\\nCurrently supported grammars are:\\n\\n  * AppleScript\\n  * Bash\\n  * Behat Feature\\n  * Coffeescript\\n  * CoffeeScript (Literate) <sup>^</sup>\\n  * Cucumber (Gherkin) <sup>*</sup>\\n  * Elixir\\n  * Erlang <sup>†</sup>\\n  * F# <sup>*</sup>\\n  * Go <sup>*</sup>\\n  * Groovy\\n  * Haskell\\n  * Javascript\\n  * Julia\\n  * LiveScript\\n  * Lua\\n  * MoonScript\\n  * newLISP\\n  * Perl\\n  * PHP\\n  * Python\\n  * RSpec\\n  * Ruby\\n  * Scala\\n\\n**NOTE**: Some grammars may require you to install [a custom language package](https://atom.io/search?utf8=✓&q=language).\\n\\nYou only have to add a few lines in a PR to support another.\\n\\n### Limitations\\n\\n<sup>^</sup> Running selections of code for CoffeeScript (Literate) only works when selecting just the code blocks\\n\\n<sup>†</sup> Erlang uses `erl` for limited selection based runs (see [#70](https://github.com/rgbkrk/atom-script/pull/70))\\n\\n<sup>\\\\*</sup> Cucumber (Gherkin), Go, and F# do not support selection based runs\\n\\n## Installation\\n\\n`apm install script`\\n\\nor\\n\\nSearch for `script` within package search in the Settings View.\\n\\n## Atom can't find node | ruby | python | my socks\\n\\nMake sure to launch Atom from the console/terminal. This gives atom all your useful environment variables.\\n\\nIf you *really* wish to open atom from a launcher/icon, see [this issue for a variety of workarounds that have been suggested](https://github.com/rgbkrk/atom-script/issues/61#issuecomment-37337827).\\n\\n## Usage\\n\\nMake sure to run `atom` from the command line to get full access to your environment variables. Running Atom from the icon will launch using launchctl's environment.\\n\\nSelect some code and use **Script: Run** to run just that selection.\\n\\nBy default **Script: Run** will run your entire file.\\n\\nUse **Script: Run at line** to run using the line [number] specific. Note that if you select an entire line this number could be off by one due to the way Atom detects numbers while text is selected.\\n\\n**Script: Run Options** can be used to configure command options and program arguments.\\n\\n**Script: Kill Process** will kill the process but leaves the pane open.\\n\\n**Script: Close View** closes the pane and kills the process.\\n\\nTo kill everything, click the close icon in the upper right and just go back to\\ncoding.\\n\\n### Command and shortcut reference\\n\\n| Command              | Mac OS X               | Linux/Windows               | Notes                                                   |\\n| -------------------- | ---------------------- | --------------------------- | ------------------------------------------------------- |\\n| Script: Run          | <kbd>cmd-i</kbd>       | <kbd>ctrl-b</kbd>           | If text is selected a selection based run will occur    |\\n| Script: Run at line  | <kbd>shift-cmd-j</kbd> | <kbd>shift-ctrl-j<kbd>      | If text is selected the line number will be the last    |\\n| Script: Run Options  | <kbd>shift-cmd-i</kbd> | <kbd>shift-ctrl-alt-o</kbd> | Runs the selection or whole file with the given options |\\n| Script: Close View   | <kbd>ctrl-w</kbd>      | <kbd>ctrl-w</kbd>           | Closes the script view window                           |\\n| Script: Kill Process | <kbd>ctrl-c</kbd>      | <kbd>ctrl-q</kbd>           | Kills the current script process                        |\\n\\n## Development\\n\\nUse the atom [contributing guidelines](https://atom.io/docs/latest/contributing).\\nThey're pretty sane.\\n\\n#### Quick and dirty setup\\n\\n`apm develop script`\\n\\nThis will clone the `script` repository to `~/github` unless you set the\\n`ATOM_REPOS_HOME` environment variable.\\n\\n#### I already cloned it!\\n\\nIf you cloned it somewhere else, you'll want to use `apm link --dev` within the\\npackage directory, followed by `apm install` to get dependencies.\\n\\n### Workflow\\n\\nAfter pulling upstream changes, make sure to run `apm update`.\\n\\nTo start hacking, make sure to run `atom --dev` from the package directory.\\nCut a branch while you're working then either submit a Pull Request when done\\nor when you want some feedback!\\n\",\n  \"readmeFilename\": \"README.md\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rgbkrk/atom-script/issues\"\n  },\n  \"homepage\": \"https://github.com/rgbkrk/atom-script\",\n  \"_id\": \"script@2.7.0\",\n  \"dist\": {\n    \"shasum\": \"d4b51427057c9d3698532ed86b92ad20266f7528\"\n  },\n  \"_resolved\": \"/var/folders/38/c32tn82s0238c61_q5nw37h40000gn/T/d-11467-8483-cczxsn/package.tgz\",\n  \"_from\": \"/var/folders/38/c32tn82s0238c61_q5nw37h40000gn/T/d-11467-8483-cczxsn/package.tgz\"\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":29},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/.atom/packages/script/package.json","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d34a46f06a796d9aab4dd36b14461493014e6d44","deserializer":"TextBuffer"},{"text":"{View} = require 'atom'\n\nmodule.exports =\nclass ScriptOptionsView extends View\n\n  @content: ->\n    @div =>\n      @div class: 'overlay from-top panel', outlet: 'scriptOptionsView', =>\n        @div class: 'panel-heading', 'Configure Run Options'\n        @div class: 'panel-body padded', =>\n          @div class: 'block', =>\n            @label 'Current Working Directory:'\n            @input\n              type: 'text'\n              class: 'editor mini editor-colors native-key-bindings'\n              outlet: 'inputCwd'\n          @div class: 'block', =>\n            @label 'Command'\n            @input\n              type: 'text'\n              class: 'editor mini editor-colors native-key-bindings'\n              outlet: 'inputCommand'\n          @div class: 'block', =>\n            @label 'Command Arguments:'\n            @input\n              type: 'text'\n              class: 'editor mini editor-colors native-key-bindings'\n              outlet: 'inputCommandArgs'\n          @div class: 'block', =>\n            @label 'Program Arguments:'\n            @input\n              type: 'text'\n              class: 'editor mini editor-colors native-key-bindings'\n              outlet: 'inputScriptArgs'\n          @div class: 'block', =>\n            css = 'btn inline-block-tight'\n            @button class: \"btn #{css}\", click: 'close', 'Close'\n            @button class: \"btn #{css}\", click: 'run', 'Run'\n\n  initialize: (@runOptions) ->\n    atom.workspaceView.command 'script:run-options', => @toggleScriptOptions()\n    atom.workspaceView.command 'script:close-options', =>\n      @toggleScriptOptions 'hide'\n    atom.workspaceView.command 'script:save-options', => @saveOptions()\n    atom.workspaceView.prependToTop this\n    @toggleScriptOptions 'hide'\n\n  toggleScriptOptions: (command) ->\n    switch command\n      when 'show' then @scriptOptionsView.show()\n      when 'hide' then @scriptOptionsView.hide()\n      else @scriptOptionsView.toggle()\n\n  saveOptions: ->\n    splitArgs = (element) ->\n      item for item in element.val().split ' ' when item isnt ''\n\n    @runOptions.workingDirectory = @inputCwd.val()\n    @runOptions.cmd = @inputCommand.val()\n    @runOptions.cmdArgs = splitArgs @inputCommandArgs\n    @runOptions.scriptArgs = splitArgs @inputScriptArgs\n\n  close: ->\n    atom.workspaceView.trigger 'script:close-options'\n\n  run: ->\n    atom.workspaceView.trigger 'script:save-options'\n    atom.workspaceView.trigger 'script:close-options'\n    atom.workspaceView.trigger 'script:run'\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":33},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/.atom/packages/script/lib/script-options-view.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"46f73b4df37f3862c294480f7ab53cc2d295fe8f","deserializer":"TextBuffer"},{"text":"module.exports =\nclass ScriptOptions\n  workingDirectory: null\n  cmd: null\n  cmdArgs: []\n  scriptArgs: []\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":37},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/.atom/packages/script/lib/script-options.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1c49c77fab68930837ee3597aa3e11591fe0e58d","deserializer":"TextBuffer"},{"text":"grammarMap = require './grammars'\n{View, BufferedProcess, $$} = require 'atom'\nCodeContext = require './code-context'\nHeaderView = require './header-view'\nScriptOptionsView = require './script-options-view'\nAnsiFilter = require 'ansi-to-html'\n_ = require 'underscore'\n\n# Runs a portion of a script through an interpreter and displays it line by line\nmodule.exports =\nclass ScriptView extends View\n  @bufferedProcess: null\n\n  @content: ->\n    @div =>\n      @subview 'headerView', new HeaderView()\n\n      # Display layout and outlets\n      css = 'tool-panel panel panel-bottom padding script-view\n        native-key-bindings'\n      @div class: css, outlet: 'script', tabindex: -1, =>\n        @div class: 'panel-body padded output', outlet: 'output'\n\n  initialize: (serializeState, @runOptions) ->\n    # Bind commands\n    atom.workspaceView.command 'script:run', => @defaultRun()\n    atom.workspaceView.command 'script:run-at-line', => @lineRun()\n    atom.workspaceView.command 'script:close-view', => @close()\n    atom.workspaceView.command 'script:kill-process', => @stop()\n\n    @ansiFilter = new AnsiFilter\n\n  serialize: ->\n\n  updateOptions: (event) -> @runOptions = event.runOptions\n\n  initCodeContext: (editor) ->\n    filename = editor.getTitle()\n    filepath = editor.getPath()\n    selection = editor.getSelection()\n\n    # If the selection was empty \"select\" ALL the text\n    # This allows us to run on new files\n    if selection.isEmpty()\n      textSource = editor\n    else\n      textSource = selection\n\n    codeContext = new CodeContext(filename, filepath, textSource)\n    codeContext.selection = selection\n\n    # Get language\n    lang = @getLang editor\n\n    if @validateLang lang\n      codeContext.lang = lang\n\n    return codeContext\n\n  lineRun: ->\n    @resetView()\n    codeContext = @buildCodeContext('Line Based')\n    @start(codeContext) unless not codeContext?\n\n  defaultRun: ->\n    @resetView()\n    codeContext = @buildCodeContext() # Until proven otherwise\n    @start(codeContext) unless not codeContext?\n\n  buildCodeContext: (argType='Selection Based') ->\n    # Get current editor\n    editor = atom.workspace.getActiveEditor()\n    # No editor available, do nothing\n    return unless editor?\n\n    codeContext = @initCodeContext(editor)\n\n    codeContext.argType = argType\n\n    if argType == 'Line Based'\n      editor.save()\n    else if codeContext.selection.isEmpty() and codeContext.filepath?\n      codeContext.argType = 'File Based'\n      editor.save()\n\n    # Selection and Line Based runs both benefit from knowing the current line\n    # number\n    unless argType == 'File Based'\n      cursor = editor.getCursor()\n      codeContext.lineNumber = cursor.getScreenRow() + 1\n\n    return codeContext\n\n  start: (codeContext) ->\n\n    # If language was not determined, do nothing\n    if not codeContext.lang?\n      # In the future we could handle a runner without the language being part\n      # of the grammar map, using the options runner\n      return\n\n    commandContext = @setupRuntime codeContext\n    @run commandContext.command, commandContext.args if commandContext\n\n  resetView: (title = 'Loading...') ->\n    # Display window and load message\n\n    # First run, create view\n    atom.workspaceView.prependToBottom this unless @hasParent()\n\n    # Close any existing process and start a new one\n    @stop()\n\n    @headerView.title.text title\n    @headerView.setStatus 'start'\n\n    # Get script view ready\n    @output.empty()\n\n  close: ->\n    # Stop any running process and dismiss window\n    @stop()\n    @detach() if @hasParent()\n\n  getLang: (editor) -> editor.getGrammar().name\n\n  validateLang: (lang) ->\n    err = null\n\n    # Determine if no language is selected.\n    if lang is 'Null Grammar' or lang is 'Plain Text'\n      err = $$ ->\n        @p 'You must select a language in the lower left, or save the file\n          with an appropriate extension.'\n\n    # Provide them a dialog to submit an issue on GH, prepopulated with their\n    # language of choice.\n    else if not (lang of grammarMap)\n      err = $$ ->\n        @p class: 'block', \"Command not configured for #{lang}!\"\n        @p class: 'block', =>\n          @text 'Add an '\n          @a href: \"https://github.com/rgbkrk/atom-script/issues/\\\n            new?title=Add%20support%20for%20#{lang}\", 'issue on GitHub'\n          @text ' or send your own Pull Request.'\n\n    if err?\n      @handleError(err)\n      return false\n\n    return true\n\n  setupRuntime: (codeContext) ->\n\n    # Store information about the run\n    commandContext = {}\n\n    try\n      if not @runOptions.cmd? or @runOptions.cmd is ''\n        # Precondition: lang? and lang of grammarMap\n        commandContext.command = grammarMap[codeContext.lang][codeContext.argType].command\n      else\n        commandContext.command = @runOptions.cmd\n\n      buildArgsArray = grammarMap[codeContext.lang][codeContext.argType].args\n\n    catch error\n      err = $$ ->\n        @p class: 'block', \"#{codeContext.argType} runner not available for #{codeContext.lang}.\"\n        @p class: 'block', =>\n          @text 'If it should exist, add an '\n          @a href: \"https://github.com/rgbkrk/atom-script/issues/\\\n            new?title=Add%20support%20for%20#{codeContext.lang}\", 'issue on GitHub'\n          @text ', or send your own pull request.'\n\n      @handleError err\n      return false\n\n    # Update header to show the lang and file name\n    if codeContext.argType is 'Line Based'\n      @headerView.title.text \"#{codeContext.lang} - #{codeContext.fileColonLine(false)}\"\n    else\n      @headerView.title.text \"#{codeContext.lang} - #{codeContext.filename}\"\n\n    commandContext.args = buildArgsArray codeContext\n\n\n    # Return setup information\n    return commandContext\n\n  handleError: (err) ->\n    # Display error and kill process\n    @headerView.title.text 'Error'\n    @headerView.setStatus 'err'\n    @output.append err\n    @stop()\n\n  run: (command, extraArgs) ->\n    atom.emit 'achievement:unlock', msg: 'Homestar Runner'\n\n    # Default to where the user opened atom\n    options =\n      cwd: @getCwd()\n      env: process.env\n    args = (@runOptions.cmdArgs.concat extraArgs).concat @runOptions.scriptArgs\n\n    stdout = (output) => @display 'stdout', output\n    stderr = (output) => @display 'stderr', output\n    exit = (returnCode) =>\n      if returnCode is 0\n        @headerView.setStatus 'stop'\n      else\n        @headerView.setStatus 'err'\n      console.log \"Exited with #{returnCode}\"\n\n    # Run process\n    @bufferedProcess = new BufferedProcess({\n      command, args, options, stdout, stderr, exit\n    })\n\n    @bufferedProcess.process.on 'error', (nodeError) =>\n      @output.append $$ ->\n        @h1 'Unable to run'\n        @pre _.escape command\n        @h2 'Is it on your path?'\n        @pre \"PATH: #{_.escape process.env.PATH}\"\n\n  getCwd: ->\n    if not @runOptions.workingDirectory? or @runOptions.workingDirectory is ''\n      atom.project.getPath()\n    else\n      @runOptions.workingDirectory\n\n  stop: ->\n    # Kill existing process if available\n    if @bufferedProcess? and @bufferedProcess.process?\n      @display 'stdout', '^C'\n      @headerView.setStatus 'kill'\n      @bufferedProcess.kill()\n\n  display: (css, line) ->\n    line = _.escape(line)\n    line = @ansiFilter.toHtml(line)\n\n    @output.append $$ ->\n      @pre class: \"line #{css}\", =>\n        @raw line\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":41},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/.atom/packages/script/lib/script-view.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"724296047065238a925d40415632c2464510f236","deserializer":"TextBuffer"},{"text":"# See https://atom.io/docs/latest/creating-a-package#menus for more details\n'context-menu':\n  '.line-number':\n    'Script: Run At Line': 'script:run-at-line'\n  '.overlayer':\n    'Enable script': 'script:run-selection'\n\n'menu': [\n  {\n    'label': 'Packages'\n    'submenu': [\n      'label': 'Script'\n      'submenu': [\n        { 'label': 'Script: Run At Line', 'command': 'script:run-at-line' },\n        { 'label': 'Run Script', 'command': 'script:run' },\n        { 'label': 'Stop Script', 'command': 'script:kill-process' },\n        { 'label': 'Configure Script', 'command': 'script:run-options' }\n        { 'label': 'Close Window and Stop Script', 'command': 'script:close-view' }\n      ]\n    ]\n  }\n]\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":46},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/.atom/packages/script/menus/script.cson","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1018e0fd01dec982d246959b38255b2ab850fbdb","deserializer":"TextBuffer"},{"text":"# For more detailed documentation see\n# https://atom.io/docs/latest/advanced/keymaps\n\n# Only bind the keys in the editor\n'.editor':\n  'escape': 'core:cancel'\n\n'.platform-darwin .editor':\n  'cmd-i': 'script:run'\n  #'shift-enter': 'script:run'\n  'ctrl-w': 'script:close-view'\n  'ctrl-c': 'script:kill-process'\n  'shift-cmd-j': 'script:run-at-line'\n  'shift-cmd-i': 'script:run-options'\n\n'.platform-win32 .editor, .platform-linux .editor':\n  'shift-ctrl-b': 'script:run'\n  #'shift-enter': 'script:run'\n  'ctrl-w': 'script:close-view'\n  'ctrl-q': 'script:kill-process'\n  'shift-ctrl-j': 'script:run-at-line'\n  'shift-ctrl-alt-o': 'script:run-options'\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":52},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/.atom/packages/script/keymaps/script.cson","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"54eac4775eec7d982e6ab15dd872b32493579d29","deserializer":"TextBuffer"},{"text":"ScriptView = require './script-view'\nScriptOptionsView = require './script-options-view'\nScriptOptions = require './script-options'\n\nmodule.exports =\n  scriptView: null\n  scriptOptionsView: null\n  scriptOptions: null\n\n  activate: (state) ->\n    @scriptOptions = new ScriptOptions()\n    @scriptView = new ScriptView state.scriptViewState, @scriptOptions\n    @scriptOptionsView = new ScriptOptionsView @scriptOptions\n\n    atom.workspaceView.on 'core:cancel core:close', (event) =>\n      @scriptView?.close()\n      @scriptOptionsView?.close()\n\n  deactivate: ->\n    @scriptView.close()\n    @scriptOptionsView.close()\n\n    atom.workspaceView.off 'core:cancel core:close'\n\n  serialize: ->\n    # TODO: True serialization needs to take the options view into account\n    #       and handle deserialization\n    scriptViewState: @scriptView.serialize()\n    scriptOptionsViewState: @scriptOptionsView.serialize()\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":56},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/.atom/packages/script/lib/script.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e9f573bef6708972a4c535911c383c217a5fdcb3","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":29,"softTabs":true,"displayBuffer":{"id":30,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/.atom/packages/script/package.json","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":33,"softTabs":true,"displayBuffer":{"id":34,"softWrap":false,"editorWidthInChars":152,"scrollTop":402,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/.atom/packages/script/lib/script-options-view.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":37,"softTabs":true,"displayBuffer":{"id":38,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/.atom/packages/script/lib/script-options.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":41,"softTabs":true,"displayBuffer":{"id":42,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/.atom/packages/script/lib/script-view.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":46,"softTabs":true,"displayBuffer":{"id":47,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/.atom/packages/script/menus/script.cson","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":52,"softTabs":true,"displayBuffer":{"id":53,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/.atom/packages/script/keymaps/script.cson","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":56,"softTabs":true,"displayBuffer":{"id":57,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/.atom/packages/script/lib/script.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/Rad/.atom/packages/script/package.json","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-json","language-coffee-script"],"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"fuzzy-finder":{"/Users/Rad/.atom/packages/script/package.json":1405147079977,"/Users/Rad/.atom/packages/script/lib/script-options-view.coffee":1405147057851,"/Users/Rad/.atom/packages/script/lib/script-options.coffee":1405147060133,"/Users/Rad/.atom/packages/script/lib/script-view.coffee":1405147061006,"/Users/Rad/.atom/packages/script/menus/script.cson":1405147064885,"/Users/Rad/.atom/packages/script/keymaps/script.cson":1405147073859,"/Users/Rad/.atom/packages/script/lib/script.coffee":1405147076622},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":53680},"tree-view":{"directoryExpansionStates":{"keymaps":{},"lib":{},"menus":{},"node_modules":{},"spec":{}},"selectedPath":"/Users/Rad/.atom/packages/script/package.json","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}