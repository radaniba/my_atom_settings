{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":734},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader","buffers":[{"text":"'''\nCreated on\n\n@author: raniba\n'''\n\nimport os\n\nfrom factory_utils.utils import ComponentAbstract\n\n\nclass Component(ComponentAbstract):\n\n    '''\n    Run picard tool AddOrReplaceReadGroup, load dependencies and requirements\n    '''\n    def __init__(self, component_name='rehead', component_parent_dir=None, seed_dir=None):\n       self.version = \"0.0.1\"\n\n        ## initialize ComponentAbstract\n       super(Component, self).__init__(component_name, component_parent_dir, seed_dir)\n    \n\n    def make_cmd(self):\n        '''\n        generate the AddOrReplaceReadGroup command\n        '''\n\n        java_mem = '-Xmx3072M'\n        java_jar_option = '-jar'\n        rehead_jar = os.path.join(self.requirements['picard'], 'AddOrReplaceReadGroups.jar')\n        rehead_infile = self.args.infile\n        rehead_outfile = self.args.outfile\n\n        basename = os.path.basename(rehead_infile)\n        bam_id = basename.split(\".bam\")[0]\n\n        cmd = self.requirements['java']\n        cmd_args = [\n            java_mem,\n            java_jar_option,\n            rehead_jar,\n            \"INPUT=\"+rehead_infile,\n            \"OUTPUT=\"+rehead_outfile,\n            \"SORT_ORDER=coordinate\",\n            \"RGLB=8\",\n            \"RGPL=Illumina\",\n            \"RGPU=1\",\n            \"RGSM=\"+bam_id\n        ]\n\n        return cmd, cmd_args\n\n\n# to run as stand alone\ndef _main():\n    '''main function'''\n    rehead = Component()\n    rehead.args = component_ui.args\n    rehead.run()\n\nif __name__ == '__main__':\n\n    import component_ui\n\n    _main()\n","markers":{"markers":{"1":{"id":1,"range":[[30,21],[30,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":11,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"40":{"id":40,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"41":{"id":41,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"45":{"id":45,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"46":{"id":46,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"47":{"id":47,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"48":{"id":48,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"49":{"id":49,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"52":{"id":52,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"53":{"id":53,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"54":{"id":54,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"55":{"id":55,"range":[[65,11],[66,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[{"patches":[{"oldRange":[[30,0],[30,4]],"newRange":[[30,0],[30,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_main.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5f37e1f2538094e65d2e21c751d4859a72598b9e","deserializer":"TextBuffer"},{"text":"'''\nCreated on Jun 10, 2014\n\n@author: raniba\n'''\n\n\ninput_files  = {'infile':'__REQUIRED__'}\noutput_files = {'outfile':'__REQUIRED__'}\ninput_params = {}\nreturn_value = []\n","markers":{"markers":{"1":{"id":1,"range":[[8,24],[8,24]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":15,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[8,15],[8,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[8,16],[8,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[8,26],[8,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[9,15],[9,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[10,15],[10,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_params.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"df0ae322f55d2fe51b8a67bbe75993824edb7dd0","deserializer":"TextBuffer"},{"text":"'''\nCreated on Jun 10, 2014\n\n@author: raniba\n'''\nrequirements = {'python':'/share/lustre/raniba/miseq_analysis_pipeline/miseq-pipeline/software/Python-2.7.6/bin/python',\n                'picard':'/share/lustre/raniba/miseq_analysis_pipeline/miseq-pipeline/software/picard-tools-1.113/',\n                'java':'/share/lustre/raniba/miseq_analysis_pipeline/miseq-pipeline/software/java/jre1.7.0/bin/java'}\n\n__MEMORY__ = '4G'\n\n\nenv_vars = {}\n\n\nparallel = True\n","markers":{"markers":{"1":{"id":1,"range":[[15,15],[15,15]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":19,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[5,120],[7,116]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[6,16],[6,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"4":{"id":4,"range":[[6,25],[6,114]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[7,16],[7,21]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[7,23],[7,115]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_reqs.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"16d961b450a53f35ea88792bd15e7beaaaad61a7","deserializer":"TextBuffer"},{"text":"'''\nCreated on Jun 10, 2014\n\n@author: raniba\n'''\n\nimport argparse\n\n__version__ = '0.0.1'\n\n\n#==============================================================================\n# make a UI\n#==============================================================================\nparser = argparse.ArgumentParser(\n    prog='reheader',\n    formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    description='''This script is used to change the header of a bam file\n                   it uses picard tool AddOrReplaceReadGroups to add information\n                   in the bam header. This is required if we want to use the bam file\n                   with a utility from GATK''')\n\n# required arguments\nparser.add_argument('--infile', metavar='INPUT',\n                    help='A BAM file to be reheaded')\n\nparser.add_argument('--outfile', metavar='OUTPUT',\n                    help='Reheaded BAM file')\n\nargs, x = parser.parse_known_args()\n","markers":{"markers":{"1":{"id":1,"range":[[6,15],[6,15]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":23,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_ui.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b44416a073476d83400a2ffcecf5309405b0f15f","deserializer":"TextBuffer"},{"text":"1- In the documentation, is it possible to have the examples only for one application : example mutationseq, in other words when you describe the component_reg, component_ui etc you sometimes put an example for mutationseq and sometimes snpeff, it would be good to have only one so that it is clear to people reading this for the first time (and also they can reproduce the example)\n\n2- The documentation comes such : explanation + example code, it would be good to sepearate the two, I would put the description in the first part (explanation of all the modules etc ) and then create another section called 'dive into a component' where it is only a code section structured in steps : step 1 : create directory, step 2 : create main code, step 3 : create requirement, step4 ...\n\n3 - I was wondering how granular a component should/could be, which means is it articulated like 1 component = 1 and only task ? or could a component be a subpipeline\n\n4 - Used to ruffus-like way of doing things, and knowing that plumber is based on ruffus, am a bit confused on how the whole beast is managing tasks flow, how/where/when will we replace classic things like decorators, something like @transform(create_positions, regex(r'(.*)/positions/(.*)\\.tsv'), add_inputs(args.targets), r'\\1/positions/\\2_filtered.tsv' )\n\n\n5 - there is a confusion between the documentation on the wiki and what we see on stash, it seems like there is no strict recommendation for the uniformity of files naming : componentui / component_ui ; component_requirements/ components_reqs ?\n\n6 - there is an initial couple of component that were developed, mutationseq and snpeff, they are all different across the branches :) may be we have to create a single branch to clone containing the backbone of a component\n\n7 - Before creating a pipeline, we need to push people to test their components locally before their push their work to stash, only working code should be pushed to stash, how to validate a developed component locally ? Now I finished my first component but it is not clear how I can test it (not documented ?)\n\n8 - We should add two other files to the component directory,\n\n    - A README.md explaining how the component was developed and what's the purpose of it ( I know writing documentation could be a pain but we need to adopt this as a best practice habit because one day we will be managing thousands of components so we need to establish this habit of documenting the work very early, think about non permanent people who probably will leave the lab sooner or later, we need to keep track of their documentation in order to maintain components)\n\n    - A known bugs document : bugs reported by users to the developer should be reported in that file with a specification of the version of the component containing the bug example =\n\n    Bug : Blablabla is causing blablabla\n    version : snpeff v 4.0\n    reporter : John Doe\n\n\n    Bug : Not working with version 1.2.3 of another_library\n    version : snpeff v 4.1\n    reporter : John Doe\n\n9 - when we run the pipeline generated by plumber we can add as much 'fake' argument as we want and the pipeline doesnt complain about it, this should be fixed\n","markers":{"markers":{"1":{"id":1,"range":[[15,4],[28,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":96,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"905e4c86b9719673f9bdbdf894dcbd851e46f787","deserializer":"TextBuffer"},{"text":"'''\nTargeted Sequencing Pipeline : Discovery mode\n\n\n\n__author__ = \"Rad\"\n__copyright__ = \"Copyright 2014, Shah Lab\"\n__credits__ = [\"Rad\", \"Ali\", \"Sohrab\", \"Karey\", \"Diljot\"]\n__license__ = \"Don't know yet\"\n__version__ = \"0.0.1\"\n__maintainer__ = \"Rad\"\n__email__ = \"raniba@bccrc.ca\"\n__status__ = \"Development\"\n\n'''\n\nfrom pipelines.io import make_directory, make_parent_directory\nfrom ruffus import *\nfrom ruffus.ruffus_utility import CHECKSUM_FILE_TIMESTAMPS\nfrom pipeline_notifications import notify_user\n\nimport argparse\nimport os,sys,json, csv , operator\nimport yaml\nimport time\nfrom termcolor import colored\nimport functools\nimport logging\n\n\n\n\n#=======================================================================================================================\n# Read Command Line Input\n#=======================================================================================================================\nparser = argparse.ArgumentParser()\n\nparser.add_argument('config_file',\n                    help='''Path to yaml config file.''')\n\nparser.add_argument('--num_cpus', type=int, default=1,\n                    help='''Number of cpus to use for the analysis. If set to -1 then as many cpus as samples will\n                    be used. Default is 1.''')\n\nparser.add_argument('--mode', choices=['local', 'cluster', 'printout'], default='printout',\n                    help='''Mode to run the pipeline in. local will run the pipeline on the compute it was launched\n                    from. cluster will submit the jobs to a cluster using SGE. printout shows which tasks will be\n                    run. default is printout.''')\n\nparser.add_argument('--install_dir', default=None,\n                    help='''Path to local installation files to override system defaults.''')\n\n\nparser.add_argument('--dedup', choices=['yes', 'no'], default='no',\n                    help='''Read deduplication to remove any noise in the alignment that may come from\n                    PCR duplicate reads, this can reduce the size of the alignment. If you are doing a\n                    deep sequencing analysis you may want to turn this to No ''')\n\nparser.add_argument('--targets',\n                    help='''A file containing target positions to be used to filter all calls within the ranges of amplicon starts and ends''')\n\n\nparser.add_argument('--email',default=\"\",\n                    help='''If a valid email address is provided, users will be notified at the begining and at the end of the job''')\n\nargs = parser.parse_args()\n\nfh = open(args.config_file)\n\nconfig = yaml.load(fh)\n\nfh.close()\n\n\ngatk  = config['gatk']\npicard = config['picard']\nreference = config['ref_genome']\ndbsnp  = config['dbsnp']\nindels = config['indels']\njava = config['java']\n\n\nmandatory_env = [gatk, picard, reference, dbsnp, indels, java]\n\ndata = {\n#'Input directory' : args.input_dir ,\n#'Output directory' : args.output_dir ,\n'Targets Positions' : args.targets ,\n'Config file' : args.config_file ,\n'Deduplication step' : args.dedup ,\n'Run mode' : args.mode ,\n'Number of CPUs used' : args.num_cpus ,\n}\n\n\n\n#=======================================================================================================================\n# Scripts\n#=======================================================================================================================\ncwd = os.path.dirname(os.path.realpath(__file__))\n\nbin_dir = os.path.join(cwd, 'bin')\n\nbuild_amplicon_positions_file_script = os.path.join(bin_dir, 'build_amplicon_positions_file.py')\n\ndo_binomial_exact_test_script = os.path.join(bin_dir, 'do_binomial_exact_test.py')\n\nbuild_results_file_script = os.path.join(bin_dir, 'build_results_file.py')\n\nbam_to_counts_script = os.path.join(bin_dir, 'bam_to_counts.py')\n\nrun_bwa_script = os.path.join(bin_dir, 'run_bwa_backtrack.sh')\n#run_bwa_script = os.path.join(bin_dir, 'run_bwa_mem_paired_end.sh')\n#run_bowtie2_script = os.path.join(bin_dir,'run_bowtie2.sh')\n\n\n#====================\n# Pipeline utilities\n#====================\n\ndef timer(stream=sys.stdout):\n    \"\"\"The timer decorator wraps a function and prints elapsed time to standard\n    out, or any other file-like object with a .write() method.\n    \"\"\"\n    def actual_timer(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # Start the timer.\n            start = time.time()\n            # Run the decorated function.\n            ret = func(*args, **kwargs)\n            # Stop the timer.\n            end = time.time()\n            elapsed = end - start\n            name = func.__name__\n            stream.write(colored(\"{} took {} seconds\\n\".format(name, elapsed), 'red', attrs=['bold'] ))\n            # Return the decorated function's return value.\n            return ret\n        return wrapper\n    return actual_timer\n\n\ndef check_config_params():\n  for env in mandatory_env:\n    if env.__len__() == 0 :\n      print >> sys.stderr, \"It seems that one third party tool is not defined in the config file, please check your config file\"\n      sys.exit(1)\n\n\ndef success():\n  print >> sys.stderr , colored('   Task successfully finished   ', 'white', 'on_red')\n\n\n\ndef sort_tmp_results(outputfile, tempfile):\n\n  with open(outputfile,\"w\") as res:\n    unique = []\n    intersected = open(tempfile,'r')\n    intersected_tosort = csv.reader(intersected,delimiter=\"\\t\")\n    intersect_sorted = sorted(intersected_tosort, key=operator.itemgetter(0,1))\n    header_line = \"{}\\t{}\\t{}\\t{}\\t{}\\t{}\\n\".format(\"chrom\", \"coord\",\"ref_base\",\"var_base\",\"amplicon_beg\",\"amplicon_end\")\n    res.write(header_line)\n    for line in intersect_sorted:\n      if line not in unique:\n        unique.append(line)\n        res.write(\"\\t\".join(line))\n        res.write(\"\\n\")\n  os.remove(tempfile)\n\n\n\n#=======================================================================================================================\n# Set System Paths\n#=======================================================================================================================\nif args.install_dir is not None:\n    os.environ['PATH'] = os.path.join(args.install_dir, 'bin') + ':' + os.environ['PATH']\n\n    if 'LD_LIBRARY_PATH' in os.environ:\n        os.environ['LD_LIBRARY_PATH'] = os.path.join(args.install_dir, 'lib') + ':' + os.environ['LD_LIBRARY_PATH']\n\n    else:\n        os.environ['LD_LIBRARY_PATH'] = os.path.join(args.install_dir, 'lib')\n\n#=======================================================================================================================\n# Pipeline\n#=======================================================================================================================\n\nif args.email :\n\n    SUBJ = \"Your DeepSeq analysis is up and running\"\n    MESS = \"Hi There, you successully set up a deepseq pipeline, your analysis is up and running ! \\n\"+ \\\n                \"Your analysis report (in json format, do what you want with it), you will be notified when the analysis is over.\\n\"+json.dumps([data], indent=2)+ \\\n                \"\\nCheers !\\nThe pipeline :) (don't try to reply, am not a human)\\n\"\n\n    notify_user(args.email, SUBJ ,MESS, \"DeepSequencingPipeline\");\n\n\n\n\n@posttask(success)\n@timer(sys.stderr)\ndef load_fastq_files():\n    for sample_id in config['samples']:\n        fastq_file_1 = config['samples'][sample_id]['fastq_file_1']\n\n        fastq_file_2 = config['samples'][sample_id]['fastq_file_2']\n\n        out_file = os.path.join(config['out_dir'], 'tmp', 'bam', '{0}.bam'.format(sample_id))\n\n        yield [[fastq_file_1, fastq_file_2], out_file, run_bwa_script]\n\n@posttask(success)\n@timer(sys.stderr)\n@files(load_fastq_files)\ndef align_fastq_files(in_files, out_file, script):\n    make_parent_directory(out_file)\n\n    cmd = 'sh'\n\n    cmd_args = [\n                script,\n                config['ref_genome'],\n                in_files[0],\n                in_files[1],\n                out_file\n                ]\n\n    run_cmd(cmd, cmd_args, mem=10, max_mem=20)\n\n### Discovery mode starts here\n#### We need to rehead the bam files\n\n\n\n\n@transform(align_fastq_files, regex(r'(.*)/bam/(.*)\\.bam'), r\"\\1/reh/\\2.bam\")\n@timer(sys.stderr)\ndef rehead_bam_file(bam_in, bam_out):\n\n  make_parent_directory(bam_out)\n  basename = os.path.basename(bam_in)\n\n  sample_name = basename.split(\".bam\")[0]\n\n  cmd = java\n  #cmd.replace('java','java -XX:MaxHeapSize=256m  -jar')\n  cmd_args = [  \"-Xmx4g\", \"-jar\", os.path.join(picard,\"AddOrReplaceReadGroups.jar\"),\n                \"INPUT=\"+bam_in,\n                \"OUTPUT=\"+bam_out,\n                \"SORT_ORDER=coordinate\",\n                \"RGLB=8\",\n                \"RGPL=Illumina\",\n                \"RGPU=1\",\n                \"RGSM=\"+sample_name\n              ]\n\n  run_cmd(cmd,cmd_args,max_mem=16)\n\n@transform(rehead_bam_file, suffix('.bam'), '.sorted.bam')\n@timer(sys.stderr)\ndef sort_mapped_reads(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n\n\n    make_parent_directory(out_file)\n\n    out_prefix = out_file.replace(\".bam\", \"\")\n    cmd = 'samtools'\n\n    cmd_args = ['sort', in_file, out_prefix]\n\n    run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n### Switch set to Yes -> Do deduplication\n\n@posttask(success)\n@active_if(args.dedup == 'yes')\n@transform(sort_mapped_reads, regex(r'(.*)/reh/(.*)\\.bam'), r\"\\1/dedup/\\2.dedup.bam\")\n@timer(sys.stderr)\ndef deduplicate(bam_sorted, bam_deduplicated):\n  '''\n  Remove PCR amplification identical reads\n  '''\n\n\n  make_parent_directory(bam_deduplicated)\n\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(picard,\"MarkDuplicates.jar\"),\n             ''.join([\"INPUT=\",bam_sorted]),\n             ''.join([\"OUTPUT=\",bam_deduplicated]),\n             \"METRICS_FILE=metrics.txt\"\n              ]\n  run_cmd(cmd,cmd_args, max_mem=16)\n\n\n@posttask(success)\n@active_if(args.dedup == 'yes')\n@transform(deduplicate, regex(r'(.*)/dedup/(.*)\\.dedup\\.bam'), '.bai')\n@timer(sys.stderr)\ndef index_mapped_reads(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n\n    cmd = 'samtools'\n\n    cmd_args = ['index', in_file]\n\n    run_cmd(cmd, cmd_args, max_mem=16)\n\n\n@posttask(success)\n@active_if(args.dedup == 'yes')\n@follows(index_mapped_reads)\n@transform(deduplicate, regex(r'(.*)/dedup/(.*)\\.dedup\\.bam'), r'\\1/intervals/\\2.intervals')\n@timer(sys.stderr)\ndef create_targets(in_file, out_file):\n  '''\n  GATK RealignerTargetCreator : Create suspecious regions where a realignment will be done\n  '''\n\n  make_parent_directory(out_file)\n\n\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"RealignerTargetCreator\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n\n@posttask(success)\n@active_if(args.dedup=='yes')\n@transform(create_targets, regex(r'(.*)/intervals/(.*)\\.intervals'), add_inputs(r'\\1/dedup/\\2.dedup.bam'),r'\\1/realigned/\\2.realigned.bam')\n@timer(sys.stderr)\ndef realign(in_files, out_file):\n  '''\n  GATK IndelRealigner\n  '''\n\n\n  make_parent_directory(out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n           \"-T\",\"IndelRealigner\",\n           \"-R\",config['ref_genome'],\n           \"-targetIntervals\",in_files[0],\n           \"-I\",in_files[1],\n           \"-o\",out_file,\n           \"-LOD\", 1.0\n           ]\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n### Swithch set to No -> Do NOT deduplicate\n\n\n@posttask(success)\n@active_if(args.dedup == 'no')\n@follows(sort_mapped_reads)\n@transform(sort_mapped_reads, regex(r'(.*)/reh/(.*)\\.sorted\\.bam'), '.bai')\n@timer(sys.stderr)\ndef index_mapped_reads_ndp(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n\n    cmd = 'samtools'\n\n    cmd_args = ['index', in_file]\n\n    run_cmd(cmd, cmd_args)\n\n\n@posttask(success)\n@active_if(args.dedup == 'no')\n@follows(index_mapped_reads_ndp)\n@transform(sort_mapped_reads, regex(r'(.*)/reh/(.*)\\.sorted\\.bam'), r'\\1/intervals/\\2.intervals')\n@timer(sys.stderr)\ndef create_targets_ndp(in_file, out_file):\n  '''\n  GATK RealignerTargetCreator : Create suspecious regions where a realignment will be done\n  '''\n\n  make_parent_directory(out_file)\n\n\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"RealignerTargetCreator\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n@posttask(success)\n@active_if(args.dedup=='no')\n@transform(create_targets_ndp, regex(r'(.*)/intervals/(.*)\\.intervals'), add_inputs(r'\\1/reh/\\2.sorted.bam'),r'\\1/realigned/\\2.realigned.bam')\n@timer(sys.stderr)\ndef realign_ndp(in_files, out_file):\n  '''\n  GATK IndelRealigner\n  '''\n\n\n  make_parent_directory(out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n           \"-T\",\"IndelRealigner\",\n           \"-R\",config['ref_genome'],\n           \"-targetIntervals\",in_files[0],\n           \"-I\",in_files[1],\n           \"-o\",out_file\n           ]\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n### Now we decide what road to go, realign or realign_ndp\n\nif(args.dedup == 'yes'):\n  realignment_switcher = output_from(\"realign\")\nelse:\n  realignment_switcher = output_from(\"realign_ndp\")\n\n### End Switch ###\n\n@posttask(success)\n@transform(realignment_switcher,regex(r'(.*)/realigned/(.*)\\.realigned\\.bam'),r'\\1/realigned/\\2.realigned.grp')\n@timer(sys.stderr)\ndef base_quality_recalibrator_pre(in_file, out_file):\n  '''\n  GATK recalibrate 1\n\n  '''\n  #recalibrate(in_file, out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"BaseRecalibrator\",\n             \"-R\",config['ref_genome'],\n             \"-knownSites\", config['dbsnp'],\n #            \"-knownSites\", config['indels'],\n             \"-I\",in_file,\n             \"-o\",out_file,\n             #\"-plots\",\"recal.grp.pdf\"\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n@posttask(success)\n@follows(base_quality_recalibrator_pre)\n@transform(realignment_switcher,regex(r'(.*)/realigned/(.*)\\.realigned\\.bam'), add_inputs(r'\\1/realigned/\\2.realigned.grp') , r'\\1/realigned/\\2.post_recal.grp2')\n@timer(sys.stderr)\ndef base_quality_recalibrator_post(in_files, out_file):\n  '''\n  GATK recalibrate 2nd step\n  '''\n  #recalibrate(in_file, out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"BaseRecalibrator\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_files[0],\n             \"-BQSR\", in_files[1],\n             \"-knownSites\", config['dbsnp'],\n             \"-o\",out_file,\n             #\"-plots\",\"post_recal.grp.pdf\"\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n\n\n@posttask(success)\n@follows(base_quality_recalibrator_post)\n@transform(base_quality_recalibrator_pre, regex(r'(.*)/realigned/(.*)\\.grp'), add_inputs(r'\\1/realigned/\\2.bam'),r'\\1/realigned/\\2.recalibrated.bam')\n@timer(sys.stderr)\ndef print_reads(in_files, out_file):\n  '''\n  GATK Get the recalibrated alignment\n  '''\n  #print_reads(in_file,out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"PrintReads\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_files[1],\n             \"-BQSR\", in_files[0],\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n\n@posttask(success)\n@transform(print_reads, regex(r'(.*)/realigned/(.*)\\.recalibrated\\.bam'),r'\\1/realigned/\\2.sorted.bam')\n@timer(sys.stderr)\ndef sort_recalibrated_bams(in_file, out_file):\n  '''\n  Sort the bam files using Samtools sort (room for using Picard)\n  '''\n  #sort_recalibrated_alignment(in_file,out_file)\n\n  out_prefix = out_file.replace(\".bam\",\"\")\n  cmd = 'samtools'\n\n  cmd_args = ['sort', in_file, out_prefix]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n\n@posttask(success)\n@transform(sort_recalibrated_bams,regex(r'(.*)/realigned/(.*)\\.sorted\\.bam'),'.bai')\n@timer(sys.stderr)\ndef index_recalibrated_bams(in_file, out_file):\n  '''\n  Index the bam files using Samtools index (room for using Picard)\n  '''\n  #index_recalibrated_alignment(in_file,out_file)\n\n  cmd = 'samtools'\n\n  cmd_args = ['index', in_file]\n\n  run_cmd(cmd, cmd_args)\n\n\n'''\n  This is the difference with the indel_realignment_pipeline\n  In the following secion we will add a couple of other steps from the GATK protocol\n  We need to call variants (SNPs, Indels, SV) using HaplotypeCaller for better accuracy\n  I anticipate UnifiedGenotyper to be discontinued in the future, So I prefer using HC and upgrading later\n  So what we will be adding here :\n\n   - Call HaplotypeCaller\n       INPUT  : realigned Bam file\n       OUTPUT : VCF\n   - Generate VCFs for each Bam file\n   - Merge VCFs for all the samples\n       INPUT  : VCFs\n       OUTPUT : One VCF\n   - Convert the merged VCF to a bed file (<experiment_id>_positions.tsv)\n\n'''\n\n\n@posttask(success)\n@follows(index_recalibrated_bams)\n@transform(sort_recalibrated_bams, regex(r'(.*)/realigned/(.*)\\.sorted\\.bam'),r'\\1/calls/\\2.vcf')\n@timer(sys.stderr)\ndef call_variant(in_file, out_file):\n  '''\n  Call HaplotypeCaller with its default parameters\n  '''\n  make_parent_directory(out_file)\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"HaplotypeCaller\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_file,\n             \"-o\",out_file,\n             \"-stand_call_conf\", 30,\n             \"-stand_emit_conf\", 10,\n             \"-minPruning\", 3\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n@posttask(success)\n#@transform(call_variant, regex(r'(.*)/calls/(.*)\\.vcf'), r'\\1/calls/merged_variants.vcf')\n@merge(call_variant, r'{0}/merged_calls/{1}.vcf'.format(os.path.join(config['out_dir'],\"tmp\"), 'merged_variants'))\n@timer(sys.stderr)\ndef merge_vcfs(vcf_files, merged_vcf_file):\n  make_parent_directory(merged_vcf_file)\n  with open(merged_vcf_file, 'a') as ofile:\n    for vcf_file in vcf_files:\n      vf = open(vcf_file,'r')\n      lines = vf.readlines()\n      for l in lines:\n        if l.startswith('#'):\n          continue\n        else:\n          print >> ofile,l\n\n\n@posttask(success)\n@transform(merge_vcfs, regex(r'(.*)/merged_calls/(.*)\\.vcf'),r'\\1/positions/\\2_positions.tsv')\n@timer(sys.stderr)\ndef create_positions(merged_vcf, positions_file):\n  make_parent_directory(positions_file)\n  # line to be parsed :\n  #20     14370   rs6054257 G      A       29   PASS   NS=3;DP=14;AF=0.5;DB;H2           GT:GQ:DP:HQ 0|0:48:1:51,51 1|0:48:8:51,51 1/1:43:5:.,.\n  with open(positions_file,'a') as pos_file:\n    with open(merged_vcf,'r') as merge_file:\n      for line in merge_file :\n        if len(line) > 1 :\n          columns = line.split(\"\\t\")\n          outline = [chrom, position, name, ref_allele, alt_allele] = [columns[0],columns[1],columns[2],columns[3],columns[4]]\n          pos_file.write(\"\\t\".join(outline[i] for i in range(5)))\n          pos_file.write(\"\\n\")\n\n\n# We need now to filter out all positions not present in the targets regions\n# The targets regions should be in tabular format. Example :\n# <chr>  <amplicon_start>  <amplicon_end>\n\n@posttask(success)\n@transform(create_positions, regex(r'(.*)/positions/(.*)\\.tsv'), add_inputs(args.targets), r'\\1/positions/\\2_filtered.tsv' )\n@timer(sys.stderr)\ndef filter_positions_in_amplicon(coordinates, result):\n\n  merged_positions = coordinates[0]\n  positions_file = coordinates[1]\n  with open(result+\"_tmp\",'w') as intersect:\n    with open(merged_positions,'r') as merge_file:\n      for line in merge_file :\n        if len(line) > 1 :\n          columns = line.strip().split(\"\\t\")\n          #print columns\n          outline = [chrom, position, name, ref_allele, alt_allele] = [columns[0],columns[1],columns[2],columns[3],columns[4]]\n          candidate_position = position\n\n          if(len(columns[3])==1 and len(columns[4])==1):\n            with open(positions_file, 'r') as pos_file:\n              for posline in pos_file :\n                if len(posline) > 1 :\n                  pos_columns = posline.strip().split(\"\\t\")\n                  pos_outline = [pos_chrom, amplicon_start, amplicon_end] = [pos_columns[0],pos_columns[1], pos_columns[2]]\n                  if(candidate_position > amplicon_start) and (candidate_position < amplicon_end):\n                    #print \"found\"\n                    row = [chrom, candidate_position, ref_allele, alt_allele, amplicon_start, amplicon_end]\n                    intersect.write(\"\\t\".join(row[i] for i in range(6)))\n                    intersect.write(\"\\n\")\n\n  sort_tmp_results(result, result+\"_tmp\")\n\n\n### Discovery mode ends here\n\n\n@follows(filter_positions_in_amplicon)\n#@files(config['positions_file'],\n#       os.path.join(config['out_dir'], 'tmp', 'amplicon_positions', '{0}.tsv'.format(config['analysis_id'])))\n@transform(filter_positions_in_amplicon, regex(r'(.*)/positions/(.*)\\_filtered.tsv'), os.path.join(config['out_dir'], 'tmp', 'amplicon_positions', '{0}.tsv'.format(config['analysis_id'])) )\n@timer(sys.stderr)\ndef build_amplicon_positions_file(in_file, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [build_amplicon_positions_file_script, in_file, out_file]\n\n    run_cmd(cmd, cmd_args)\n\n@follows(build_amplicon_positions_file)\n@transform(sort_recalibrated_bams,\n           regex(r'(.*)/realigned/(.*)\\.sorted\\.bam'),\n           add_inputs(build_amplicon_positions_file),\n           r'\\1/counts/\\2.tsv',\n           bam_to_counts_script)\n@timer(sys.stderr)\ndef build_counts_file(in_files, counts_file, script):\n    make_parent_directory(counts_file)\n\n    cmd = 'python'\n\n    bam_file = in_files[0]\n\n    positions_file = in_files[1]\n\n    cmd_args = [\n                script,\n                bam_file,\n                counts_file,\n                '--positions_file', positions_file,\n                '--count_duplicates',\n                '--min_bqual', config['min_bqual'],\n                '--min_mqual', config['min_mqual'],\n                '--ref_genome', config['ref_genome'],\n                '--ref_base',\n                '--var_base'\n                ]\n\n    run_cmd(cmd, cmd_args)\n\n@transform(build_counts_file, regex('(.*)/counts/(.*)\\.tsv'), r'\\1/variant_status/\\2.tsv')\n@timer(sys.stderr)\ndef do_binomial_exact_test(in_file, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [\n                do_binomial_exact_test_script,\n                in_file,\n                config['positions_file'],\n                out_file,\n                '--family_wise_error_rate', config['family_wise_error_rate'],\n                '--low_coverage_threshold', config['low_coverage_threshold']\n                ]\n\n    print str(cmd_args)\n\n    run_cmd(cmd, cmd_args)\n\n@merge(do_binomial_exact_test, r'{0}/results/{1}.xls'.format(config['out_dir'], config['analysis_id']))\n@timer(sys.stderr)\ndef build_summary_file(in_files, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [\n                build_results_file_script,\n                out_file\n                ]\n\n    sample_ids = [os.path.splitext(os.path.basename(file_name))[0] for file_name in in_files]\n\n    cmd_args.append('--sample_ids')\n    cmd_args.extend(sample_ids)\n\n    cmd_args.append('--variant_call_files')\n    cmd_args.extend(in_files)\n\n    if 'normal_sample' in config:\n        cmd_args.extend(['--normal_sample', config['normal_sample']])\n\n    run_cmd(cmd, cmd_args)\n\n@follows(build_summary_file)\ndef end():\n    pass\n\n#=======================================================================================================================\n# Run pipeline\n#=======================================================================================================================\nif args.mode in ['cluster', 'local']:\n    if args.mode == 'cluster':\n        from pipelines.job_manager import ClusterJobManager\n\n        import datetime\n\n        log_dir = os.path.join(config['out_dir'], 'log', datetime.datetime.now().isoformat(','))\n\n        job_manager = ClusterJobManager(log_dir)\n\n    elif args.mode == 'local':\n        from pipelines.job_manager import LocalJobManager\n\n        job_manager = LocalJobManager()\n\n    run_cmd = job_manager.run_job\n\n    try:\n#        pipeline_run(end, multiprocess=args.num_cpus) #, use_multi_threading=True)\n        pipeline_run(end, verbose=2,multithread=args.num_cpus, checksum_level=CHECKSUM_FILE_TIMESTAMPS)\n\n\n    finally:\n        job_manager.close()\n\nelif args.mode == 'printout':\n    import sys\n\n    pipeline_printout(sys.stdout, end, verbose=3, wrap_width=200)\n    #pipeline_printout_graph (\"discovery_pipeline.png\", \"png\", end,test_all_task_for_update = False, pipeline_name=\"Targeted Sequencing Discovery Mode\", user_colour_scheme = {\"colour_scheme_index\" :6})\nif args.email :\n\n    SUBJ = \"Your Targeted Sequencing Pipeline was successful\"\n    MESS = \"Hi There, your TSP job is done, please review the result directory for sanity check\"\n\n    notify_user(args.email, SUBJ ,MESS, \"DeepSequencingPipeline\");","markers":{"markers":{"1":{"id":1,"range":[[806,66],[806,66]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":112,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[0,0],[77,0]]},"newParams":{"tailed":false,"range":[[77,0],[77,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[77,0]],"newRange":[[0,0],[806,66]],"oldText":"'''\nCreated on\n\n@author: raniba\n'''\n\nimport os\n\nfrom factory_utils.utils import ComponentAbstract\n\n\nclass Component(ComponentAbstract):\n\n    '''\n    Run picard tool AddOrReplaceReadGroup, load dependencies and requirements\n    '''\n    def __init__(self, component_name='rehead', component_parent_dir=None, seed_dir=None):\n       self.version = \"0.0.1\"\n\n        ## initialize ComponentAbstract\n       super(Component, self).__init__(component_name, component_parent_dir, seed_dir)\n    '''\n\n     def __init__(self, component_name='rehead', component_parent_dir=None, seed_dir=None):\n         ## initialize ComponentAbstract\n        super(Component, self).__init__(component_name, component_parent_dir, seed_dir)\n\n        # initialize attributes specific to the component\n        self.args = self.component_ui.args\n        self.version = self.component_ui.__version__\n\n        self.requirements = self.component_reqs.requirements\n    '''\n\n    def make_cmd(self):\n        '''\n        generate the AddOrReplaceReadGroup command\n        '''\n\n        java_mem = '-Xmx3072M'\n        java_jar_option = '-jar'\n        rehead_jar = os.path.join(self.requirements['picard'], 'AddOrReplaceReadGroups.jar')\n        rehead_infile = self.args.infile\n        rehead_outfile = self.args.outfile\n\n        basename = os.path.basename(rehead_infile)\n        bam_id = basename.split(\".bam\")[0]\n\n        cmd = self.requirements['java']\n        cmd_args = [\n            java_mem,\n            java_jar_option,\n            rehead_jar,\n            \"INPUT=\"+rehead_infile,\n            \"OUTPUT=\"+rehead_outfile,\n            \"SORT_ORDER=coordinate\",\n            \"RGLB=8\",\n            \"RGPL=Illumina\",\n            \"RGPU=1\",\n            \"RGSM=\"+bam_id\n        ]\n\n        return cmd, cmd_args\n\n\n# to run as stand alone\ndef _main():\n    '''main function'''\n    rehead = Component()\n    rehead.args = component_ui.args\n    rehead.run()\n\nif __name__ == '__main__':\n\n    import component_ui\n\n    _main()\n","newText":"'''\nTargeted Sequencing Pipeline : Discovery mode\n\n\n\n__author__ = \"Rad\"\n__copyright__ = \"Copyright 2014, Shah Lab\"\n__credits__ = [\"Rad\", \"Ali\", \"Sohrab\", \"Karey\", \"Diljot\"]\n__license__ = \"Don't know yet\"\n__version__ = \"0.0.1\"\n__maintainer__ = \"Rad\"\n__email__ = \"raniba@bccrc.ca\"\n__status__ = \"Development\"\n\n'''\n\nfrom pipelines.io import make_directory, make_parent_directory\nfrom ruffus import *\nfrom ruffus.ruffus_utility import CHECKSUM_FILE_TIMESTAMPS\nfrom pipeline_notifications import notify_user\n\nimport argparse\nimport os,sys,json, csv , operator\nimport yaml\nimport time\nfrom termcolor import colored\nimport functools\nimport logging\n\n\n\n\n#=======================================================================================================================\n# Read Command Line Input\n#=======================================================================================================================\nparser = argparse.ArgumentParser()\n\nparser.add_argument('config_file',\n                    help='''Path to yaml config file.''')\n\nparser.add_argument('--num_cpus', type=int, default=1,\n                    help='''Number of cpus to use for the analysis. If set to -1 then as many cpus as samples will\n                    be used. Default is 1.''')\n\nparser.add_argument('--mode', choices=['local', 'cluster', 'printout'], default='printout',\n                    help='''Mode to run the pipeline in. local will run the pipeline on the compute it was launched\n                    from. cluster will submit the jobs to a cluster using SGE. printout shows which tasks will be\n                    run. default is printout.''')\n\nparser.add_argument('--install_dir', default=None,\n                    help='''Path to local installation files to override system defaults.''')\n\n\nparser.add_argument('--dedup', choices=['yes', 'no'], default='no',\n                    help='''Read deduplication to remove any noise in the alignment that may come from\n                    PCR duplicate reads, this can reduce the size of the alignment. If you are doing a\n                    deep sequencing analysis you may want to turn this to No ''')\n\nparser.add_argument('--targets',\n                    help='''A file containing target positions to be used to filter all calls within the ranges of amplicon starts and ends''')\n\n\nparser.add_argument('--email',default=\"\",\n                    help='''If a valid email address is provided, users will be notified at the begining and at the end of the job''')\n\nargs = parser.parse_args()\n\nfh = open(args.config_file)\n\nconfig = yaml.load(fh)\n\nfh.close()\n\n\ngatk  = config['gatk']\npicard = config['picard']\nreference = config['ref_genome']\ndbsnp  = config['dbsnp']\nindels = config['indels']\njava = config['java']\n\n\nmandatory_env = [gatk, picard, reference, dbsnp, indels, java]\n\ndata = {\n#'Input directory' : args.input_dir ,\n#'Output directory' : args.output_dir ,\n'Targets Positions' : args.targets ,\n'Config file' : args.config_file ,\n'Deduplication step' : args.dedup ,\n'Run mode' : args.mode ,\n'Number of CPUs used' : args.num_cpus ,\n}\n\n\n\n#=======================================================================================================================\n# Scripts\n#=======================================================================================================================\ncwd = os.path.dirname(os.path.realpath(__file__))\n\nbin_dir = os.path.join(cwd, 'bin')\n\nbuild_amplicon_positions_file_script = os.path.join(bin_dir, 'build_amplicon_positions_file.py')\n\ndo_binomial_exact_test_script = os.path.join(bin_dir, 'do_binomial_exact_test.py')\n\nbuild_results_file_script = os.path.join(bin_dir, 'build_results_file.py')\n\nbam_to_counts_script = os.path.join(bin_dir, 'bam_to_counts.py')\n\nrun_bwa_script = os.path.join(bin_dir, 'run_bwa_backtrack.sh')\n#run_bwa_script = os.path.join(bin_dir, 'run_bwa_mem_paired_end.sh')\n#run_bowtie2_script = os.path.join(bin_dir,'run_bowtie2.sh')\n\n\n#====================\n# Pipeline utilities\n#====================\n\ndef timer(stream=sys.stdout):\n    \"\"\"The timer decorator wraps a function and prints elapsed time to standard\n    out, or any other file-like object with a .write() method.\n    \"\"\"\n    def actual_timer(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # Start the timer.\n            start = time.time()\n            # Run the decorated function.\n            ret = func(*args, **kwargs)\n            # Stop the timer.\n            end = time.time()\n            elapsed = end - start\n            name = func.__name__\n            stream.write(colored(\"{} took {} seconds\\n\".format(name, elapsed), 'red', attrs=['bold'] ))\n            # Return the decorated function's return value.\n            return ret\n        return wrapper\n    return actual_timer\n\n\ndef check_config_params():\n  for env in mandatory_env:\n    if env.__len__() == 0 :\n      print >> sys.stderr, \"It seems that one third party tool is not defined in the config file, please check your config file\"\n      sys.exit(1)\n\n\ndef success():\n  print >> sys.stderr , colored('   Task successfully finished   ', 'white', 'on_red')\n\n\n\ndef sort_tmp_results(outputfile, tempfile):\n\n  with open(outputfile,\"w\") as res:\n    unique = []\n    intersected = open(tempfile,'r')\n    intersected_tosort = csv.reader(intersected,delimiter=\"\\t\")\n    intersect_sorted = sorted(intersected_tosort, key=operator.itemgetter(0,1))\n    header_line = \"{}\\t{}\\t{}\\t{}\\t{}\\t{}\\n\".format(\"chrom\", \"coord\",\"ref_base\",\"var_base\",\"amplicon_beg\",\"amplicon_end\")\n    res.write(header_line)\n    for line in intersect_sorted:\n      if line not in unique:\n        unique.append(line)\n        res.write(\"\\t\".join(line))\n        res.write(\"\\n\")\n  os.remove(tempfile)\n\n\n\n#=======================================================================================================================\n# Set System Paths\n#=======================================================================================================================\nif args.install_dir is not None:\n    os.environ['PATH'] = os.path.join(args.install_dir, 'bin') + ':' + os.environ['PATH']\n\n    if 'LD_LIBRARY_PATH' in os.environ:\n        os.environ['LD_LIBRARY_PATH'] = os.path.join(args.install_dir, 'lib') + ':' + os.environ['LD_LIBRARY_PATH']\n\n    else:\n        os.environ['LD_LIBRARY_PATH'] = os.path.join(args.install_dir, 'lib')\n\n#=======================================================================================================================\n# Pipeline\n#=======================================================================================================================\n\nif args.email :\n\n    SUBJ = \"Your DeepSeq analysis is up and running\"\n    MESS = \"Hi There, you successully set up a deepseq pipeline, your analysis is up and running ! \\n\"+ \\\n                \"Your analysis report (in json format, do what you want with it), you will be notified when the analysis is over.\\n\"+json.dumps([data], indent=2)+ \\\n                \"\\nCheers !\\nThe pipeline :) (don't try to reply, am not a human)\\n\"\n\n    notify_user(args.email, SUBJ ,MESS, \"DeepSequencingPipeline\");\n\n\n\n\n@posttask(success)\n@timer(sys.stderr)\ndef load_fastq_files():\n    for sample_id in config['samples']:\n        fastq_file_1 = config['samples'][sample_id]['fastq_file_1']\n\n        fastq_file_2 = config['samples'][sample_id]['fastq_file_2']\n\n        out_file = os.path.join(config['out_dir'], 'tmp', 'bam', '{0}.bam'.format(sample_id))\n\n        yield [[fastq_file_1, fastq_file_2], out_file, run_bwa_script]\n\n@posttask(success)\n@timer(sys.stderr)\n@files(load_fastq_files)\ndef align_fastq_files(in_files, out_file, script):\n    make_parent_directory(out_file)\n\n    cmd = 'sh'\n\n    cmd_args = [\n                script,\n                config['ref_genome'],\n                in_files[0],\n                in_files[1],\n                out_file\n                ]\n\n    run_cmd(cmd, cmd_args, mem=10, max_mem=20)\n\n### Discovery mode starts here\n#### We need to rehead the bam files\n\n\n\n\n@transform(align_fastq_files, regex(r'(.*)/bam/(.*)\\.bam'), r\"\\1/reh/\\2.bam\")\n@timer(sys.stderr)\ndef rehead_bam_file(bam_in, bam_out):\n\n  make_parent_directory(bam_out)\n  basename = os.path.basename(bam_in)\n\n  sample_name = basename.split(\".bam\")[0]\n\n  cmd = java\n  #cmd.replace('java','java -XX:MaxHeapSize=256m  -jar')\n  cmd_args = [  \"-Xmx4g\", \"-jar\", os.path.join(picard,\"AddOrReplaceReadGroups.jar\"),\n                \"INPUT=\"+bam_in,\n                \"OUTPUT=\"+bam_out,\n                \"SORT_ORDER=coordinate\",\n                \"RGLB=8\",\n                \"RGPL=Illumina\",\n                \"RGPU=1\",\n                \"RGSM=\"+sample_name\n              ]\n\n  run_cmd(cmd,cmd_args,max_mem=16)\n\n@transform(rehead_bam_file, suffix('.bam'), '.sorted.bam')\n@timer(sys.stderr)\ndef sort_mapped_reads(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n\n\n    make_parent_directory(out_file)\n\n    out_prefix = out_file.replace(\".bam\", \"\")\n    cmd = 'samtools'\n\n    cmd_args = ['sort', in_file, out_prefix]\n\n    run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n### Switch set to Yes -> Do deduplication\n\n@posttask(success)\n@active_if(args.dedup == 'yes')\n@transform(sort_mapped_reads, regex(r'(.*)/reh/(.*)\\.bam'), r\"\\1/dedup/\\2.dedup.bam\")\n@timer(sys.stderr)\ndef deduplicate(bam_sorted, bam_deduplicated):\n  '''\n  Remove PCR amplification identical reads\n  '''\n\n\n  make_parent_directory(bam_deduplicated)\n\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(picard,\"MarkDuplicates.jar\"),\n             ''.join([\"INPUT=\",bam_sorted]),\n             ''.join([\"OUTPUT=\",bam_deduplicated]),\n             \"METRICS_FILE=metrics.txt\"\n              ]\n  run_cmd(cmd,cmd_args, max_mem=16)\n\n\n@posttask(success)\n@active_if(args.dedup == 'yes')\n@transform(deduplicate, regex(r'(.*)/dedup/(.*)\\.dedup\\.bam'), '.bai')\n@timer(sys.stderr)\ndef index_mapped_reads(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n\n    cmd = 'samtools'\n\n    cmd_args = ['index', in_file]\n\n    run_cmd(cmd, cmd_args, max_mem=16)\n\n\n@posttask(success)\n@active_if(args.dedup == 'yes')\n@follows(index_mapped_reads)\n@transform(deduplicate, regex(r'(.*)/dedup/(.*)\\.dedup\\.bam'), r'\\1/intervals/\\2.intervals')\n@timer(sys.stderr)\ndef create_targets(in_file, out_file):\n  '''\n  GATK RealignerTargetCreator : Create suspecious regions where a realignment will be done\n  '''\n\n  make_parent_directory(out_file)\n\n\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"RealignerTargetCreator\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n\n@posttask(success)\n@active_if(args.dedup=='yes')\n@transform(create_targets, regex(r'(.*)/intervals/(.*)\\.intervals'), add_inputs(r'\\1/dedup/\\2.dedup.bam'),r'\\1/realigned/\\2.realigned.bam')\n@timer(sys.stderr)\ndef realign(in_files, out_file):\n  '''\n  GATK IndelRealigner\n  '''\n\n\n  make_parent_directory(out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n           \"-T\",\"IndelRealigner\",\n           \"-R\",config['ref_genome'],\n           \"-targetIntervals\",in_files[0],\n           \"-I\",in_files[1],\n           \"-o\",out_file,\n           \"-LOD\", 1.0\n           ]\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n### Swithch set to No -> Do NOT deduplicate\n\n\n@posttask(success)\n@active_if(args.dedup == 'no')\n@follows(sort_mapped_reads)\n@transform(sort_mapped_reads, regex(r'(.*)/reh/(.*)\\.sorted\\.bam'), '.bai')\n@timer(sys.stderr)\ndef index_mapped_reads_ndp(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n\n    cmd = 'samtools'\n\n    cmd_args = ['index', in_file]\n\n    run_cmd(cmd, cmd_args)\n\n\n@posttask(success)\n@active_if(args.dedup == 'no')\n@follows(index_mapped_reads_ndp)\n@transform(sort_mapped_reads, regex(r'(.*)/reh/(.*)\\.sorted\\.bam'), r'\\1/intervals/\\2.intervals')\n@timer(sys.stderr)\ndef create_targets_ndp(in_file, out_file):\n  '''\n  GATK RealignerTargetCreator : Create suspecious regions where a realignment will be done\n  '''\n\n  make_parent_directory(out_file)\n\n\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"RealignerTargetCreator\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n@posttask(success)\n@active_if(args.dedup=='no')\n@transform(create_targets_ndp, regex(r'(.*)/intervals/(.*)\\.intervals'), add_inputs(r'\\1/reh/\\2.sorted.bam'),r'\\1/realigned/\\2.realigned.bam')\n@timer(sys.stderr)\ndef realign_ndp(in_files, out_file):\n  '''\n  GATK IndelRealigner\n  '''\n\n\n  make_parent_directory(out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n           \"-T\",\"IndelRealigner\",\n           \"-R\",config['ref_genome'],\n           \"-targetIntervals\",in_files[0],\n           \"-I\",in_files[1],\n           \"-o\",out_file\n           ]\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n### Now we decide what road to go, realign or realign_ndp\n\nif(args.dedup == 'yes'):\n  realignment_switcher = output_from(\"realign\")\nelse:\n  realignment_switcher = output_from(\"realign_ndp\")\n\n### End Switch ###\n\n@posttask(success)\n@transform(realignment_switcher,regex(r'(.*)/realigned/(.*)\\.realigned\\.bam'),r'\\1/realigned/\\2.realigned.grp')\n@timer(sys.stderr)\ndef base_quality_recalibrator_pre(in_file, out_file):\n  '''\n  GATK recalibrate 1\n\n  '''\n  #recalibrate(in_file, out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"BaseRecalibrator\",\n             \"-R\",config['ref_genome'],\n             \"-knownSites\", config['dbsnp'],\n #            \"-knownSites\", config['indels'],\n             \"-I\",in_file,\n             \"-o\",out_file,\n             #\"-plots\",\"recal.grp.pdf\"\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n@posttask(success)\n@follows(base_quality_recalibrator_pre)\n@transform(realignment_switcher,regex(r'(.*)/realigned/(.*)\\.realigned\\.bam'), add_inputs(r'\\1/realigned/\\2.realigned.grp') , r'\\1/realigned/\\2.post_recal.grp2')\n@timer(sys.stderr)\ndef base_quality_recalibrator_post(in_files, out_file):\n  '''\n  GATK recalibrate 2nd step\n  '''\n  #recalibrate(in_file, out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"BaseRecalibrator\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_files[0],\n             \"-BQSR\", in_files[1],\n             \"-knownSites\", config['dbsnp'],\n             \"-o\",out_file,\n             #\"-plots\",\"post_recal.grp.pdf\"\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n\n\n@posttask(success)\n@follows(base_quality_recalibrator_post)\n@transform(base_quality_recalibrator_pre, regex(r'(.*)/realigned/(.*)\\.grp'), add_inputs(r'\\1/realigned/\\2.bam'),r'\\1/realigned/\\2.recalibrated.bam')\n@timer(sys.stderr)\ndef print_reads(in_files, out_file):\n  '''\n  GATK Get the recalibrated alignment\n  '''\n  #print_reads(in_file,out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"PrintReads\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_files[1],\n             \"-BQSR\", in_files[0],\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n\n\n@posttask(success)\n@transform(print_reads, regex(r'(.*)/realigned/(.*)\\.recalibrated\\.bam'),r'\\1/realigned/\\2.sorted.bam')\n@timer(sys.stderr)\ndef sort_recalibrated_bams(in_file, out_file):\n  '''\n  Sort the bam files using Samtools sort (room for using Picard)\n  '''\n  #sort_recalibrated_alignment(in_file,out_file)\n\n  out_prefix = out_file.replace(\".bam\",\"\")\n  cmd = 'samtools'\n\n  cmd_args = ['sort', in_file, out_prefix]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n\n@posttask(success)\n@transform(sort_recalibrated_bams,regex(r'(.*)/realigned/(.*)\\.sorted\\.bam'),'.bai')\n@timer(sys.stderr)\ndef index_recalibrated_bams(in_file, out_file):\n  '''\n  Index the bam files using Samtools index (room for using Picard)\n  '''\n  #index_recalibrated_alignment(in_file,out_file)\n\n  cmd = 'samtools'\n\n  cmd_args = ['index', in_file]\n\n  run_cmd(cmd, cmd_args)\n\n\n'''\n  This is the difference with the indel_realignment_pipeline\n  In the following secion we will add a couple of other steps from the GATK protocol\n  We need to call variants (SNPs, Indels, SV) using HaplotypeCaller for better accuracy\n  I anticipate UnifiedGenotyper to be discontinued in the future, So I prefer using HC and upgrading later\n  So what we will be adding here :\n\n   - Call HaplotypeCaller\n       INPUT  : realigned Bam file\n       OUTPUT : VCF\n   - Generate VCFs for each Bam file\n   - Merge VCFs for all the samples\n       INPUT  : VCFs\n       OUTPUT : One VCF\n   - Convert the merged VCF to a bed file (<experiment_id>_positions.tsv)\n\n'''\n\n\n@posttask(success)\n@follows(index_recalibrated_bams)\n@transform(sort_recalibrated_bams, regex(r'(.*)/realigned/(.*)\\.sorted\\.bam'),r'\\1/calls/\\2.vcf')\n@timer(sys.stderr)\ndef call_variant(in_file, out_file):\n  '''\n  Call HaplotypeCaller with its default parameters\n  '''\n  make_parent_directory(out_file)\n  cmd = java\n  cmd_args = [\"-Xmx4g\", \"-jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"HaplotypeCaller\",\n             \"-R\",config['ref_genome'],\n             \"-I\",in_file,\n             \"-o\",out_file,\n             \"-stand_call_conf\", 30,\n             \"-stand_emit_conf\", 10,\n             \"-minPruning\", 3\n             ]\n\n  run_cmd(cmd, cmd_args, max_mem=16)\n\n\n@posttask(success)\n#@transform(call_variant, regex(r'(.*)/calls/(.*)\\.vcf'), r'\\1/calls/merged_variants.vcf')\n@merge(call_variant, r'{0}/merged_calls/{1}.vcf'.format(os.path.join(config['out_dir'],\"tmp\"), 'merged_variants'))\n@timer(sys.stderr)\ndef merge_vcfs(vcf_files, merged_vcf_file):\n  make_parent_directory(merged_vcf_file)\n  with open(merged_vcf_file, 'a') as ofile:\n    for vcf_file in vcf_files:\n      vf = open(vcf_file,'r')\n      lines = vf.readlines()\n      for l in lines:\n        if l.startswith('#'):\n          continue\n        else:\n          print >> ofile,l\n\n\n@posttask(success)\n@transform(merge_vcfs, regex(r'(.*)/merged_calls/(.*)\\.vcf'),r'\\1/positions/\\2_positions.tsv')\n@timer(sys.stderr)\ndef create_positions(merged_vcf, positions_file):\n  make_parent_directory(positions_file)\n  # line to be parsed :\n  #20     14370   rs6054257 G      A       29   PASS   NS=3;DP=14;AF=0.5;DB;H2           GT:GQ:DP:HQ 0|0:48:1:51,51 1|0:48:8:51,51 1/1:43:5:.,.\n  with open(positions_file,'a') as pos_file:\n    with open(merged_vcf,'r') as merge_file:\n      for line in merge_file :\n        if len(line) > 1 :\n          columns = line.split(\"\\t\")\n          outline = [chrom, position, name, ref_allele, alt_allele] = [columns[0],columns[1],columns[2],columns[3],columns[4]]\n          pos_file.write(\"\\t\".join(outline[i] for i in range(5)))\n          pos_file.write(\"\\n\")\n\n\n# We need now to filter out all positions not present in the targets regions\n# The targets regions should be in tabular format. Example :\n# <chr>  <amplicon_start>  <amplicon_end>\n\n@posttask(success)\n@transform(create_positions, regex(r'(.*)/positions/(.*)\\.tsv'), add_inputs(args.targets), r'\\1/positions/\\2_filtered.tsv' )\n@timer(sys.stderr)\ndef filter_positions_in_amplicon(coordinates, result):\n\n  merged_positions = coordinates[0]\n  positions_file = coordinates[1]\n  with open(result+\"_tmp\",'w') as intersect:\n    with open(merged_positions,'r') as merge_file:\n      for line in merge_file :\n        if len(line) > 1 :\n          columns = line.strip().split(\"\\t\")\n          #print columns\n          outline = [chrom, position, name, ref_allele, alt_allele] = [columns[0],columns[1],columns[2],columns[3],columns[4]]\n          candidate_position = position\n\n          if(len(columns[3])==1 and len(columns[4])==1):\n            with open(positions_file, 'r') as pos_file:\n              for posline in pos_file :\n                if len(posline) > 1 :\n                  pos_columns = posline.strip().split(\"\\t\")\n                  pos_outline = [pos_chrom, amplicon_start, amplicon_end] = [pos_columns[0],pos_columns[1], pos_columns[2]]\n                  if(candidate_position > amplicon_start) and (candidate_position < amplicon_end):\n                    #print \"found\"\n                    row = [chrom, candidate_position, ref_allele, alt_allele, amplicon_start, amplicon_end]\n                    intersect.write(\"\\t\".join(row[i] for i in range(6)))\n                    intersect.write(\"\\n\")\n\n  sort_tmp_results(result, result+\"_tmp\")\n\n\n### Discovery mode ends here\n\n\n@follows(filter_positions_in_amplicon)\n#@files(config['positions_file'],\n#       os.path.join(config['out_dir'], 'tmp', 'amplicon_positions', '{0}.tsv'.format(config['analysis_id'])))\n@transform(filter_positions_in_amplicon, regex(r'(.*)/positions/(.*)\\_filtered.tsv'), os.path.join(config['out_dir'], 'tmp', 'amplicon_positions', '{0}.tsv'.format(config['analysis_id'])) )\n@timer(sys.stderr)\ndef build_amplicon_positions_file(in_file, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [build_amplicon_positions_file_script, in_file, out_file]\n\n    run_cmd(cmd, cmd_args)\n\n@follows(build_amplicon_positions_file)\n@transform(sort_recalibrated_bams,\n           regex(r'(.*)/realigned/(.*)\\.sorted\\.bam'),\n           add_inputs(build_amplicon_positions_file),\n           r'\\1/counts/\\2.tsv',\n           bam_to_counts_script)\n@timer(sys.stderr)\ndef build_counts_file(in_files, counts_file, script):\n    make_parent_directory(counts_file)\n\n    cmd = 'python'\n\n    bam_file = in_files[0]\n\n    positions_file = in_files[1]\n\n    cmd_args = [\n                script,\n                bam_file,\n                counts_file,\n                '--positions_file', positions_file,\n                '--count_duplicates',\n                '--min_bqual', config['min_bqual'],\n                '--min_mqual', config['min_mqual'],\n                '--ref_genome', config['ref_genome'],\n                '--ref_base',\n                '--var_base'\n                ]\n\n    run_cmd(cmd, cmd_args)\n\n@transform(build_counts_file, regex('(.*)/counts/(.*)\\.tsv'), r'\\1/variant_status/\\2.tsv')\n@timer(sys.stderr)\ndef do_binomial_exact_test(in_file, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [\n                do_binomial_exact_test_script,\n                in_file,\n                config['positions_file'],\n                out_file,\n                '--family_wise_error_rate', config['family_wise_error_rate'],\n                '--low_coverage_threshold', config['low_coverage_threshold']\n                ]\n\n    print str(cmd_args)\n\n    run_cmd(cmd, cmd_args)\n\n@merge(do_binomial_exact_test, r'{0}/results/{1}.xls'.format(config['out_dir'], config['analysis_id']))\n@timer(sys.stderr)\ndef build_summary_file(in_files, out_file):\n    make_parent_directory(out_file)\n\n    cmd = 'python'\n\n    cmd_args = [\n                build_results_file_script,\n                out_file\n                ]\n\n    sample_ids = [os.path.splitext(os.path.basename(file_name))[0] for file_name in in_files]\n\n    cmd_args.append('--sample_ids')\n    cmd_args.extend(sample_ids)\n\n    cmd_args.append('--variant_call_files')\n    cmd_args.extend(in_files)\n\n    if 'normal_sample' in config:\n        cmd_args.extend(['--normal_sample', config['normal_sample']])\n\n    run_cmd(cmd, cmd_args)\n\n@follows(build_summary_file)\ndef end():\n    pass\n\n#=======================================================================================================================\n# Run pipeline\n#=======================================================================================================================\nif args.mode in ['cluster', 'local']:\n    if args.mode == 'cluster':\n        from pipelines.job_manager import ClusterJobManager\n\n        import datetime\n\n        log_dir = os.path.join(config['out_dir'], 'log', datetime.datetime.now().isoformat(','))\n\n        job_manager = ClusterJobManager(log_dir)\n\n    elif args.mode == 'local':\n        from pipelines.job_manager import LocalJobManager\n\n        job_manager = LocalJobManager()\n\n    run_cmd = job_manager.run_job\n\n    try:\n#        pipeline_run(end, multiprocess=args.num_cpus) #, use_multi_threading=True)\n        pipeline_run(end, verbose=2,multithread=args.num_cpus, checksum_level=CHECKSUM_FILE_TIMESTAMPS)\n\n\n    finally:\n        job_manager.close()\n\nelif args.mode == 'printout':\n    import sys\n\n    pipeline_printout(sys.stdout, end, verbose=3, wrap_width=200)\n    #pipeline_printout_graph (\"discovery_pipeline.png\", \"png\", end,test_all_task_for_update = False, pipeline_name=\"Targeted Sequencing Discovery Mode\", user_colour_scheme = {\"colour_scheme_index\" :6})\nif args.email :\n\n    SUBJ = \"Your Targeted Sequencing Pipeline was successful\"\n    MESS = \"Hi There, your TSP job is done, please review the result directory for sanity check\"\n\n    notify_user(args.email, SUBJ ,MESS, \"DeepSequencingPipeline\");","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/test.py","modifiedWhenLastPersisted":true,"digestWhenLastPersisted":"cd2398d64badd50c6b955ec618619d94d5bccb92","deserializer":"TextBuffer"},{"text":"- analyze the 48 positions\n- check the new pipeline with the case that failed for Adi\n- pack andy's code\n\n\n\n- Hans : Run HmmCopy : large bins\n","markers":{"markers":{"1":{"id":1,"range":[[5,0],[5,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":135,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"properties":{"type":"selection","editorId":135}},"newParams":{"properties":{"type":"selection","editorId":135,"goalBufferRange":null}},"deserializer":"MarkerPatch"},{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,1],[0,1]],"newRange":[[0,1],[0,2]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,2],[0,2]],"newRange":[[0,2],[0,3]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,3],[0,3]],"newRange":[[0,3],[0,4]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,4],[0,4]],"newRange":[[0,4],[0,5]],"oldText":"","newText":"y","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,5],[0,5]],"newRange":[[0,5],[0,6]],"oldText":"","newText":"z","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,6],[0,6]],"newRange":[[0,6],[0,7]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,7],[0,7]],"newRange":[[0,7],[0,8]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,8],[0,8]],"newRange":[[0,8],[0,9]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,9],[0,9]],"newRange":[[0,9],[0,10]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,10],[0,10]],"newRange":[[0,10],[0,11]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,11],[0,11]],"newRange":[[0,11],[0,12]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,12],[0,12]],"newRange":[[0,12],[0,13]],"oldText":"","newText":"4","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,13],[0,13]],"newRange":[[0,13],[0,14]],"oldText":"","newText":"8","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,14],[0,14]],"newRange":[[0,14],[0,15]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,15],[0,15]],"newRange":[[0,15],[0,16]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,16],[0,16]],"newRange":[[0,16],[0,17]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,17],[0,17]],"newRange":[[0,17],[0,18]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,18],[0,18]],"newRange":[[0,18],[0,19]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,19],[0,19]],"newRange":[[0,19],[0,20]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,20],[0,20]],"newRange":[[0,20],[0,21]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,21],[0,21]],"newRange":[[0,21],[0,22]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,22],[0,22]],"newRange":[[0,22],[0,23]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,23],[0,23]],"newRange":[[0,23],[0,24]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,24],[0,24]],"newRange":[[0,24],[1,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,1],[1,1]],"newRange":[[1,1],[1,2]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,2],[1,2]],"newRange":[[1,2],[1,3]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,3],[1,3]],"newRange":[[1,3],[1,4]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,4],[1,4]],"newRange":[[1,4],[1,5]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,5],[1,5]],"newRange":[[1,5],[1,6]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,6],[1,6]],"newRange":[[1,6],[1,7]],"oldText":"","newText":"k","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,7],[1,7]],"newRange":[[1,7],[1,8]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,8],[1,8]],"newRange":[[1,8],[1,9]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,9],[1,9]],"newRange":[[1,9],[1,10]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,10],[1,10]],"newRange":[[1,10],[1,11]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,11],[1,11]],"newRange":[[1,11],[1,12]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,12],[1,12]],"newRange":[[1,12],[1,13]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,13],[1,13]],"newRange":[[1,13],[1,14]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,14],[1,14]],"newRange":[[1,14],[1,15]],"oldText":"","newText":"w","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,15],[1,15]],"newRange":[[1,15],[1,16]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,16],[1,16]],"newRange":[[1,16],[1,17]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,17],[1,17]],"newRange":[[1,17],[1,18]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,18],[1,18]],"newRange":[[1,18],[1,19]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,19],[1,19]],"newRange":[[1,19],[1,20]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,20],[1,20]],"newRange":[[1,20],[1,21]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,21],[1,21]],"newRange":[[1,21],[1,22]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,22],[1,22]],"newRange":[[1,22],[1,23]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,23],[1,23]],"newRange":[[1,23],[1,24]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,24],[1,24]],"newRange":[[1,24],[1,25]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,25],[1,25]],"newRange":[[1,25],[1,26]],"oldText":"","newText":"w","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,26],[1,26]],"newRange":[[1,26],[1,27]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,27],[1,27]],"newRange":[[1,27],[1,28]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,28],[1,28]],"newRange":[[1,28],[1,29]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,29],[1,29]],"newRange":[[1,29],[1,30]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,30],[1,30]],"newRange":[[1,30],[1,31]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,31],[1,31]],"newRange":[[1,31],[1,32]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,32],[1,32]],"newRange":[[1,32],[1,33]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,33],[1,33]],"newRange":[[1,33],[1,34]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,34],[1,34]],"newRange":[[1,34],[1,35]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,35],[1,35]],"newRange":[[1,35],[1,36]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,36],[1,36]],"newRange":[[1,36],[1,37]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,37],[1,37]],"newRange":[[1,37],[1,38]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,38],[1,38]],"newRange":[[1,38],[1,39]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,39],[1,39]],"newRange":[[1,39],[1,40]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,40],[1,40]],"newRange":[[1,40],[1,41]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,41],[1,41]],"newRange":[[1,41],[1,42]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,42],[1,42]],"newRange":[[1,42],[1,43]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,43],[1,43]],"newRange":[[1,43],[1,44]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,44],[1,44]],"newRange":[[1,44],[1,45]],"oldText":"","newText":"f","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,45],[1,45]],"newRange":[[1,45],[1,46]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,46],[1,46]],"newRange":[[1,46],[1,47]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,47],[1,47]],"newRange":[[1,47],[1,48]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,48],[1,48]],"newRange":[[1,48],[1,49]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,49],[1,49]],"newRange":[[1,49],[1,50]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,50],[1,50]],"newRange":[[1,50],[1,51]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,51],[1,51]],"newRange":[[1,51],[1,52]],"oldText":"","newText":"f","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,52],[1,52]],"newRange":[[1,52],[1,53]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,53],[1,53]],"newRange":[[1,53],[1,54]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,54],[1,54]],"newRange":[[1,54],[1,55]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,55],[1,55]],"newRange":[[1,55],[1,56]],"oldText":"","newText":"A","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,56],[1,56]],"newRange":[[1,56],[1,57]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,57],[1,57]],"newRange":[[1,57],[1,58]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,58],[1,58]],"newRange":[[1,58],[2,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[0,1],[0,1]],"newRange":[[0,1],[0,2]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,1]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,1],[2,1]],"newRange":[[2,1],[2,2]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,2],[2,2]],"newRange":[[2,2],[2,3]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,3],[2,3]],"newRange":[[2,3],[2,4]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,4],[2,4]],"newRange":[[2,4],[2,5]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,5],[2,5]],"newRange":[[2,5],[2,6]],"oldText":"","newText":"k","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,6],[2,6]],"newRange":[[2,6],[2,7]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,7],[2,7]],"newRange":[[2,7],[2,8]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,8],[2,8]],"newRange":[[2,8],[2,9]],"oldText":"","newText":"h","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,9],[2,9]],"newRange":[[2,9],[2,10]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,10],[2,10]],"newRange":[[2,10],[2,11]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,11],[2,11]],"newRange":[[2,11],[2,12]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,12],[2,12]],"newRange":[[2,12],[2,13]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,13],[2,13]],"newRange":[[2,13],[2,14]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[2,14],[2,14]]},"newParams":{"reversed":true,"range":[[2,13],[2,14]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,13],[2,14]],"newRange":[[2,13],[2,13]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,13],[2,13]]},"newParams":{"range":[[2,12],[2,13]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,12],[2,13]],"newRange":[[2,12],[2,12]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,12],[2,12]]},"newParams":{"range":[[2,11],[2,12]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,11],[2,12]],"newRange":[[2,11],[2,11]],"oldText":"m","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,11],[2,11]]},"newParams":{"range":[[2,10],[2,11]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,10],[2,11]],"newRange":[[2,10],[2,10]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,10],[2,10]]},"newParams":{"range":[[2,9],[2,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,9],[2,10]],"newRange":[[2,9],[2,9]],"oldText":"e","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,9],[2,9]]},"newParams":{"range":[[2,8],[2,9]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,8],[2,9]],"newRange":[[2,8],[2,8]],"oldText":"h","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[2,8],[2,8]]},"newParams":{"range":[[2,7],[2,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[2,7],[2,8]],"newRange":[[2,7],[2,7]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,7],[2,7]],"newRange":[[2,7],[2,8]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,8],[2,8]],"newRange":[[2,8],[2,9]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,9],[2,9]],"newRange":[[2,9],[2,10]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,10],[2,10]],"newRange":[[2,10],[2,11]],"oldText":"","newText":"y","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,11],[2,11]],"newRange":[[2,11],[2,12]],"oldText":"","newText":"'","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,12],[2,12]],"newRange":[[2,12],[2,13]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,13],[2,13]],"newRange":[[2,13],[2,14]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,14],[2,14]],"newRange":[[2,14],[2,15]],"oldText":"","newText":"c","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,15],[2,15]],"newRange":[[2,15],[2,16]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,16],[2,16]],"newRange":[[2,16],[2,17]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,17],[2,17]],"newRange":[[2,17],[2,18]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[2,18],[2,18]],"newRange":[[2,18],[3,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[3,0],[3,0]],"newRange":[[3,0],[3,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[3,0],[3,0]],"newRange":[[3,0],[4,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[4,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[5,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[5,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[5,1]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,1],[5,1]],"newRange":[[5,1],[5,2]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,2],[5,2]],"newRange":[[5,2],[5,3]],"oldText":"","newText":"H","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,3],[5,3]],"newRange":[[5,3],[5,4]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,4],[5,4]],"newRange":[[5,4],[5,5]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,5],[5,5]],"newRange":[[5,5],[5,6]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,6],[5,6]],"newRange":[[5,6],[5,7]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,7],[5,7]],"newRange":[[5,7],[5,8]],"oldText":"","newText":":","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,8],[5,8]],"newRange":[[5,8],[5,9]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,9],[5,9]],"newRange":[[5,9],[5,10]],"oldText":"","newText":"R","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,10],[5,10]],"newRange":[[5,10],[5,11]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,11],[5,11]],"newRange":[[5,11],[5,12]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,12],[5,12]],"newRange":[[5,12],[5,13]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,13],[5,13]],"newRange":[[5,13],[5,14]],"oldText":"","newText":"H","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,14],[5,14]],"newRange":[[5,14],[5,15]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,15],[5,15]],"newRange":[[5,15],[5,16]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,16],[5,16]],"newRange":[[5,16],[5,17]],"oldText":"","newText":"C","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,17],[5,17]],"newRange":[[5,17],[5,18]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,18],[5,18]],"newRange":[[5,18],[5,19]],"oldText":"","newText":"p","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,19],[5,19]],"newRange":[[5,19],[5,20]],"oldText":"","newText":"y","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,20],[5,20]],"newRange":[[5,20],[5,21]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,21],[5,21]],"newRange":[[5,21],[5,22]],"oldText":"","newText":":","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,22],[5,22]],"newRange":[[5,22],[5,23]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,23],[5,23]],"newRange":[[5,23],[5,24]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,24],[5,24]],"newRange":[[5,24],[5,25]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,25],[5,25]],"newRange":[[5,25],[5,26]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,26],[5,26]],"newRange":[[5,26],[5,27]],"oldText":"","newText":"g","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,27],[5,27]],"newRange":[[5,27],[5,28]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,28],[5,28]],"newRange":[[5,28],[5,29]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,29],[5,29]],"newRange":[[5,29],[5,30]],"oldText":"","newText":"b","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,30],[5,30]],"newRange":[[5,30],[5,31]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,31],[5,31]],"newRange":[[5,31],[5,32]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,32],[5,32]],"newRange":[[5,32],[5,33]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[5,33],[5,33]]},"newParams":{"range":[[5,32],[5,33]]},"deserializer":"MarkerPatch"},{"oldRange":[[5,32],[5,33]],"newRange":[[5,32],[5,32]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[5,32],[5,32]]},"newParams":{"range":[[5,31],[5,32]]},"deserializer":"MarkerPatch"},{"oldRange":[[5,31],[5,32]],"newRange":[[5,31],[5,31]],"oldText":"n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[5,31],[5,31]]},"newParams":{"range":[[5,30],[5,31]]},"deserializer":"MarkerPatch"},{"oldRange":[[5,30],[5,31]],"newRange":[[5,30],[5,30]],"oldText":"o","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,30],[5,30]],"newRange":[[5,30],[5,31]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,31],[5,31]],"newRange":[[5,31],[5,32]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,32],[5,32]],"newRange":[[5,32],[5,33]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,33],[5,33]],"newRange":[[5,33],[6,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[6,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[7,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[7,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[6,0],[7,0]],"newRange":[[6,0],[6,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[5,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[5,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/tasks","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a7fbc6c7a88e19839a043d04fd4b588e220cc327","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":11,"softTabs":true,"displayBuffer":{"id":12,"softWrap":false,"editorWidthInChars":152,"scrollTop":159,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_main.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":135,"softTabs":true,"displayBuffer":{"id":136,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/tasks","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":96,"softTabs":true,"displayBuffer":{"id":97,"softWrap":true,"editorWidthInChars":147,"scrollTop":70,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":15,"softTabs":true,"displayBuffer":{"id":16,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_params.py","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":23,"softTabs":true,"displayBuffer":{"id":24,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_ui.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":112,"softTabs":true,"displayBuffer":{"id":113,"softWrap":false,"editorWidthInChars":152,"scrollTop":3519,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/test.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":19,"softTabs":true,"displayBuffer":{"id":20,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_reqs.py","tabLength":16,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/test.py","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"find-and-replace":{"viewState":{"findHistory":["requi"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_main.py":1402764928928,"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/tasks":1403282795736,"/Users/Rad/Documents/Scripts/plumber_components/Notes_To_Jafar":1403311905853,"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_params.py":1402586900489,"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_ui.py":1402586903586,"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/test.py":1403460389859,"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/component_reqs.py":1402545078515},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1515788807},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/Rad/Documents/Scripts/plumber_components/components/reheader/test.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}