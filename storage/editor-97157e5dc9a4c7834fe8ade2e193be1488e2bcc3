{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":732},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/Rad/Documents/Scripts/indel_realignment_pipeline","buffers":[{"text":"from pipelines.io import make_directory, make_parent_directory\nfrom ruffus import *\nfrom ruffus.ruffus_utility import CHECKSUM_FILE_TIMESTAMPS\nfrom glob import *\nimport subprocess\nfrom subprocess import check_output\nfrom subprocess import Popen, PIPE\nimport argparse\nimport os,sys\nimport yaml\nimport time\nfrom termcolor import colored\nimport functools\n\n#=======================================================================================================================\n# Read Command Line Input\n#=======================================================================================================================\n\n\nparser = argparse.ArgumentParser(description='A python wrapper for GATK best practices guide (no variant call, just realignment)')\n\n\nparser.add_argument('--input_dir',\n                    help='''Input is a directory containing Bam files to be realigned''')\n\nparser.add_argument('--output_dir',\n                    help='''Output is a directory containing subfolders for targets, realignments, deduplicated bam files etc''')\n\nparser.add_argument('--config_file',\n                   help='''Path to yaml config file.''')\n\n\nparser.add_argument('--num_cpus', type=int, default=1,\n                    help='''Number of cpus to use for the analysis. If set to -1 then as many cpus as samples will\n                    be used. Default is 1.''')\n\nparser.add_argument('--mode', choices=['local', 'cluster', 'printout'], default='printout',\n                    help='''Mode to run the pipeline in. local will run the pipeline on the compute it was launched\n                    from. cluster will submit the jobs to a cluster using SGE. printout shows which tasks will be\n                    run. default is printout.''')\n\n\n\nargs = parser.parse_args()\n\n\nfh = open(args.config_file)\nconfig = yaml.load(fh)\nfh.close()\n\n\ngatk  = config['gatk']\npicard = config['picard']\nreference = config['reference']\ndbsnp  = config['dbsnp']\nindels = config['indels']\njava = config['java']\n\n\nmandatory_env = [gatk, picard, reference, dbsnp, indels, java]\n\n\ndef timer(stream=sys.stdout):\n    \"\"\"The timer decorator wraps a function and prints elapsed time to standard\n    out, or any other file-like object with a .write() method.\n    \"\"\"\n    def actual_timer(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # Start the timer.\n            start = time.time()\n            # Run the decorated function.\n            ret = func(*args, **kwargs)\n            # Stop the timer.\n            end = time.time()\n            elapsed = end - start\n            name = func.__name__\n            stream.write(colored(\"{} took {} seconds\\n\".format(name, elapsed), 'red', attrs=['bold'] ))\n            # Return the decorated function's return value.\n            return ret\n        return wrapper\n    return actual_timer\n\n\ndef check_config_params():\n  for env in mandatory_env:\n    if env.__len__() == 0 :\n      print >> sys.stderr, \"It seems that one third party tool is not defined in the config file, please check your config file\"\n      sys.exit(1)\n\n\ndef success():\n  print >> sys.stderr , colored('   Task successfully finished   ', 'white', 'on_red', attrs=['blink'])\n\n\n\n#=======================================================================================================================\n# Start the Realignment pipeline\n#=======================================================================================================================\n\n\ncheck_config_params()\n\n\n@timer(sys.stderr)\n@posttask(success)\ndef load_bam_files():\n  #bam_files = glob(os.path.join(os.path.normpath(\".\",args.input_dir, '*.bam'))\n  for path,subdir,files in os.walk(args.input_dir):\n    for file in files :\n      if file.endswith(\".bam\"):\n        in_file = os.path.abspath(os.path.join(args.input_dir,file))\n        out_file = os.path.abspath(os.path.join(args.output_dir,\"bam/\",file)).replace(\".bam\",\".sorted.bam\")\n        yield [in_file,out_file]\n\n\n@posttask(success)\n@files(load_bam_files)\n@timer(sys.stderr)\ndef sort_mapped_reads(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n\n\n    make_parent_directory(out_file)\n    #sort_recalibrated_alignment(in_file,out_file)\n    out_prefix = out_file.replace(\".bam\", \"\")\n    cmd = 'samtools'\n\n    cmd_args = ['sort', in_file, out_prefix]\n\n    run_cmd(cmd, cmd_args)\n\n\n\n@posttask(success)\n@transform(sort_mapped_reads, regex(r'(.*)/bam/(.*)\\.bam'), r\"\\1/dedup/\\2.dedup.bam\")\n@timer(sys.stderr)\ndef deduplicate(bam_sorted, bam_deduplicated):\n  '''\n  Remove PCR amplification identical reads\n  '''\n  #dedup(bam_duplicated, bam_deduplicated)\n\n  make_parent_directory(bam_deduplicated)\n\n  cmd = java\n  cmd_args = [\"-Xmx4g -jar\", os.path.join(picard,\"MarkDuplicates.jar\"),\n             ''.join([\"INPUT=\",bam_sorted]),\n             ''.join([\"OUTPUT=\",bam_deduplicated]),\n             \"METRICS_FILE=metrics.txt\"\n              ]\n  run_cmd(cmd,cmd_args)\n\n\n@posttask(success)\n@transform(deduplicate, regex(r'(.*)/dedup/(.*)\\.dedup\\.bam'), '.bai')\n@timer(sys.stderr)\ndef index_mapped_reads(in_file, out_file):\n    '''\n    Sort the bam files using Samtools sort (room for using Picard)\n    '''\n    #make_parent_directory(out_file)\n\n    #sort_recalibrated_alignment(in_file,out_file)\n    #out_prefix = out_file.replace(\".bam\", \"\")\n\n    cmd = 'samtools'\n\n    cmd_args = ['index', in_file]\n\n    run_cmd(cmd, cmd_args)\n\n\n@posttask(success)\n@follows(index_mapped_reads)\n@transform(deduplicate, regex(r'(.*)/dedup/(.*)\\.dedup\\.bam'), r'\\1/intervals/\\2.intervals')\n@timer(sys.stderr)\ndef create_targets(in_file, out_file):\n  '''\n  GATK RealignerTargetCreator : Create suspecious regions where a realignment will be done\n  '''\n\n  make_parent_directory(out_file)\n\n  #create_target(in_file,out_file)\n  cmd = java\n  cmd_args = [\"-Xmx4g -jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"RealignerTargetCreator\",\n             \"-R\",config['reference'],\n             \"-I\",in_file,\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n\n@posttask(success)\n@transform(create_targets, regex(r'(.*)/intervals/(.*)\\.intervals'), add_inputs(r'\\1/dedup/\\2.dedup.bam'),r'\\1/realigned/\\2.realigned.bam')\n@timer(sys.stderr)\ndef realign(in_files, out_file):\n  '''\n  GATK IndelRealigner\n  '''\n  #realign(in_file,out_file)\n\n  make_parent_directory(out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g -jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n           \"-T\",\"IndelRealigner\",\n           \"-R\",config['reference'],\n           \"-targetIntervals\",in_files[0],\n           \"-I\",in_files[1],\n           \"-o\",out_file\n           ]\n  run_cmd(cmd, cmd_args)\n\n\n\n@posttask(success)\n@transform(realign,regex(r'(.*)/realigned/(.*)\\.realigned\\.bam'),r'\\1/realigned/\\2.realigned.grp')\n@timer(sys.stderr)\ndef base_quality_recalibrator_pre(in_file, out_file):\n  '''\n  GATK recalibrate 1\n\n  '''\n  #recalibrate(in_file, out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g -jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"BaseRecalibrator\",\n             \"-R\",config['reference'],\n             \"-knownSites\", config['dbsnp'],\n #            \"-knownSites\", config['indels'],\n             \"-I\",in_file,\n             \"-o\",out_file,\n             #\"-plots\",\"recal.grp.pdf\"\n             ]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n@posttask(success)\n@follows(base_quality_recalibrator_pre)\n@transform(realign,regex(r'(.*)/realigned/(.*)\\.realigned\\.bam'), add_inputs(r'\\1/realigned/\\2.realigned.grp') , r'\\1/realigned/\\2.post_recal.grp2')\n@timer(sys.stderr)\ndef base_quality_recalibrator_post(in_files, out_file):\n  '''\n  GATK recalibrate 2nd step\n  '''\n  #recalibrate(in_file, out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g -jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"BaseRecalibrator\",\n             \"-R\",config['reference'],\n             \"-I\",in_files[0],\n             \"-BQSR\", in_files[1],\n             \"-knownSites\", config['dbsnp'],\n             \"-o\",out_file,\n             #\"-plots\",\"post_recal.grp.pdf\"\n             ]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n\n\n@posttask(success)\n@follows(base_quality_recalibrator_post)\n@transform(base_quality_recalibrator_pre, regex(r'(.*)/realigned/(.*)\\.grp'), add_inputs(r'\\1/realigned/\\2.bam'),r'\\1/realigned/\\2.recalibrated.bam')\n@timer(sys.stderr)\ndef print_reads(in_files, out_file):\n  '''\n  GATK Get the recalibrated alignment\n  '''\n  #print_reads(in_file,out_file)\n\n  cmd = java\n\n  cmd_args = [\"-Xmx4g -jar\", os.path.join(gatk,\"GenomeAnalysisTK.jar\"),\n             \"-T\",\"PrintReads\",\n             \"-R\",config['reference'],\n             \"-I\",in_files[1],\n             \"-BQSR\", in_files[0],\n             \"-o\",out_file\n             ]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n\n@posttask(success)\n@transform(print_reads, regex(r'(.*)/realigned/(.*)\\.recalibrated\\.bam'),r'\\1/realigned/\\2.sorted.bam')\n@timer(sys.stderr)\ndef sort_recalibrated_bams(in_file, out_file):\n  '''\n  Sort the bam files using Samtools sort (room for using Picard)\n  '''\n  #sort_recalibrated_alignment(in_file,out_file)\n\n  out_prefix = out_file.replace(\".bam\",\"\")\n  cmd = 'samtools'\n\n  cmd_args = ['sort', in_file, out_prefix]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n\n@posttask(success)\n@transform(sort_recalibrated_bams,regex(r'(.*)/realigned/(.*)\\.sorted\\.bam'),r'\\1/realigned/\\2.sorted.indexed.bam')\n@timer(sys.stderr)\ndef index_recalibrated_bams(in_file, out_file):\n  '''\n  Index the bam files using Samtools index (room for using Picard)\n  '''\n  #index_recalibrated_alignment(in_file,out_file)\n\n  cmd = 'samtools'\n\n  cmd_args = ['index', in_file]\n\n  run_cmd(cmd, cmd_args)\n\n\n\n@follows(index_recalibrated_bams)\ndef end():\n    pass\n\n\n\n#=======================================================================================================================\n# Run pipeline\n#=======================================================================================================================\nif args.mode in ['cluster', 'local']:\n    if args.mode == 'cluster':\n        from pipelines.job_manager import ClusterJobManager\n\n        import datetime\n\n        log_dir = os.path.join(config['log_dir'], 'log', datetime.datetime.now().isoformat(','))\n\n        job_manager = ClusterJobManager(log_dir)\n\n    elif args.mode == 'local':\n        from pipelines.job_manager import LocalJobManager\n\n        job_manager = LocalJobManager()\n\n    run_cmd = job_manager.run_job\n\n    try:\n#        pipeline_run([base_quality_recalibrator_post,print_reads,sort_recalibrated_bams,index_recalibrated_bams], multiprocess=args.num_cpus) #, use_multi_threading=True)\n       \tpipeline_run(end, multithread=args.num_cpus, checksum_level=CHECKSUM_FILE_TIMESTAMPS)\n\n\n    finally:\n        job_manager.close()\n\nelif args.mode == 'printout':\n    import sys\n\n    pipeline_printout(sys.stdout, end, verbose=3, wrap_width=200)\n","markers":{"markers":{"1":{"id":1,"range":[[21,0],[21,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[20,0],[20,0]],"newRange":[[20,0],[21,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[21,0],[21,0]],"newRange":[[21,0],[21,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Rad/Documents/Scripts/indel_realignment_pipeline/realign.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"160dcbbecdbad9b9cafb05388423819be09f78c4","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrap":false,"editorWidthInChars":146,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Rad/Documents/Scripts/indel_realignment_pipeline/realign.py","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/Rad/Documents/Scripts/indel_realignment_pipeline/realign.py","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"script":{"scriptOptionsViewState":""},"fuzzy-finder":{"/Users/Rad/Documents/Scripts/indel_realignment_pipeline/realign.py":1401333778428},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":768641297},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/Rad/Documents/Scripts/indel_realignment_pipeline/realign.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}