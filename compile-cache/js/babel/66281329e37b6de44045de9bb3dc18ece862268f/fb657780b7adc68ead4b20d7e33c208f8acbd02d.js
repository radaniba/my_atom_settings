function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

var goodPath = path.join(__dirname, 'fixtures', 'good.py');
var badPath = path.join(__dirname, 'fixtures', 'bad.py');
var errwarnPath = path.join(__dirname, 'fixtures', 'errwarn.py');
var fixturePath = path.join(__dirname, 'fixtures');

describe('The flake8 provider for Linter', function () {
  var lint = require('../lib/main').provideLinter().lint;

  beforeEach(function () {
    waitsForPromise(function () {
      return Promise.all([atom.packages.activatePackage('linter-flake8'), atom.packages.activatePackage('language-python').then(function () {
        return atom.workspace.open(goodPath);
      })]);
    });
  });

  it('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-flake8')).toBe(true);
  });

  it('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-flake8')).toBe(true);
  });

  describe('checks bad.py and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies that message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Warning');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBeDefined();
          expect(messages[0].text).toEqual('F821 â€” undefined name \'asfd\'');
          expect(messages[0].filePath).toBeDefined();
          expect(messages[0].filePath).toMatch(/.+spec[\\\/]fixtures[\\\/]bad\.py$/);
          expect(messages[0].range).toBeDefined();
          expect(messages[0].range.length).toEqual(2);
          expect(messages[0].range).toEqual([[0, 0], [0, 4]]);
        });
      });
    });

    it('checks that the message is an error if flakeErrors is set', function () {
      atom.config.set('linter-flake8.flakeErrors', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Error');
        });
      });
    });
  });

  describe('checks errwarn.py and', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(errwarnPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('finds the message is a warning if pep8ErrorsToWarnings is set', function () {
      atom.config.set('linter-flake8.pep8ErrorsToWarnings', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Warning');
        });
      });
    });

    it('finds the message is an error if pep8ErrorsToWarnings is set', function () {
      atom.config.set('linter-flake8.pep8ErrorsToWarnings', false);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Error');
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toEqual(0);
        });
      });
    });
  });

  describe('executable path', function () {
    var helpers = require('atom-linter');
    var editor = null;
    var execSpy = null;
    function fakeExec() {
      return new Promise(function (resolve) {
        return resolve('');
      });
    }

    beforeEach(function () {
      atom.project.addPath(fixturePath);

      execSpy = spyOn(helpers, 'exec').andCallFake(fakeExec);

      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds executable relative to project', function () {
      waitsForPromise(function () {
        atom.config.set('linter-flake8.executablePath', path.join('$PROJECT', 'flake8'));
        return lint(editor).then(function () {
          expect(execSpy.mostRecentCall.args[0]).toEqual(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('normalizes executable path', function () {
      waitsForPromise(function () {
        atom.config.set('linter-flake8.executablePath', path.join(fixturePath, '..', 'fixtures', 'flake8'));
        return lint(editor).then(function () {
          expect(execSpy.mostRecentCall.args[0]).toEqual(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds backup executable', function () {
      waitsForPromise(function () {
        var flakeNotFound = path.join('$PROJECT', 'flake8_notfound');
        var flakeBackup = path.join(fixturePath, 'flake8_backup');
        atom.config.set('linter-flake8.executablePath', flakeNotFound + ';' + flakeBackup);
        return lint(editor).then(function () {
          expect(execSpy.mostRecentCall.args[0]).toEqual(path.join(fixturePath, 'flake8_backup'));
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9SYWQvLmF0b20vcGFja2FnZXMvbGludGVyLWZsYWtlOC9zcGVjL2xpbnRlci1mbGFrZTgtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztvQkFFc0IsTUFBTTs7SUFBaEIsSUFBSTs7QUFGaEIsV0FBVyxDQUFDOztBQUlaLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM3RCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0QsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ25FLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDOztBQUVyRCxRQUFRLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtBQUMvQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDOztBQUV6RCxZQUFVLENBQUMsWUFBTTtBQUNmLG1CQUFlLENBQUM7YUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEVBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDO2VBQ3BELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztPQUFBLENBQzlCLENBQ0YsQ0FBQztLQUFBLENBQ0gsQ0FBQztHQUNILENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsZ0NBQWdDLEVBQUU7V0FDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFD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Q0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FDbkQsQ0FBQztBQUNGLGVBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFNO0FBQzdCLGdCQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUNqQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDO09BQ0osQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0FBQ2xDLHFCQUFlLENBQUMsWUFBTTtBQUNwQixZQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQy9ELFlBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzVELFlBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDhCQUE4QixFQUN6QyxhQUFhLFNBQUksV0FBVyxDQUNoQyxDQUFDO0FBQ0YsZUFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQU07QUFDN0IsZ0JBQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQ3hDLENBQUM7U0FDSCxDQUFDLENBQUM7T0FDSixDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoiL1VzZXJzL1JhZC8uYXRvbS9wYWNrYWdlcy9saW50ZXItZmxha2U4L3NwZWMvbGludGVyLWZsYWtlOC1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IGdvb2RQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpeHR1cmVzJywgJ2dvb2QucHknKTtcbmNvbnN0IGJhZFBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnLCAnYmFkLnB5Jyk7XG5jb25zdCBlcnJ3YXJuUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycsICdlcnJ3YXJuLnB5Jyk7XG5jb25zdCBmaXh0dXJlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycpO1xuXG5kZXNjcmliZSgnVGhlIGZsYWtlOCBwcm92aWRlciBmb3IgTGludGVyJywgKCkgPT4ge1xuICBjb25zdCBsaW50ID0gcmVxdWlyZSgnLi4vbGliL21haW4nKS5wcm92aWRlTGludGVyKCkubGludDtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2xpbnRlci1mbGFrZTgnKSxcbiAgICAgICAgYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2xhbmd1YWdlLXB5dGhvbicpLnRoZW4oKCkgPT5cbiAgICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKGdvb2RQYXRoKVxuICAgICAgICApXG4gICAgICBdKVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgaW4gdGhlIHBhY2thZ2VzIGxpc3QnLCAoKSA9PlxuICAgIGV4cGVjdChhdG9tLnBhY2thZ2VzLmlzUGFja2FnZUxvYWRlZCgnbGludGVyLWZsYWtlOCcpKS50b0JlKHRydWUpXG4gICk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhbiBhY3RpdmUgcGFja2FnZScsICgpID0+XG4gICAgZXhwZWN0KGF0b20ucGFja2FnZXMuaXNQYWNrYWdlQWN0aXZlKCdsaW50ZXItZmxha2U4JykpLnRvQmUodHJ1ZSlcbiAgKTtcblxuICBkZXNjcmliZSgnY2hlY2tzIGJhZC5weSBhbmQnLCAoKSA9PiB7XG4gICAgbGV0IGVkaXRvciA9IG51bGw7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgICAgYXRvbS53b3Jrc3BhY2Uub3BlbihiYWRQYXRoKS50aGVuKG9wZW5FZGl0b3IgPT4geyBlZGl0b3IgPSBvcGVuRWRpdG9yOyB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdmaW5kcyBhdCBsZWFzdCBvbmUgbWVzc2FnZScsICgpID0+XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgICAgbGludChlZGl0b3IpLnRoZW4obWVzc2FnZXMgPT5cbiAgICAgICAgICBleHBlY3QobWVzc2FnZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG5cbiAgICBpdCgndmVyaWZpZXMgdGhhdCBtZXNzYWdlJywgKCkgPT5cbiAgICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PlxuICAgICAgICBsaW50KGVkaXRvcikudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnR5cGUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnR5cGUpLnRvRXF1YWwoJ1dhcm5pbmcnKTtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uaHRtbCkubm90LnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnRleHQpLnRvRXF1YWwoJ0Y4MjEg4oCUIHVuZGVmaW5lZCBuYW1lIFxcJ2FzZmRcXCcnKTtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uZmlsZVBhdGgpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmZpbGVQYXRoKS50b01hdGNoKC8uK3NwZWNbXFxcXFxcL11maXh0dXJlc1tcXFxcXFwvXWJhZFxcLnB5JC8pO1xuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5yYW5nZSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0ucmFuZ2UubGVuZ3RoKS50b0VxdWFsKDIpO1xuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5yYW5nZSkudG9FcXVhbChbWzAsIDBdLCBbMCwgNF1dKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuXG4gICAgaXQoJ2NoZWNrcyB0aGF0IHRoZSBtZXNzYWdlIGlzIGFuIGVycm9yIGlmIGZsYWtlRXJyb3JzIGlzIHNldCcsICgpID0+IHtcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLWZsYWtlOC5mbGFrZUVycm9ycycsIHRydWUpO1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+XG4gICAgICAgIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udHlwZSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udHlwZSkudG9FcXVhbCgnRXJyb3InKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjaGVja3MgZXJyd2Fybi5weSBhbmQnLCAoKSA9PiB7XG4gICAgbGV0IGVkaXRvciA9IG51bGw7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PlxuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKGVycndhcm5QYXRoKS50aGVuKG9wZW5FZGl0b3IgPT4geyBlZGl0b3IgPSBvcGVuRWRpdG9yOyB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdmaW5kcyBhdCBsZWFzdCBvbmUgbWVzc2FnZScsICgpID0+XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgICAgbGludChlZGl0b3IpLnRoZW4obWVzc2FnZXMgPT5cbiAgICAgICAgICBleHBlY3QobWVzc2FnZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG5cbiAgICBpdCgnZmluZHMgdGhlIG1lc3NhZ2UgaXMgYSB3YXJuaW5nIGlmIHBlcDhFcnJvcnNUb1dhcm5pbmdzIGlzIHNldCcsICgpID0+IHtcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLWZsYWtlOC5wZXA4RXJyb3JzVG9XYXJuaW5ncycsIHRydWUpO1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+XG4gICAgICAgIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udHlwZSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udHlwZSkudG9FcXVhbCgnV2FybmluZycpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdmaW5kcyB0aGUgbWVzc2FnZSBpcyBhbiBlcnJvciBpZiBwZXA4RXJyb3JzVG9XYXJuaW5ncyBpcyBzZXQnLCAoKSA9PiB7XG4gICAgICBhdG9tLmNvbmZpZy5zZXQoJ2xpbnRlci1mbGFrZTgucGVwOEVycm9yc1RvV2FybmluZ3MnLCBmYWxzZSk7XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgICAgbGludChlZGl0b3IpLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50eXBlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50eXBlKS50b0VxdWFsKCdFcnJvcicpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2ZpbmRzIG5vdGhpbmcgd3Jvbmcgd2l0aCBhIHZhbGlkIGZpbGUnLCAoKSA9PiB7XG4gICAgd2FpdHNGb3JQcm9taXNlKCgpID0+XG4gICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKGdvb2RQYXRoKS50aGVuKGVkaXRvciA9PlxuICAgICAgICBsaW50KGVkaXRvcikudGhlbihtZXNzYWdlcyA9PlxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlcy5sZW5ndGgpLnRvRXF1YWwoMClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdleGVjdXRhYmxlIHBhdGgnLCAoKSA9PiB7XG4gICAgY29uc3QgaGVscGVycyA9IHJlcXVpcmUoJ2F0b20tbGludGVyJyk7XG4gICAgbGV0IGVkaXRvciA9IG51bGw7XG4gICAgbGV0IGV4ZWNTcHkgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGZha2VFeGVjKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKCcnKSk7XG4gICAgfVxuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBhdG9tLnByb2plY3QuYWRkUGF0aChmaXh0dXJlUGF0aCk7XG5cbiAgICAgIGV4ZWNTcHkgPSBzcHlPbihoZWxwZXJzLCAnZXhlYycpLmFuZENhbGxGYWtlKGZha2VFeGVjKTtcblxuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oYmFkUGF0aCkudGhlbihvcGVuRWRpdG9yID0+IHsgZWRpdG9yID0gb3BlbkVkaXRvcjsgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnZmluZHMgZXhlY3V0YWJsZSByZWxhdGl2ZSB0byBwcm9qZWN0JywgKCkgPT4ge1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcbiAgICAgICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZmxha2U4LmV4ZWN1dGFibGVQYXRoJyxcbiAgICAgICAgICBwYXRoLmpvaW4oJyRQUk9KRUNUJywgJ2ZsYWtlOCcpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBsaW50KGVkaXRvcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KGV4ZWNTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkudG9FcXVhbChcbiAgICAgICAgICAgIHBhdGguam9pbihmaXh0dXJlUGF0aCwgJ2ZsYWtlOCcpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdub3JtYWxpemVzIGV4ZWN1dGFibGUgcGF0aCcsICgpID0+IHtcbiAgICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG4gICAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLWZsYWtlOC5leGVjdXRhYmxlUGF0aCcsXG4gICAgICAgICAgcGF0aC5qb2luKGZpeHR1cmVQYXRoLCAnLi4nLCAnZml4dHVyZXMnLCAnZmxha2U4JylcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGxpbnQoZWRpdG9yKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBleHBlY3QoZXhlY1NweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS50b0VxdWFsKFxuICAgICAgICAgICAgcGF0aC5qb2luKGZpeHR1cmVQYXRoLCAnZmxha2U4JylcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2ZpbmRzIGJhY2t1cCBleGVjdXRhYmxlJywgKCkgPT4ge1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcbiAgICAgICAgY29uc3QgZmxha2VOb3RGb3VuZCA9IHBhdGguam9pbignJFBST0pFQ1QnLCAnZmxha2U4X25vdGZvdW5kJyk7XG4gICAgICAgIGNvbnN0IGZsYWtlQmFja3VwID0gcGF0aC5qb2luKGZpeHR1cmVQYXRoLCAnZmxha2U4X2JhY2t1cCcpO1xuICAgICAgICBhdG9tLmNvbmZpZy5zZXQoJ2xpbnRlci1mbGFrZTguZXhlY3V0YWJsZVBhdGgnLFxuICAgICAgICAgIGAke2ZsYWtlTm90Rm91bmR9OyR7Zmxha2VCYWNrdXB9YFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbGludChlZGl0b3IpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdChleGVjU3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoXG4gICAgICAgICAgICBwYXRoLmpvaW4oZml4dHVyZVBhdGgsICdmbGFrZThfYmFja3VwJylcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
//# sourceURL=/Users/Rad/.atom/packages/linter-flake8/spec/linter-flake8-spec.js
