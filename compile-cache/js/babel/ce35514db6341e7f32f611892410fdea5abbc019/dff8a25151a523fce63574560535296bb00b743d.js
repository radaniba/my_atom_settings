Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _languagesJs = require('./languages.js');

var _languagesJs2 = _interopRequireDefault(_languagesJs);

var _atom = require('atom');

'use babel';

function activate() {
  atom.commands.add('atom-text-editor:not([mini])', {
    'block-comment-plus:toggle': toggle
  });
}

function toggle() {
  var editor = atom.workspace.getActiveTextEditor();
  var editorView = atom.views.getView(editor);
  var buffer = editor.getBuffer();
  var selections = editor.getSelections();

  buffer.transact(function () {
    for (i in selections) {
      var selection = selections[i];
      var selectionRange = selection.getBufferRange();
      var hasTextSelected = selection.getText().length > 0;
      var bufferRange = selection.getBufferRange();
      var startLanguage = getLanguage(bufferRange.start);
      var endLanguage = getLanguage(bufferRange.end);

      // defaults to C based comments
      var commentStart = '/*';
      var commentEnd = '*/';
      var addNewLine = false;

      if (startLanguage !== endLanguage || startLanguage === "plain") {
        continue;
      }
      var language = startLanguage;

      if (typeof _languagesJs2['default'][startLanguage] != 'undefined') {
        var lng = _languagesJs2['default'][startLanguage];
        commentStart = lng.start;
        commentEnd = lng.end;
        addNewLine = lng.newLine ? lng.newLine : false;
      }

      if (isInBlockComment(bufferRange.start) && isInBlockComment(bufferRange.end)) {
        var selectionText = selection.getText();

        if (selectionText.startsWith(commentStart) && selectionText.endsWith(commentEnd)) {
          var replaced = selectionText.trim().substr(commentStart.length);
          replaced = replaced.substr(0, replaced.length - commentEnd.length);
          selection.insertText(replaced, { select: true });
        } else {
          var startRow = searchCommentRow(bufferRange.start, commentStart, commentEnd, true);
          var foundStart = rowContainsCommentToken(startRow, commentStart);

          var endRow = searchCommentRow(bufferRange.end, commentStart, commentEnd);
          var foundEnd = rowContainsCommentToken(endRow, commentEnd);

          if (foundStart && foundEnd) {
            removeCommentToken(startRow, commentStart, addNewLine);

            if (addNewLine) endRow--;

            removeCommentToken(endRow, commentEnd, addNewLine);

            var _newSelectionRange = undefined;
            if (selection.getText().length > 0) {
              if (addNewLine) {
                _newSelectionRange = new _atom.Range(new _atom.Point(selectionRange.start.row - 1, 0), new _atom.Point(selectionRange.end.row - 1, selectionRange.end.column));
              } else {
                selectionRange.start.column -= commentStart.length;
                _newSelectionRange = selectionRange;
              }
              selection.setBufferRange(_newSelectionRange);
            }
          } else {
            atom.commands.dispatch(editorView, 'editor:toggle-line-comments');
          }
        }
      } else {
        var selectionText = selection.getText();
        var start = selectionText.trim().substr(0, commentStart.length);
        var end = selectionText.trim().substr(-1 * commentEnd.length);

        if (start === commentStart && end === commentEnd) {
          var replaced = selectionText.trim().substr(commentStart.length);
          replaced = replaced.substr(0, replaced.length - commentEnd.length);
          selection.insertText(replaced, { select: true });
        } else {
          var innerWrapper = addNewLine ? "\n" : "";
          selection.insertText(commentStart + innerWrapper + selectionText + innerWrapper + commentEnd + innerWrapper);

          if (hasTextSelected) {
            var _newSelectionRange2 = undefined;
            if (addNewLine) {
              _newSelectionRange2 = new _atom.Range(new _atom.Point(selectionRange.start.row + 1, 0), new _atom.Point(selectionRange.end.row + 1, buffer.lineForRow(selectionRange.end.row + 1).length));
            } else {
              var startPoint = new _atom.Point(selectionRange.start.row, selectionRange.start.column + commentStart.length);

              var endPoint = new _atom.Point(selectionRange.end.row, selectionRange.end.column);

              if (startPoint.row === endPoint.row) {
                endPoint.column += commentEnd.length;
              }

              _newSelectionRange2 = new _atom.Range(startPoint, endPoint);
            }

            selection.setBufferRange(_newSelectionRange2);
          } else {
            newSelectionRange = new _atom.Range(new _atom.Point(selectionRange.start.row, selectionRange.start.column + commentStart.length), new _atom.Point(selectionRange.end.row, selectionRange.end.column + commentEnd.length));

            selection.setBufferRange(newSelectionRange);
          }
        }
      }
    }
  });

  function getLanguage(point) {
    var scopes = editor.scopeDescriptorForBufferPosition(point).getScopesArray();
    var language = null;

    if (scopes.length > 1) {
      for (i in scopes) {
        var item = scopes[i];
        if (item.match(/source/g)) {
          var scope = item.split('.');
          language = scope[1];
          break;
        }
      }
    }

    if (language === null) {
      var scope = scopes[0].split('.');
      language = scope[1];
    }

    return language;
  }

  function isInBlockComment(point) {
    var scopes = editor.scopeDescriptorForBufferPosition(point).getScopesArray();
    var isCommented = false;

    if (scopes.length > 1) {
      for (i in scopes) {
        var scope = scopes[i];
        if (scope.match(/comment/g)) {
          isCommented = true;
          break;
        }
      }
    }

    return isCommented;
  }

  function searchCommentRow(point, startToken, endToken) {
    var backwards = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

    var end = backwards ? 0 : buffer.getLastRow();
    var stopIfFound = backwards ? endToken : startToken;
    var token = backwards ? startToken : endToken;
    var found = false;
    var row = point.row;

    if (backwards) {
      while (row >= 0) {
        var rowText = buffer.lineForRow(row);
        if (rowText.includes(stopIfFound)) {
          if (rowText.indexOf(token) > 0 && rowText.indexOf(stopIfFound) > rowText.indexOf(token)) {
            return point.row;
          }
        }
        if (rowText.includes(token)) {
          found = true;
          return row;
        }
        row--;
      }
    } else {
      while (row <= buffer.getLastRow()) {
        var rowText = buffer.lineForRow(row);
        if (rowText.includes(stopIfFound)) {
          if (rowText.indexOf(stopIfFound) < rowText.indexOf(token)) {
            return point.row;
          }
        }
        if (rowText.includes(token)) {
          found = true;
          return row;
        }
        row++;
      }
    }

    return end;
  }

  function rowContainsCommentToken(row, token) {
    var rowText = buffer.lineForRow(row);
    return rowText.includes(token);
  }

  function removeCommentToken(row, token, shouldDeleteRow) {
    var rowText = buffer.lineForRow(row);

    var replaceText = rowText.replace(token, '');
    var range = [[row, 0], [row, rowText.length]];

    buffer.setTextInRange(range, replaceText);

    if (shouldDeleteRow) {
      buffer.deleteRow(row);
    }

    return true;
  }

  function selectionIsEmpty(selection) {
    var br = selection.getBufferRange();
    return br.start.row === br.end.row && br.start.column === br.end.column;
  }
}
//# sourceMappingURL=data:application/json;base64,