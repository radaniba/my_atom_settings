Object.defineProperty(exports, '__esModule', {
  value: true
});
/** @babel */

var Config = atom.config;
var ua = require('universal-analytics');
var trackingId = 'UA-47544457-3';

var user = null;

function getUser() {
  var userId = atom.config.get("git-plus.general._analyticsUserId");
  if (!atom.config.get("git-plus.general._analyticsUserId")) {
    userId = require("uuid").v4();
    atom.config.set("git-plus.general._analyticsUserId", userId);
  }
  if (user === null) {
    user = ua(trackingId, userId, {
      headers: {
        "User-Agent": navigator.userAgent
      }
    });
  }
  return user;
}

function trackBooleanConfigIsOn(name) {
  getUser().event('Config', 'ON', name, { anonymizeIp: true }).send();
}

function trackBooleanConfigIsOff(name) {
  getUser().event('Config', 'OFF', name, { anonymizeIp: true }).send();
}

function trackIntConfigIsOn(name, value) {
  getUser().event('Config', 'ON', name, value, { anonymizeIp: true }).send();
}

function trackStringConfig(name, value) {
  getUser().event('Config', 'ON', name + ':' + value, { anonymizeIp: true }).send();
}

function trackConfig(name, value) {
  if (parseInt(value) >= 0) {
    trackIntConfigIsOn(name, value);
  } else if (value === true) {
    trackBooleanConfigIsOn(name);
  } else if (value === false) {
    trackBooleanConfigIsOff(name);
  } else if (value.charAt) {
    trackStringConfig(name, value);
  }
}

function track(name) {
  var configKey = 'git-plus.' + name;
  var config = Config.get(configKey);
  var schema = Config.getSchema(configKey);
  if (configKey === 'git-plus.general._analyticsUserId') return;
  if (schema.type === 'object') {
    Object.keys(schema.properties).forEach(function (property) {
      return track(name + '.' + property);
    });
  } else {
    trackConfig(configKey, config);
  }
}

// function trackConfigChanged(name, {oldValue, newValue}) {
//   getUser().event('Config', 'CHANGED', name, {anonymizeIp: true}).send()
// }

exports['default'] = function () {
  // let userConfigs = Config.getAll('git-plus')[0]
  // userConfigs = userConfigs.value
  // Object.keys(userConfigs).forEach(track)
  // Object.keys(userConfigs).forEach(config => {
  //   atom.config.onDidChange(`git-plus.${config}`, event => trackConfigChanged(name, event))
  // })
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9SYWQvLmF0b20vcGFja2FnZXMvZ2l0LXBsdXMvbGliL2FuYWx5dGljcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7QUFDMUIsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUE7QUFDekMsSUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFBOztBQUVsQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUE7O0FBRWYsU0FBUyxPQUFPLEdBQUc7QUFDakIsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQTtBQUNqRSxNQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsRUFBRTtBQUN6RCxVQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQzdCLFFBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0dBQzdEO0FBQ0QsTUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO0FBQ2pCLFFBQUksR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRTtBQUM1QixhQUFPLEVBQUU7QUFDUCxvQkFBWSxFQUFFLFNBQVMsQ0FBQyxTQUFTO09BQ2xDO0tBQ0YsQ0FBQyxDQUFBO0dBQ0g7QUFDRCxTQUFPLElBQUksQ0FBQTtDQUNaOztBQUVELFNBQVMsc0JBQXNCLENBQUMsSUFBSSxFQUFFO0FBQ3BDLFNBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0NBQ2xFOztBQUVELFNBQVMsdUJBQXVCLENBQUMsSUFBSSxFQUFFO0FBQ3JDLFNBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0NBQ25FOztBQUVELFNBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtBQUN2QyxTQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7Q0FDekU7O0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ3RDLFNBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFLLElBQUksU0FBSSxLQUFLLEVBQUksRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtDQUNoRjs7QUFFRCxTQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ2hDLE1BQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN4QixzQkFBa0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7R0FDaEMsTUFDSSxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7QUFDdkIsMEJBQXNCLENBQUMsSUFBSSxDQUFDLENBQUE7R0FDN0IsTUFDSSxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7QUFDeEIsMkJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUE7R0FDOUIsTUFDSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDckIscUJBQWlCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0dBQy9CO0NBQ0Y7O0FBRUQsU0FBUyxLQUFLLENBQUMsSUFBSSxFQUFFO0FBQ25CLE1BQU0sU0FBUyxpQkFBZSxJQUFJLEFBQUUsQ0FBQTtBQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDMUMsTUFBSSxTQUFTLEtBQUssbUNBQW1DLEVBQUUsT0FBTTtBQUM3RCxNQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQzVCLFVBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFFBQVE7YUFBSSxLQUFLLENBQUksSUFBSSxTQUFJLFFBQVEsQ0FBRztLQUFBLENBQUMsQ0FBQTtHQUNqRixNQUNJO0FBQ0gsZUFBVyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtHQUMvQjtDQUNGOzs7Ozs7cUJBTWMsWUFBVzs7Ozs7OztDQU96QiIsImZpbGUiOiIvVXNlcnMvUmFkLy5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL2xpYi9hbmFseXRpY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbmNvbnN0IENvbmZpZyA9IGF0b20uY29uZmlnXG5jb25zdCB1YSA9IHJlcXVpcmUoJ3VuaXZlcnNhbC1hbmFseXRpY3MnKVxuY29uc3QgdHJhY2tpbmdJZCA9ICdVQS00NzU0NDQ1Ny0zJ1xuXG5sZXQgdXNlciA9IG51bGxcblxuZnVuY3Rpb24gZ2V0VXNlcigpIHtcbiAgbGV0IHVzZXJJZCA9IGF0b20uY29uZmlnLmdldChcImdpdC1wbHVzLmdlbmVyYWwuX2FuYWx5dGljc1VzZXJJZFwiKVxuICBpZiAoIWF0b20uY29uZmlnLmdldChcImdpdC1wbHVzLmdlbmVyYWwuX2FuYWx5dGljc1VzZXJJZFwiKSkge1xuICAgIHVzZXJJZCA9IHJlcXVpcmUoXCJ1dWlkXCIpLnY0KClcbiAgICBhdG9tLmNvbmZpZy5zZXQoXCJnaXQtcGx1cy5nZW5lcmFsLl9hbmFseXRpY3NVc2VySWRcIiwgdXNlcklkKVxuICB9XG4gIGlmICh1c2VyID09PSBudWxsKSB7XG4gICAgdXNlciA9IHVhKHRyYWNraW5nSWQsIHVzZXJJZCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIlVzZXItQWdlbnRcIjogbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIHVzZXJcbn1cblxuZnVuY3Rpb24gdHJhY2tCb29sZWFuQ29uZmlnSXNPbihuYW1lKSB7XG4gIGdldFVzZXIoKS5ldmVudCgnQ29uZmlnJywgJ09OJywgbmFtZSwge2Fub255bWl6ZUlwOiB0cnVlfSkuc2VuZCgpXG59XG5cbmZ1bmN0aW9uIHRyYWNrQm9vbGVhbkNvbmZpZ0lzT2ZmKG5hbWUpIHtcbiAgZ2V0VXNlcigpLmV2ZW50KCdDb25maWcnLCAnT0ZGJywgbmFtZSwge2Fub255bWl6ZUlwOiB0cnVlfSkuc2VuZCgpXG59XG5cbmZ1bmN0aW9uIHRyYWNrSW50Q29uZmlnSXNPbihuYW1lLCB2YWx1ZSkge1xuICBnZXRVc2VyKCkuZXZlbnQoJ0NvbmZpZycsICdPTicsIG5hbWUsIHZhbHVlLCB7YW5vbnltaXplSXA6IHRydWV9KS5zZW5kKClcbn1cblxuZnVuY3Rpb24gdHJhY2tTdHJpbmdDb25maWcobmFtZSwgdmFsdWUpIHtcbiAgZ2V0VXNlcigpLmV2ZW50KCdDb25maWcnLCAnT04nLCBgJHtuYW1lfToke3ZhbHVlfWAsIHthbm9ueW1pemVJcDogdHJ1ZX0pLnNlbmQoKVxufVxuXG5mdW5jdGlvbiB0cmFja0NvbmZpZyhuYW1lLCB2YWx1ZSkge1xuICBpZiAocGFyc2VJbnQodmFsdWUpID49IDApIHtcbiAgICB0cmFja0ludENvbmZpZ0lzT24obmFtZSwgdmFsdWUpXG4gIH1cbiAgZWxzZSBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICB0cmFja0Jvb2xlYW5Db25maWdJc09uKG5hbWUpXG4gIH1cbiAgZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgdHJhY2tCb29sZWFuQ29uZmlnSXNPZmYobmFtZSlcbiAgfVxuICBlbHNlIGlmICh2YWx1ZS5jaGFyQXQpIHtcbiAgICB0cmFja1N0cmluZ0NvbmZpZyhuYW1lLCB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFjayhuYW1lKSB7XG4gIGNvbnN0IGNvbmZpZ0tleSA9IGBnaXQtcGx1cy4ke25hbWV9YFxuICBjb25zdCBjb25maWcgPSBDb25maWcuZ2V0KGNvbmZpZ0tleSlcbiAgY29uc3Qgc2NoZW1hID0gQ29uZmlnLmdldFNjaGVtYShjb25maWdLZXkpXG4gIGlmIChjb25maWdLZXkgPT09ICdnaXQtcGx1cy5nZW5lcmFsLl9hbmFseXRpY3NVc2VySWQnKSByZXR1cm5cbiAgaWYgKHNjaGVtYS50eXBlID09PSAnb2JqZWN0Jykge1xuICAgIE9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IHRyYWNrKGAke25hbWV9LiR7cHJvcGVydHl9YCkpXG4gIH1cbiAgZWxzZSB7XG4gICAgdHJhY2tDb25maWcoY29uZmlnS2V5LCBjb25maWcpXG4gIH1cbn1cblxuLy8gZnVuY3Rpb24gdHJhY2tDb25maWdDaGFuZ2VkKG5hbWUsIHtvbGRWYWx1ZSwgbmV3VmFsdWV9KSB7XG4vLyAgIGdldFVzZXIoKS5ldmVudCgnQ29uZmlnJywgJ0NIQU5HRUQnLCBuYW1lLCB7YW5vbnltaXplSXA6IHRydWV9KS5zZW5kKClcbi8vIH1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIC8vIGxldCB1c2VyQ29uZmlncyA9IENvbmZpZy5nZXRBbGwoJ2dpdC1wbHVzJylbMF1cbiAgLy8gdXNlckNvbmZpZ3MgPSB1c2VyQ29uZmlncy52YWx1ZVxuICAvLyBPYmplY3Qua2V5cyh1c2VyQ29uZmlncykuZm9yRWFjaCh0cmFjaylcbiAgLy8gT2JqZWN0LmtleXModXNlckNvbmZpZ3MpLmZvckVhY2goY29uZmlnID0+IHtcbiAgLy8gICBhdG9tLmNvbmZpZy5vbkRpZENoYW5nZShgZ2l0LXBsdXMuJHtjb25maWd9YCwgZXZlbnQgPT4gdHJhY2tDb25maWdDaGFuZ2VkKG5hbWUsIGV2ZW50KSlcbiAgLy8gfSlcbn1cbiJdfQ==