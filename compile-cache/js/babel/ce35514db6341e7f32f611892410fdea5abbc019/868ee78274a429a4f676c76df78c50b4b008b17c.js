'use babel';

var _ref = [];
var workspaceElement = _ref[0];
var editor = _ref[1];
var editorElement = _ref[2];

var path = require('path');

function sharedSetup() {

  atom.project.setPaths([path.join(__dirname, 'fixtures')]);
  workspaceElement = atom.views.getView(atom.workspace);

  waitsForPromise(function () {

    return atom.packages.activatePackage('atom-ternjs').then(function (pkg) {

      package = pkg.mainModule;
    });
  });

  waitsForPromise(function () {

    return atom.workspace.open('test.js');
  });

  runs(function () {

    editor = atom.workspace.getActiveTextEditor();
    editorElement = atom.views.getView(editor);
  });
}

describe('atom-ternjs', function () {

  beforeEach(function () {

    sharedSetup(true);
  });

  describe('activate()', function () {

    it('activates atom-ternjs and initializes the autocomplete-plus provider', function () {

      expect(package.provider).toBeDefined();
    });

    it('activates atom-ternjs and initializes the manager', function () {

      expect(package.manager).toBeDefined();
    });
  });

  describe('deactivate()', function () {

    beforeEach(function () {

      editor.setCursorBufferPosition([4, 15]);
      atom.packages.deactivatePackage('atom-ternjs');
    });

    it('deactivates atom-ternjs', function () {

      expect(package.manager).toBeUndefined();
      expect(package.provider).toBeUndefined();
    });

    it('destroys all views', function () {

      expect(workspaceElement.querySelectorAll('atom-ternjs-reference').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-rename').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-config').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-documentation').length).toBe(0);
      expect(workspaceElement.querySelectorAll('atom-ternjs-type').length).toBe(0);
      expect(editorElement.querySelectorAll('atom-text-editor::shadow .scroll-view .atom-ternjs-definition-marker').length).toBe(0);
    });
  });
});

describe('atom-ternjs', function () {

  beforeEach(function () {

    sharedSetup(false);
  });

  describe('activate()', function () {});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9SYWQvLmF0b20vcGFja2FnZXMvYXRvbS10ZXJuanMvc3BlYy9hdG9tLXRlcm5qcy1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQTs7V0FFcUMsRUFBRTtJQUE3QyxnQkFBZ0I7SUFBRSxNQUFNO0lBQUUsYUFBYTs7QUFDNUMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQixTQUFTLFdBQVcsR0FBRzs7QUFFckIsTUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsa0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBOztBQUVyRCxpQkFBZSxDQUFDLFlBQU07O0FBRXBCLFdBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRyxFQUFLOztBQUVoRSxhQUFPLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztLQUMxQixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsaUJBQWUsQ0FBQyxZQUFNOztBQUVwQixXQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQ3ZDLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsWUFBTTs7QUFFVCxVQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQzlDLGlCQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDNUMsQ0FBQyxDQUFDO0NBQ0o7O0FBRUQsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNOztBQUU1QixZQUFVLENBQUMsWUFBTTs7QUFFZixlQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDbkIsQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTs7QUFFM0IsTUFBRSxDQUFDLHNFQUFzRSxFQUFFLFlBQU07O0FBRS9FLFlBQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDeEMsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxtREFBbUQsRUFBRSxZQUFNOztBQUU1RCxZQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3ZDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsY0FBYyxFQUFFLFlBQU07O0FBRTdCLGNBQVUsQ0FBQyxZQUFNOztBQUVmLFlBQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLFVBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDaEQsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNOztBQUVsQyxZQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3hDLFlBQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7S0FDMUMsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxvQkFBb0IsRUFBRSxZQUFNOztBQUU3QixZQUFNLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEYsWUFBTSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9FLFlBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRSxZQUFNLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEYsWUFBTSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdFLFlBQU0sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsc0VBQXNFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0gsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDOztBQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTs7QUFFNUIsWUFBVSxDQUFDLFlBQU07O0FBRWYsZUFBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3BCLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsWUFBWSxFQUFFLFlBQU0sRUFHNUIsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9SYWQvLmF0b20vcGFja2FnZXMvYXRvbS10ZXJuanMvc3BlYy9hdG9tLXRlcm5qcy1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxubGV0IFt3b3Jrc3BhY2VFbGVtZW50LCBlZGl0b3IsIGVkaXRvckVsZW1lbnRdID0gW107XG5sZXQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuZnVuY3Rpb24gc2hhcmVkU2V0dXAoKSB7XG5cbiAgYXRvbS5wcm9qZWN0LnNldFBhdGhzKFtwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnKV0pO1xuICB3b3Jrc3BhY2VFbGVtZW50ID0gYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKVxuXG4gIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiB7XG5cbiAgICByZXR1cm4gYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2F0b20tdGVybmpzJykudGhlbigocGtnKSA9PiB7XG5cbiAgICAgIHBhY2thZ2UgPSBwa2cubWFpbk1vZHVsZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcblxuICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKCd0ZXN0LmpzJyk7XG4gIH0pO1xuXG4gIHJ1bnMoKCkgPT4ge1xuXG4gICAgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICAgIGVkaXRvckVsZW1lbnQgPSBhdG9tLnZpZXdzLmdldFZpZXcoZWRpdG9yKTtcbiAgfSk7XG59XG5cbmRlc2NyaWJlKCdhdG9tLXRlcm5qcycsICgpID0+IHtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcblxuICAgIHNoYXJlZFNldHVwKHRydWUpO1xuICB9KTtcblxuICBkZXNjcmliZSgnYWN0aXZhdGUoKScsICgpID0+IHtcblxuICAgIGl0KCdhY3RpdmF0ZXMgYXRvbS10ZXJuanMgYW5kIGluaXRpYWxpemVzIHRoZSBhdXRvY29tcGxldGUtcGx1cyBwcm92aWRlcicsICgpID0+IHtcblxuICAgICAgZXhwZWN0KHBhY2thZ2UucHJvdmlkZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnYWN0aXZhdGVzIGF0b20tdGVybmpzIGFuZCBpbml0aWFsaXplcyB0aGUgbWFuYWdlcicsICgpID0+IHtcblxuICAgICAgZXhwZWN0KHBhY2thZ2UubWFuYWdlcikudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2RlYWN0aXZhdGUoKScsICgpID0+IHtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuXG4gICAgICBlZGl0b3Iuc2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oWzQsIDE1XSk7XG4gICAgICBhdG9tLnBhY2thZ2VzLmRlYWN0aXZhdGVQYWNrYWdlKCdhdG9tLXRlcm5qcycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlYWN0aXZhdGVzIGF0b20tdGVybmpzJywgKCkgPT4ge1xuXG4gICAgICBleHBlY3QocGFja2FnZS5tYW5hZ2VyKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QocGFja2FnZS5wcm92aWRlcikudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2Rlc3Ryb3lzIGFsbCB2aWV3cycsICgpID0+IHtcblxuICAgICAgZXhwZWN0KHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYXRvbS10ZXJuanMtcmVmZXJlbmNlJykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYXRvbS10ZXJuanMtcmVuYW1lJykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYXRvbS10ZXJuanMtY29uZmlnJykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYXRvbS10ZXJuanMtZG9jdW1lbnRhdGlvbicpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2F0b20tdGVybmpzLXR5cGUnKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoZWRpdG9yRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhdG9tLXRleHQtZWRpdG9yOjpzaGFkb3cgLnNjcm9sbC12aWV3IC5hdG9tLXRlcm5qcy1kZWZpbml0aW9uLW1hcmtlcicpLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2F0b20tdGVybmpzJywgKCkgPT4ge1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuXG4gICAgc2hhcmVkU2V0dXAoZmFsc2UpO1xuICB9KTtcblxuICBkZXNjcmliZSgnYWN0aXZhdGUoKScsICgpID0+IHtcblxuXG4gIH0pO1xufSk7XG4iXX0=
//# sourceURL=/Users/Rad/.atom/packages/atom-ternjs/spec/atom-ternjs-spec.js
