function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

var fixturePath = path.join(__dirname, 'fixtures');
var goodPath = path.join(fixturePath, 'good.py');
var badPath = path.join(fixturePath, 'bad.py');
var errwarnPath = path.join(fixturePath, 'errwarn.py');
var customRange = path.join(fixturePath, 'customRange.py');

describe('The flake8 provider for Linter', function () {
  var lint = require('../lib/main.js').provideLinter().lint;

  beforeEach(function () {
    waitsForPromise(function () {
      return Promise.all([atom.packages.activatePackage('linter-flake8'), atom.packages.activatePackage('language-python')]).then(function () {
        return atom.workspace.open(goodPath);
      });
    });
  });

  it('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-flake8')).toBe(true);
  });

  it('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-flake8')).toBe(true);
  });

  describe('checks bad.py and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies that message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBe('Warning');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBe('F821 — undefined name \'asfd\'');
          expect(messages[0].filePath).toBe(badPath);
          expect(messages[0].range).toEqual([[0, 0], [0, 4]]);
        });
      });
    });

    it('checks that the message is an error if flakeErrors is set', function () {
      atom.config.set('linter-flake8.flakeErrors', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages[0].type).toBe('Error');
        });
      });
    });
  });

  describe('checks errwarn.py and', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(errwarnPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('finds the message is a warning if pycodestyleErrorsToWarnings is set', function () {
      atom.config.set('linter-flake8.pycodestyleErrorsToWarnings', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages[0].type).toBe('Warning');
        });
      });
    });

    it("finds the message is an error if pycodestyleErrorsToWarnings isn't set", function () {
      atom.config.set('linter-flake8.pycodestyleErrorsToWarnings', false);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages[0].type).toBe('Error');
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBe(0);
        });
      });
    });
  });

  it('fixes the range for certain errors', function () {
    atom.config.set('linter-flake8.maxComplexity', 10);
    waitsForPromise(function () {
      return atom.workspace.open(customRange).then(function (editor) {
        return lint(editor).then(function (messages) {
          // importedUnused()
          var f401 = messages[0];
          var msgText = "F401 — 'unused_module' imported but unused";
          expect(f401.type).toBe('Warning');
          expect(f401.text).toBe(msgText);
          expect(f401.filePath).toBe(customRange);
          expect(f401.range).toEqual([[1, 19], [1, 32]]);

          // tooComplex()
          var c901 = messages[1];
          msgText = "C901 — 'c901_too_complex' is too complex (13)";
          expect(c901.type).toBe('Warning');
          expect(c901.text).toBe(msgText);
          expect(c901.filePath).toBe(customRange);
          expect(c901.range).toEqual([[4, 4], [4, 20]]);

          // noLocalsString()
          var h501 = messages[2];
          msgText = 'H501 — Do not use locals() for string formatting';
          expect(h501.type).toBe('Warning');
          expect(h501.text).toBe(msgText);
          expect(h501.filePath).toBe(customRange);
          expect(h501.range).toEqual([[21, 32], [21, 38]]);

          // H201
          var h201 = messages[3];
          msgText = "H201 — no 'except:' at least use 'except Exception:'";
          expect(h201.type).toBe('Warning');
          expect(h201.text).toBe(msgText);
          expect(h201.filePath).toBe(customRange);
          expect(h201.range).toEqual([[22, 4], [22, 11]]);
        });
      });
    });
  });

  describe('executable path', function () {
    var helpers = require('atom-linter');

    var editor = null;
    var realExec = helpers.exec;
    var execParams = [];
    function fakeExec() {
      for (var _len = arguments.length, parameters = Array(_len), _key = 0; _key < _len; _key++) {
        parameters[_key] = arguments[_key];
      }

      execParams.push(parameters);
      return Promise.resolve('');
    }

    beforeEach(function () {
      atom.project.addPath(fixturePath);

      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: fakeExec
      });

      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    afterEach(function () {
      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: realExec
      });
    });

    it('finds executable relative to project', function () {
      atom.config.set('linter-flake8.executablePath', path.join('$PROJECT', 'flake8'));
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds executable using project name', function () {
      atom.config.set('linter-flake8.executablePath', path.join('$PROJECT_NAME', 'flake8'));
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join('fixtures', 'flake8'));
        });
      });
    });

    it('normalizes executable path', function () {
      atom.config.set('linter-flake8.executablePath', path.join(fixturePath, '..', 'fixtures', 'flake8'));
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds backup executable', function () {
      var flakeNotFound = path.join('$PROJECT', 'flake8_notfound');
      var flakeBackup = path.join(fixturePath, 'flake8_backup');
      atom.config.set('linter-flake8.executablePath', flakeNotFound + ';' + flakeBackup);
      waitsForPromise(function () {
        return lint(editor).then(function () {
          return expect(execParams.pop()[0]).toBe(path.join(fixturePath, 'flake8_backup'));
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/Rad/.atom/packages/linter-flake8/spec/linter-flake8-spec.js
