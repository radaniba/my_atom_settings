#!/usr/bin/env node

var open = require('nodegit').Repository.open;
var fs = require('fs');

// node runtime is relative, whereas the package.json file is relative to cwd
var pkg = require('../package.json');

var authors = {};
var rankings = {};

var PREVIOUS_RELEASE_NOTE = new RegExp('^Prepare ' + pkg['version'] + ' releases*');
var accumulatedChanges = [];
var collecting = true;

var ignore = {
  'dev': 'dev@debian7devel',
  '=': '='
};

open('.').then(function (repo) {
  return repo.getHeadCommit();
})
// Display information about commits at HEAD
.then(function (headCommit) {
  // Create a new history event emitter.
  var history = headCommit.history();

  // Listen for commit events from the history.
  history.on('commit', function (commit) {
    var author = commit.author();
    var name = author.name();
    var email = author.email();

    var message = commit.message();

    if (collecting) {
      if (message.match(PREVIOUS_RELEASE_NOTE)) {
        collecting = false;
      } else {
        accumulatedChanges.push(message);
      }
    }

    if (!(ignore[name] && ignore[name] === email)) {
      // Take their most recent commit as the email they care about
      // Assumes everyone has a unique name
      authors[name] = authors[name] || email;

      // Count up their total number of commits
      rankings[name] = rankings[name] || 0;
      rankings[name]++;
    }
  });

  history.on('end', function (commits) {

    console.log('Summarize these for the CHANGELOG: ');
    console.log('>>>>>>>>>>>>>>>');
    for (var i = 0; i < accumulatedChanges.length; i++) {
      console.log(accumulatedChanges[i]);
    }
    console.log('<<<<<<<<<<<<<<<');

    // Create the updated contributors array
    var contributors = [];
    for (var name in rankings) {
      contributors.push({ 'name': name, 'email': authors[name] });
    }
    pkg['contributors'] = contributors;

    fs.writeFile('package.json', JSON.stringify(pkg, null, 2), function (err) {
      if (err) {
        console.err(err);
      } else {
        console.log('package.json written');
      }
    });
  });

  // Start emitting events.
  history.start();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9SYWQvLmF0b20vcGFja2FnZXMvc2NyaXB0L3V0aWxzL3VwZGF0ZVBhY2thZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQzlDLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7O0FBR3ZCLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBOztBQUVwQyxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUE7QUFDaEIsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFBOztBQUVqQixJQUFJLHFCQUFxQixHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsWUFBYSxDQUFDLENBQUM7QUFDckYsSUFBSSxrQkFBa0IsR0FBRyxFQUFFLENBQUE7QUFDM0IsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDOztBQUV0QixJQUFJLE1BQU0sR0FBRztBQUNYLE9BQUssRUFBRSxrQkFBa0I7QUFDekIsS0FBRyxFQUFFLEdBQUc7Q0FDVCxDQUFBOztBQUVELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FDTixJQUFJLENBQUMsVUFBUyxJQUFJLEVBQUU7QUFDbkIsU0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDN0IsQ0FBQzs7Q0FFRCxJQUFJLENBQUMsVUFBUyxVQUFVLEVBQUU7O0FBRXpCLE1BQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7O0FBR25DLFNBQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3BDLFFBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUM3QixRQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDekIsUUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUUzQixRQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBRS9CLFFBQUksVUFBVSxFQUFFO0FBQ2QsVUFBRyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEVBQUM7QUFDdEMsa0JBQVUsR0FBRyxLQUFLLENBQUM7T0FDcEIsTUFDSTtBQUNILDBCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNsQztLQUNGOztBQUVELFFBQUksRUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQSxBQUFFLEVBQUU7OztBQUdoRCxhQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQzs7O0FBR3ZDLGNBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3BDLGNBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBO0tBQ2pCO0dBRUYsQ0FBQyxDQUFDOztBQUVILFNBQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFVBQVMsT0FBTyxFQUFFOztBQUVsQyxXQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7QUFDbkQsV0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQy9CLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbEQsYUFBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BDO0FBQ0QsV0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOzs7QUFHL0IsUUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFBO0FBQ3JCLFNBQUssSUFBSSxJQUFJLElBQUksUUFBUSxFQUFFO0FBQ3pCLGtCQUFZLENBQUMsSUFBSSxDQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQTtLQUMxRDtBQUNELE9BQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxZQUFZLENBQUM7O0FBRW5DLE1BQUUsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEdBQUcsRUFBRTtBQUN2RSxVQUFJLEdBQUcsRUFBRTtBQUNQLGVBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDbEIsTUFDSTtBQUNILGVBQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztPQUNyQztLQUNGLENBQUMsQ0FBQztHQUVKLENBQUMsQ0FBQzs7O0FBR0gsU0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2pCLENBQUMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvUmFkLy5hdG9tL3BhY2thZ2VzL3NjcmlwdC91dGlscy91cGRhdGVQYWNrYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgb3BlbiA9IHJlcXVpcmUoXCJub2RlZ2l0XCIpLlJlcG9zaXRvcnkub3BlbjtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbi8vIG5vZGUgcnVudGltZSBpcyByZWxhdGl2ZSwgd2hlcmVhcyB0aGUgcGFja2FnZS5qc29uIGZpbGUgaXMgcmVsYXRpdmUgdG8gY3dkXG52YXIgcGtnID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJylcblxudmFyIGF1dGhvcnMgPSB7fVxudmFyIHJhbmtpbmdzID0ge31cblxudmFyIFBSRVZJT1VTX1JFTEVBU0VfTk9URSA9IG5ldyBSZWdFeHAoXCJeUHJlcGFyZSBcIiArIHBrZ1tcInZlcnNpb25cIl0gKyBcIiByZWxlYXNlXFxzKlwiKTtcbnZhciBhY2N1bXVsYXRlZENoYW5nZXMgPSBbXVxudmFyIGNvbGxlY3RpbmcgPSB0cnVlO1xuXG52YXIgaWdub3JlID0ge1xuICBcImRldlwiOiBcImRldkBkZWJpYW43ZGV2ZWxcIixcbiAgXCI9XCI6IFwiPVwiXG59XG5cbm9wZW4oXCIuXCIpXG4gIC50aGVuKGZ1bmN0aW9uKHJlcG8pIHtcbiAgICByZXR1cm4gcmVwby5nZXRIZWFkQ29tbWl0KCk7XG4gIH0pXG4gIC8vIERpc3BsYXkgaW5mb3JtYXRpb24gYWJvdXQgY29tbWl0cyBhdCBIRUFEXG4gIC50aGVuKGZ1bmN0aW9uKGhlYWRDb21taXQpIHtcbiAgICAvLyBDcmVhdGUgYSBuZXcgaGlzdG9yeSBldmVudCBlbWl0dGVyLlxuICAgIHZhciBoaXN0b3J5ID0gaGVhZENvbW1pdC5oaXN0b3J5KCk7XG4gIFxuICAgIC8vIExpc3RlbiBmb3IgY29tbWl0IGV2ZW50cyBmcm9tIHRoZSBoaXN0b3J5LlxuICAgIGhpc3Rvcnkub24oXCJjb21taXRcIiwgZnVuY3Rpb24oY29tbWl0KSB7XG4gICAgICB2YXIgYXV0aG9yID0gY29tbWl0LmF1dGhvcigpO1xuICAgICAgdmFyIG5hbWUgPSBhdXRob3IubmFtZSgpO1xuICAgICAgdmFyIGVtYWlsID0gYXV0aG9yLmVtYWlsKCk7XG5cbiAgICAgIHZhciBtZXNzYWdlID0gY29tbWl0Lm1lc3NhZ2UoKTtcblxuICAgICAgaWYgKGNvbGxlY3RpbmcpIHtcbiAgICAgICAgaWYobWVzc2FnZS5tYXRjaChQUkVWSU9VU19SRUxFQVNFX05PVEUpKXtcbiAgICAgICAgICBjb2xsZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRDaGFuZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCEgKCBpZ25vcmVbbmFtZV0gJiYgaWdub3JlW25hbWVdID09PSBlbWFpbCApKSB7XG4gICAgICAgIC8vIFRha2UgdGhlaXIgbW9zdCByZWNlbnQgY29tbWl0IGFzIHRoZSBlbWFpbCB0aGV5IGNhcmUgYWJvdXRcbiAgICAgICAgLy8gQXNzdW1lcyBldmVyeW9uZSBoYXMgYSB1bmlxdWUgbmFtZVxuICAgICAgICBhdXRob3JzW25hbWVdID0gYXV0aG9yc1tuYW1lXSB8fCBlbWFpbDtcbiAgICAgICAgXG4gICAgICAgIC8vIENvdW50IHVwIHRoZWlyIHRvdGFsIG51bWJlciBvZiBjb21taXRzXG4gICAgICAgIHJhbmtpbmdzW25hbWVdID0gcmFua2luZ3NbbmFtZV0gfHwgMFxuICAgICAgICByYW5raW5nc1tuYW1lXSsrXG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIGhpc3Rvcnkub24oXCJlbmRcIiwgZnVuY3Rpb24oY29tbWl0cykge1xuXG4gICAgICBjb25zb2xlLmxvZyhcIlN1bW1hcml6ZSB0aGVzZSBmb3IgdGhlIENIQU5HRUxPRzogXCIpO1xuICAgICAgY29uc29sZS5sb2coXCI+Pj4+Pj4+Pj4+Pj4+Pj5cIik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjY3VtdWxhdGVkQ2hhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zb2xlLmxvZyhhY2N1bXVsYXRlZENoYW5nZXNbaV0pO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coXCI8PDw8PDw8PDw8PDw8PDxcIik7XG5cbiAgICAgIC8vIENyZWF0ZSB0aGUgdXBkYXRlZCBjb250cmlidXRvcnMgYXJyYXlcbiAgICAgIHZhciBjb250cmlidXRvcnMgPSBbXVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiByYW5raW5ncykge1xuICAgICAgICBjb250cmlidXRvcnMucHVzaCh7XCJuYW1lXCI6IG5hbWUsIFwiZW1haWxcIjogYXV0aG9yc1tuYW1lXX0pXG4gICAgICB9XG4gICAgICBwa2dbJ2NvbnRyaWJ1dG9ycyddID0gY29udHJpYnV0b3JzO1xuXG4gICAgICBmcy53cml0ZUZpbGUoXCJwYWNrYWdlLmpzb25cIiwgSlNPTi5zdHJpbmdpZnkocGtnLCBudWxsLCAyKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFja2FnZS5qc29uIHdyaXR0ZW5cIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIFxuICAgIC8vIFN0YXJ0IGVtaXR0aW5nIGV2ZW50cy5cbiAgICBoaXN0b3J5LnN0YXJ0KCk7XG4gIH0pO1xuXG4iXX0=