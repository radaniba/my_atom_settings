(function() {
  var CodeManager, escapeStringRegexp, _;

  escapeStringRegexp = require('escape-string-regexp');

  _ = require('lodash');

  module.exports = CodeManager = (function() {
    function CodeManager() {
      this.editor = atom.workspace.getActiveTextEditor();
    }

    CodeManager.prototype.findCodeBlock = function() {
      var buffer, cursor, endRow, foldRange, foldable, indentLevel, row, selectedRange, selectedText;
      buffer = this.editor.getBuffer();
      selectedText = this.editor.getSelectedText();
      if (selectedText) {
        selectedRange = this.editor.getSelectedBufferRange();
        endRow = selectedRange.end.row;
        if (selectedRange.end.column === 0) {
          endRow = endRow - 1;
        }
        endRow = this.escapeBlankRows(selectedRange.start.row, endRow);
        return [selectedText, endRow];
      }
      cursor = this.editor.getLastCursor();
      row = cursor.getBufferRow();
      console.log('findCodeBlock:', row);
      indentLevel = cursor.getIndentLevel();
      foldable = this.editor.isFoldableAtBufferRow(row);
      foldRange = this.editor.languageMode.rowRangeForCodeFoldAtBufferRow(row);
      if ((foldRange == null) || (foldRange[0] == null) || (foldRange[1] == null)) {
        foldable = false;
      }
      if (foldable) {
        return this.getFoldContents(row);
      } else if (this.isBlank(row)) {
        return this.findPrecedingBlock(row, indentLevel);
      } else if (this.getRow(row).trim() === 'end') {
        return this.findPrecedingBlock(row, indentLevel);
      } else {
        return [this.getRow(row), row];
      }
    };

    CodeManager.prototype.findPrecedingBlock = function(row, indentLevel) {
      var blank, buffer, isEnd, previousIndentLevel, previousRow, sameIndent;
      buffer = this.editor.getBuffer();
      previousRow = row - 1;
      while (previousRow >= 0) {
        previousIndentLevel = this.editor.indentationForBufferRow(previousRow);
        sameIndent = previousIndentLevel <= indentLevel;
        blank = this.isBlank(previousRow);
        isEnd = this.getRow(previousRow).trim() === 'end';
        if (this.isBlank(row)) {
          row = previousRow;
        }
        if (sameIndent && !blank && !isEnd) {
          return [this.getRows(previousRow, row), row];
        }
        previousRow--;
      }
      return null;
    };

    CodeManager.prototype.getRow = function(row) {
      return this.editor.lineTextForBufferRow(row);
    };

    CodeManager.prototype.getRows = function(startRow, endRow) {
      var buffer;
      buffer = this.editor.getBuffer();
      return buffer.getTextInRange({
        start: {
          row: startRow,
          column: 0
        },
        end: {
          row: endRow,
          column: 9999999
        }
      });
    };

    CodeManager.prototype.getFoldRange = function(editor, row) {
      var range;
      range = editor.languageMode.rowRangeForCodeFoldAtBufferRow(row);
      if (this.getRow(range[1] + 1).trim() === 'end') {
        range[1] = range[1] + 1;
      }
      console.log('getFoldRange:', range);
      return range;
    };

    CodeManager.prototype.getFoldContents = function(row) {
      var buffer, range;
      buffer = this.editor.getBuffer();
      range = this.getFoldRange(this.editor, row);
      return [this.getRows(range[0], range[1]), range[1]];
    };

    CodeManager.prototype.getCurrentCell = function() {
      var buffer, cursor, end, regex, regexString, start;
      buffer = this.editor.getBuffer();
      start = buffer.getFirstPosition();
      end = buffer.getEndPosition();
      regexString = this.getRegexString(this.editor);
      if (regexString == null) {
        return [start, end];
      }
      regex = new RegExp(regexString);
      cursor = this.editor.getLastCursor().getBufferPosition();
      while (cursor.row < end.row && this.isComment(this.editor, cursor)) {
        cursor.row += 1;
        cursor.column = 0;
      }
      if (cursor.row > 0) {
        buffer.backwardsScanInRange(regex, [start, cursor], function(_arg) {
          var range;
          range = _arg.range;
          return start = range.start;
        });
      }
      buffer.scanInRange(regex, [cursor, end], function(_arg) {
        var range;
        range = _arg.range;
        return end = range.start;
      });
      console.log('CellManager: Cell [start, end]:', [start, end], 'cursor:', cursor);
      return [start, end];
    };

    CodeManager.prototype.getBreakpoints = function() {
      var breakpoints, buffer, regex, regexString;
      buffer = this.editor.getBuffer();
      breakpoints = [buffer.getFirstPosition()];
      regexString = this.getRegexString(this.editor);
      if (regexString != null) {
        regex = new RegExp(regexString, 'g');
        buffer.scan(regex, function(_arg) {
          var range;
          range = _arg.range;
          return breakpoints.push(range.start);
        });
      }
      breakpoints.push(buffer.getEndPosition());
      console.log('CellManager: Breakpoints:', breakpoints);
      return breakpoints;
    };

    CodeManager.prototype.getRegexString = function() {
      var commentEndString, commentStartString, escapedCommentStartString, regexString, scope, _ref;
      scope = this.editor.getRootScopeDescriptor();
      _ref = this.getCommentStrings(scope), commentStartString = _ref.commentStartString, commentEndString = _ref.commentEndString;
      if (!commentStartString) {
        console.log('CellManager: No comment string defined in root scope');
        return;
      }
      escapedCommentStartString = escapeStringRegexp(commentStartString.trimRight());
      regexString = escapedCommentStartString + '(%%| %%| <codecell>| In\[[0-9 ]*\]:?)';
      return regexString;
    };

    CodeManager.prototype.getCommentStrings = function(scope) {
      if (parseFloat(atom.getVersion()) <= 1.1) {
        return this.editor.languageMode.commentStartAndEndStringsForScope(scope);
      } else {
        return this.editor.getCommentStrings(scope);
      }
    };

    CodeManager.prototype.isComment = function(position) {
      var scope, scopeString;
      scope = this.editor.scopeDescriptorForBufferPosition(position);
      scopeString = scope.getScopeChain();
      return _.includes(scopeString, 'comment.line');
    };

    CodeManager.prototype.isBlank = function(row) {
      return this.editor.getBuffer().isRowBlank(row) || this.editor.languageMode.isLineCommentedAtBufferRow(row);
    };

    CodeManager.prototype.escapeBlankRows = function(startRow, endRow) {
      var i, _i, _ref;
      if (endRow > startRow) {
        for (i = _i = startRow, _ref = endRow - 1; startRow <= _ref ? _i <= _ref : _i >= _ref; i = startRow <= _ref ? ++_i : --_i) {
          if (this.isBlank(endRow)) {
            endRow -= 1;
          }
        }
      }
      return endRow;
    };

    CodeManager.prototype.moveDown = function(row) {
      var lastRow;
      lastRow = this.editor.getLastBufferRow();
      while (row < lastRow) {
        row++;
        if (!this.isBlank(row)) {
          break;
        }
      }
      if (!(row < lastRow)) {
        return;
      }
      return this.editor.setCursorBufferPosition({
        row: row,
        column: 0
      });
    };

    return CodeManager;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/Rad/.atom/packages/hydrogen/lib/code-manager.coffee
