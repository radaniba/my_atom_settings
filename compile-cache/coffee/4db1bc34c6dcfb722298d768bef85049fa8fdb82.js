(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  describe('python-indent', function() {
    var FILE_NAME, buffer, editor, grammar, properlyIndent;
    properlyIndent = require('../lib/python-indent').properlyIndent;
    grammar = 'Python';
    FILE_NAME = 'fixture.py';
    editor = null;
    buffer = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open(FILE_NAME).then(function(ed) {
          editor = ed;
          editor.setSoftTabs(true);
          editor.setTabLength(4);
          return buffer = editor.buffer;
        });
      });
      waitsForPromise(function() {
        var languagePackage, packages;
        packages = atom.packages.getAvailablePackageNames();
        if (__indexOf.call(packages, 'language-python') >= 0) {
          languagePackage = 'language-python';
        } else if (__indexOf.call(packages, 'MagicPython') >= 0) {
          languagePackage = 'MagicPython';
        }
        return atom.packages.activatePackage(languagePackage);
      });
      return waitsForPromise(function() {
        return atom.packages.activatePackage('python-indent');
      });
    });
    describe('package', function() {
      return it('loads python file and package', function() {
        expect(editor.getPath()).toContain(FILE_NAME);
        return expect(atom.packages.isPackageActive('python-indent')).toBe(true);
      });
    });
    describe('aligned with opening delimiter', function() {
      describe('when indenting after newline', function() {
        it('indents after open def params', function() {
          editor.insertText('def test(param_a, param_b, param_c,\n');
          properlyIndent();
          return expect(buffer.lineForRow(1)).toBe(' '.repeat(9));
        });
        it('indents after open tuple', function() {
          editor.insertText('tup = (True, False,\n');
          properlyIndent();
          return expect(buffer.lineForRow(1)).toBe(' '.repeat(7));
        });
        it('indents after open bracket', function() {
          editor.insertText('a_list = ["1", "2",\n');
          properlyIndent();
          return expect(buffer.lineForRow(1)).toBe(' '.repeat(10));
        });
        it('does not do any special indentation when delimiter is closed', function() {
          editor.insertText('def test(param_a, param_b, param_c):\n');
          properlyIndent();
          return expect(buffer.lineForRow(1)).toBe('');
        });
        it('keeps indentation on succeding open lines', function() {
          editor.insertText('def test(param_a,\n');
          properlyIndent();
          editor.insertText('param_b,\n');
          editor.autoIndentSelectedRows(2);
          return expect(buffer.lineForRow(2)).toBe(' '.repeat(9));
        });
        return it('allows for fluid indent in multi-level situations', function() {
          editor.insertText('class TheClass(object):\n');
          editor.autoIndentSelectedRows(1);
          editor.insertText('def test(param_a, param_b,\n');
          properlyIndent();
          editor.insertText('param_c):\n');
          properlyIndent();
          expect(buffer.lineForRow(3)).toBe(' '.repeat(8));
          editor.insertText('a_list = ["1", "2", "3",\n');
          properlyIndent();
          editor.insertText('"4"]\n');
          properlyIndent();
          return expect(buffer.lineForRow(5)).toBe(' '.repeat(8));
        });
      });
      return describe('when unindenting after newline :: aligned with opening delimiter', function() {
        it('unindents after close def params', function() {
          editor.insertText('def test(param_a,\n');
          properlyIndent();
          editor.insertText('param_b):\n');
          properlyIndent();
          return expect(buffer.lineForRow(2)).toBe(' '.repeat(4));
        });
        it('unindents after close tuple', function() {
          editor.insertText('tup = (True, False,\n');
          properlyIndent();
          editor.insertText('False)\n');
          properlyIndent();
          return expect(buffer.lineForRow(2)).toBe('');
        });
        return it('unindents after close bracket', function() {
          editor.insertText('a_list = ["1", "2",\n');
          properlyIndent();
          editor.insertText('"3"]\n');
          properlyIndent();
          return expect(buffer.lineForRow(2)).toBe('');
        });
      });
    });
    return describe('hanging', function() {
      return describe('when indenting after newline', function() {
        it('hanging indents after open def params', function() {
          editor.insertText('def test(\n');
          properlyIndent();
          return expect(buffer.lineForRow(1)).toBe(' '.repeat(4));
        });
        it('indents after open tuple', function() {
          editor.insertText('tup = (\n');
          properlyIndent();
          return expect(buffer.lineForRow(1)).toBe(' '.repeat(4));
        });
        it('indents after open bracket', function() {
          editor.insertText('a_list = [\n');
          properlyIndent();
          return expect(buffer.lineForRow(1)).toBe(' '.repeat(4));
        });
        it('indentation on succeding open lines', function() {
          editor.insertText('def test(\n');
          properlyIndent();
          editor.insertText('param_a,\n');
          editor.autoIndentSelectedRows(2);
          editor.insertText('param_b,\n');
          editor.autoIndentSelectedRows(3);
          return expect(buffer.lineForRow(3)).toBe(' '.repeat(4));
        });
        return it('allows for indent in multi-level situations', function() {
          editor.insertText('class TheClass(object):\n');
          editor.autoIndentSelectedRows(1);
          editor.insertText('def test(\n');
          properlyIndent();
          editor.insertText('param_a, param_b,\n');
          editor.autoIndentSelectedRows(3);
          editor.insertText('param_c):\n');
          editor.autoIndentSelectedRows(4);
          expect(buffer.lineForRow(4)).toBe(' '.repeat(4));
          editor.insertText('a_list = [\n');
          properlyIndent();
          editor.insertText('"1", "2", "3",\n');
          editor.autoIndentSelectedRows(6);
          editor.insertText('"4"]\n');
          editor.autoIndentSelectedRows(7);
          return expect(buffer.lineForRow(7)).toBe(' '.repeat(4));
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/Rad/.atom/packages/python-indent/spec/python-indent-spec.coffee
