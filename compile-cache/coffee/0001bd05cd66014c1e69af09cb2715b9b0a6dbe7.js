(function() {
  var Gist, fs, path, protocol;

  fs = require('fs');

  if (atom.config.get('gist-it.gitHubEnterpriseHost') && atom.config.get('gist-it.useHttp')) {
    protocol = require('http');
  } else {
    protocol = require('https');
  }

  path = require('path');

  module.exports = Gist = (function() {
    function Gist() {
      this.isPublic = !atom.config.get('gist-it.newGistsDefaultToPrivate');
      this.files = {};
      this.description = "";
      if (atom.config.get('gist-it.gitHubEnterpriseHost')) {
        this.hostname = atom.config.get('gist-it.gitHubEnterpriseHost');
        this.path = '/api/v3/gists';
      } else {
        this.hostname = 'api.github.com';
        this.path = '/gists';
      }
    }

    Gist.prototype.getSecretTokenPath = function() {
      return path.join(atom.getConfigDirPath(), "gist-it.token");
    };

    Gist.prototype.getToken = function() {
      var config;
      if (this.token == null) {
        config = atom.config.get("gist-it.userToken").trim();
        this.token = (config != null) && config.toString().length > 0 ? config : fs.existsSync(this.getSecretTokenPath()) ? fs.readFileSync(this.getSecretTokenPath()) : void 0;
      }
      return this.token;
    };

    Gist.prototype.post = function(callback) {
      var options, request;
      options = {
        hostname: this.hostname,
        path: this.path,
        method: 'POST',
        headers: {
          "User-Agent": "Atom"
        }
      };
      if (this.getToken() != null) {
        options.headers["Authorization"] = "token " + (this.getToken());
      }
      request = protocol.request(options, function(res) {
        var body;
        res.setEncoding("utf8");
        body = '';
        res.on("data", function(chunk) {
          return body += chunk;
        });
        return res.on("end", function() {
          var response;
          response = JSON.parse(body);
          return callback(response);
        });
      });
      request.write(JSON.stringify(this.toParams()));
      return request.end();
    };

    Gist.prototype.toParams = function() {
      return {
        description: this.description,
        files: this.files,
        "public": this.isPublic
      };
    };

    return Gist;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL1JhZC8uYXRvbS9wYWNrYWdlcy9naXN0LWl0L2xpYi9naXN0LW1vZGVsLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSx3QkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQUFMLENBQUE7O0FBRUEsRUFBQSxJQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQiw4QkFBaEIsQ0FBQSxJQUFvRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsaUJBQWhCLENBQXZEO0FBQ0ksSUFBQSxRQUFBLEdBQVcsT0FBQSxDQUFRLE1BQVIsQ0FBWCxDQURKO0dBQUEsTUFBQTtBQUdJLElBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxPQUFSLENBQVgsQ0FISjtHQUZBOztBQUFBLEVBTUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBTlAsQ0FBQTs7QUFBQSxFQVFBLE1BQU0sQ0FBQyxPQUFQLEdBQ007QUFDUyxJQUFBLGNBQUEsR0FBQTtBQUNULE1BQUEsSUFBQyxDQUFBLFFBQUQsR0FBWSxDQUFBLElBQUssQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQixrQ0FBaEIsQ0FBYixDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTLEVBRFQsQ0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLFdBQUQsR0FBZSxFQUZmLENBQUE7QUFLQSxNQUFBLElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLDhCQUFoQixDQUFIO0FBQ0UsUUFBQSxJQUFDLENBQUEsUUFBRCxHQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQiw4QkFBaEIsQ0FBWixDQUFBO0FBQUEsUUFDQSxJQUFDLENBQUEsSUFBRCxHQUFRLGVBRFIsQ0FERjtPQUFBLE1BQUE7QUFJRSxRQUFB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

//# sourceURL=/Users/Rad/.atom/packages/gist-it/lib/gist-model.coffee
