(function() {
  var SpecHelper, SyncSettings, fs, os, path, run;

  SyncSettings = require('../lib/sync-settings');

  SpecHelper = require('./spec-helpers');

  run = SpecHelper.callAsync;

  fs = require('fs');

  path = require('path');

  os = require('os');

  describe("SyncSettings", function() {
    describe("low-level", function() {
      return describe("::fileContent", function() {
        var tmpPath;
        tmpPath = path.join(os.tmpdir(), 'atom-sync-settings.tmp');
        it("returns null for not existing file", function() {
          return expect(SyncSettings.fileContent(tmpPath)).toBeNull();
        });
        it("returns null for empty file", function() {
          fs.writeFileSync(tmpPath, "");
          try {
            return expect(SyncSettings.fileContent(tmpPath)).toBeNull();
          } finally {
            fs.unlinkSync(tmpPath);
          }
        });
        return it("returns content of existing file", function() {
          var text;
          text = "alabala portocala";
          fs.writeFileSync(tmpPath, text);
          try {
            return expect(SyncSettings.fileContent(tmpPath)).toEqual(text);
          } finally {
            fs.unlinkSync(tmpPath);
          }
        });
      });
    });
    return describe("high-level", function() {
      var GIST_ID_CONFIG, TOKEN_CONFIG;
      TOKEN_CONFIG = 'sync-settings.personalAccessToken';
      GIST_ID_CONFIG = 'sync-settings.gistId';
      window.resetTimeouts();
      SyncSettings.activate();
      window.advanceClock();
      beforeEach(function() {
        this.token = process.env.GITHUB_TOKEN || atom.config.get(TOKEN_CONFIG);
        atom.config.set(TOKEN_CONFIG, this.token);
        return run(function(cb) {
          var gistSettings;
          gistSettings = {
            "public": false,
            description: "Test gist by Sync Settings for Atom https://github.com/atom-community/sync-settings",
            files: {
              README: {
                content: '# Generated by Sync Settings for Atom https://github.com/atom-community/sync-settings'
              }
            }
          };
          return SyncSettings.createClient().gists.create(gistSettings, cb);
        }, (function(_this) {
          return function(err, res) {
            expect(err).toBeNull();
            _this.gistId = res.id;
            console.log("Using Gist " + _this.gistId);
            return atom.config.set(GIST_ID_CONFIG, _this.gistId);
          };
        })(this));
      });
      afterEach(function() {
        return run((function(_this) {
          return function(cb) {
            return SyncSettings.createClient().gists["delete"]({
              id: _this.gistId
            }, cb);
          };
        })(this), function(err, res) {
          return expect(err).toBeNull();
        });
      });
      describe("::backup", function() {
        it("back up the settings", function() {
          atom.config.set('sync-settings.syncSettings', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['settings.json']).toBeDefined();
            });
          });
        });
        it("don't back up the settings", function() {
          atom.config.set('sync-settings.syncSettings', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['settings.json']).not.toBeDefined();
            });
          });
        });
        it("back up the installed packages list", function() {
          atom.config.set('sync-settings.syncPackages', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['packages.json']).toBeDefined();
            });
          });
        });
        it("don't back up the installed packages list", function() {
          atom.config.set('sync-settings.syncPackages', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['packages.json']).not.toBeDefined();
            });
          });
        });
        it("back up the user keymaps", function() {
          atom.config.set('sync-settings.syncKeymap', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['keymap.cson']).toBeDefined();
            });
          });
        });
        it("don't back up the user keymaps", function() {
          atom.config.set('sync-settings.syncKeymap', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['keymap.cson']).not.toBeDefined();
            });
          });
        });
        it("back up the user styles", function() {
          atom.config.set('sync-settings.syncStyles', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['styles.less']).toBeDefined();
            });
          });
        });
        it("don't back up the user styles", function() {
          atom.config.set('sync-settings.syncStyles', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['styles.less']).not.toBeDefined();
            });
          });
        });
        it("back up the user init.coffee file", function() {
          atom.config.set('sync-settings.syncInit', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['init.coffee']).toBeDefined();
            });
          });
        });
        it("don't back up the user init.coffee file", function() {
          atom.config.set('sync-settings.syncInit', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['init.coffee']).not.toBeDefined();
            });
          });
        });
        it("back up the user snippets", function() {
          atom.config.set('sync-settings.syncSnippets', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['snippets.cson']).toBeDefined();
            });
          });
        });
        it("don't back up the user snippets", function() {
          atom.config.set('sync-settings.syncSnippets', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['snippets.cson']).not.toBeDefined();
            });
          });
        });
        it("back up the files defined in config.extraFiles", function() {
          atom.config.set('sync-settings.extraFiles', ['test.tmp', 'test2.tmp']);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              var file, _i, _len, _ref, _results;
              _ref = atom.config.get('sync-settings.extraFiles');
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                _results.push(expect(res.files[file]).toBeDefined());
              }
              return _results;
            });
          });
        });
        return it("don't back up extra files defined in config.extraFiles", function() {
          atom.config.set('sync-settings.extraFiles', void 0);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(Object.keys(res.files).length).toBe(1);
            });
          });
        });
      });
      describe("::restore", function() {
        it("updates settings", function() {
          atom.config.set('sync-settings.syncSettings', true);
          atom.config.set("some-dummy", true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            atom.config.set("some-dummy", false);
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              return expect(atom.config.get("some-dummy")).toBeTruthy();
            });
          });
        });
        it("doesn't updates settings", function() {
          atom.config.set('sync-settings.syncSettings', false);
          atom.config.set("some-dummy", true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              return expect(atom.config.get("some-dummy")).toBeTruthy();
            });
          });
        });
        it("overrides keymap.cson", function() {
          var original, _ref;
          atom.config.set('sync-settings.syncKeymap', true);
          original = (_ref = SyncSettings.fileContent(atom.keymaps.getUserKeymapPath())) != null ? _ref : "# keymap file (not found)";
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            fs.writeFileSync(atom.keymaps.getUserKeymapPath(), "" + original + "\n# modified by sync setting spec");
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              expect(SyncSettings.fileContent(atom.keymaps.getUserKeymapPath())).toEqual(original);
              return fs.writeFileSync(atom.keymaps.getUserKeymapPath(), original);
            });
          });
        });
        return it("restores all other files in the gist as well", function() {
          atom.config.set('sync-settings.extraFiles', ['test.tmp', 'test2.tmp']);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              var file, _i, _len, _ref, _results;
              _ref = atom.config.get('sync-settings.extraFiles');
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                expect(fs.existsSync("" + atom.config.configDirPath + "/" + file)).toBe(true);
                expect(SyncSettings.fileContent("" + atom.config.configDirPath + "/" + file)).toBe("# " + file + " (not found) ");
                _results.push(fs.unlink("" + atom.config.configDirPath + "/" + file));
              }
              return _results;
            });
          });
        });
      });
      return describe("::check for update", function() {
        beforeEach(function() {
          return atom.config.unset('sync-settings._lastBackupHash');
        });
        it("updates last hash on backup", function() {
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return expect(atom.config.get("sync-settings._lastBackupHash")).toBeDefined();
          });
        });
        it("updates last hash on restore", function() {
          return run(function(cb) {
            return SyncSettings.restore(cb);
          }, function() {
            return expect(atom.config.get("sync-settings._lastBackupHash")).toBeDefined();
          });
        });
        return describe("::notification", function() {
          beforeEach(function() {
            return atom.notifications.clear();
          });
          it("displays on newer backup", function() {
            return run(function(cb) {
              return SyncSettings.checkForUpdate(cb);
            }, function() {
              expect(atom.notifications.getNotifications().length).toBe(1);
              return expect(atom.notifications.getNotifications()[0].getType()).toBe('warning');
            });
          });
          return it("ignores on up-to-date backup", function() {
            return run(function(cb) {
              return SyncSettings.backup(cb);
            }, function() {
              return run(function(cb) {
                atom.notifications.clear();
                return SyncSettings.checkForUpdate(cb);
              }, function() {
                expect(atom.notifications.getNotifications().length).toBe(1);
                return expect(atom.notifications.getNotifications()[0].getType()).toBe('success');
              });
            });
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/Rad/.atom/packages/sync-settings/spec/sync-settings-spec.coffee
