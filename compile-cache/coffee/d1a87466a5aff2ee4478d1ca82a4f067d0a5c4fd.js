(function() {
  var $, BASE, BOTTOM, BaseSide, CONFLICT_REGEX, Conflict, ConflictParser, Emitter, INVALID, MIDDLE, Navigator, OurSide, Side, TOP, TheirSide, _, _ref;

  $ = require('space-pen').$;

  Emitter = require('atom').Emitter;

  _ = require('underscore-plus');

  _ref = require('./side'), Side = _ref.Side, OurSide = _ref.OurSide, TheirSide = _ref.TheirSide, BaseSide = _ref.BaseSide;

  Navigator = require('./navigator').Navigator;

  CONFLICT_REGEX = /^<{7} (.+)\r?\n([^]*?)(?:\|{7} (.+)\r?\n((?:(?:<{7}[^]*?>{7})|[^])*?))?={7}\r?\n([^]*?)>{7} (.+)(?:\r?\n)?/mg;

  INVALID = null;

  TOP = 'top';

  BASE = 'base';

  MIDDLE = 'middle';

  BOTTOM = 'bottom';

  ConflictParser = (function() {
    var options;

    options = {
      persistent: false,
      invalidate: 'never'
    };

    function ConflictParser(state, editor) {
      this.state = state;
      this.editor = editor;
      this.position = INVALID;
    }

    ConflictParser.prototype.start = function(m) {
      this.m = m;
      this.startRow = this.m.range.start.row;
      this.endRow = this.m.range.end.row;
      this.chunks = this.m.match;
      this.chunks.shift();
      this.currentRow = this.startRow;
      this.position = TOP;
      return this.previousSide = null;
    };

    ConflictParser.prototype.finish = function() {
      return this.previousSide.followingMarker = this.previousSide.refBannerMarker;
    };

    ConflictParser.prototype.markOurs = function() {
      return this._markHunk(OurSide);
    };

    ConflictParser.prototype.markBase = function() {
      return this._markHunk(BaseSide);
    };

    ConflictParser.prototype.markSeparator = function() {
      var marker, sepRowEnd, sepRowStart;
      if (this.position !== MIDDLE) {
        throw new Error("Unexpected position for separator: " + this.position);
      }
      this.position = BOTTOM;
      sepRowStart = this.currentRow;
      sepRowEnd = this._advance(1);
      marker = this.editor.markBufferRange([[sepRowStart, 0], [sepRowEnd, 0]], this.options);
      this.previousSide.followingMarker = marker;
      return new Navigator(marker);
    };

    ConflictParser.prototype.markTheirs = function() {
      return this._markHunk(TheirSide);
    };

    ConflictParser.prototype._markHunk = function(sideKlass) {
      var bannerMarker, bannerRowEnd, bannerRowStart, lines, marker, ref, rowEnd, rowStart, side, sidePosition, text;
      sidePosition = this.position;
      switch (this.position) {
        case TOP:
          ref = this.chunks.shift();
          text = this.chunks.shift();
          lines = text.split(/\n/);
          bannerRowStart = this.currentRow;
          bannerRowEnd = rowStart = this._advance(1);
          rowEnd = this._advance(lines.length - 1);
          this.position = BASE;
          break;
        case BASE:
          this.position = MIDDLE;
          ref = this.chunks.shift();
          text = this.chunks.shift();
          if (!text) {
            return null;
          }
          lines = text.split(/\n/);
          bannerRowStart = this.currentRow;
          bannerRowEnd = rowStart = this._advance(1);
          rowEnd = this._advance(lines.length - 1);
          break;
        case BOTTOM:
          text = this.chunks.shift();
          ref = this.chunks.shift();
          lines = text.split(/\n/);
          rowStart = this.currentRow;
          bannerRowStart = rowEnd = this._advance(lines.length - 1);
          bannerRowEnd = this._advance(1);
          this.position = INVALID;
          break;
        default:
          throw new Error("Unexpected position for side: " + this.position);
      }
      bannerMarker = this.editor.markBufferRange([[bannerRowStart, 0], [bannerRowEnd, 0]], this.options);
      marker = this.editor.markBufferRange([[rowStart, 0], [rowEnd, 0]], this.options);
      if (sidePosition === BASE) {
        this.previousSide.followingMarker = bannerMarker;
      }
      side = new sideKlass(text, ref, marker, bannerMarker, sidePosition);
      this.previousSide = side;
      return side;
    };

    ConflictParser.prototype._advance = function(rowCount) {
      return this.currentRow += rowCount;
    };

    return ConflictParser;

  })();

  Conflict = (function() {
    function Conflict(ours, theirs, base, navigator, state) {
      var _ref1;
      this.ours = ours;
      this.theirs = theirs;
      this.base = base;
      this.navigator = navigator;
      this.state = state;
      this.emitter = new Emitter;
      this.ours.conflict = this;
      this.theirs.conflict = this;
      if ((_ref1 = this.base) != null) {
        _ref1.conflict = this;
      }
      this.navigator.conflict = this;
      this.resolution = null;
    }

    Conflict.prototype.isResolved = function() {
      return this.resolution != null;
    };

    Conflict.prototype.onDidResolveConflict = function(callback) {
      return this.emitter.on('resolve-conflict', callback);
    };

    Conflict.prototype.resolveAs = function(side) {
      this.resolution = side;
      return this.emitter.emit('resolve-conflict');
    };

    Conflict.prototype.scrollTarget = function() {
      return this.ours.marker.getTailBufferPosition();
    };

    Conflict.prototype.markers = function() {
      var _ref1, _ref2;
      return _.flatten([this.ours.markers(), this.theirs.markers(), (_ref1 = (_ref2 = this.base) != null ? _ref2.markers() : void 0) != null ? _ref1 : [], this.navigator.markers()], true);
    };

    Conflict.prototype.toString = function() {
      return "[conflict: " + this.ours + " " + this.theirs + "]";
    };

    Conflict.all = function(state, editor) {
      var marker, previous, results;
      results = [];
      previous = null;
      marker = new ConflictParser(state, editor);
      editor.getBuffer().scan(CONFLICT_REGEX, function(m) {
        var base, c, nav, ours, theirs;
        marker.start(m);
        if (state.isRebase) {
          theirs = marker.markTheirs();
          base = marker.markBase();
          nav = marker.markSeparator();
          ours = marker.markOurs();
        } else {
          ours = marker.markOurs();
          base = marker.markBase();
          nav = marker.markSeparator();
          theirs = marker.markTheirs();
        }
        marker.finish();
        c = new Conflict(ours, theirs, base, nav, state);
        results.push(c);
        nav.linkToPrevious(previous);
        return previous = c;
      });
      return results;
    };

    return Conflict;

  })();

  module.exports = {
    Conflict: Conflict
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/Rad/.atom/packages/merge-conflicts/lib/conflict.coffee
